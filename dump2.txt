================================================================================
-------------------------------OPTIMIZED DUMP nrt-------------------------------
; ModuleID = 'nrt'
source_filename = "<string>"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.const.picklebuf.139788684325824 = internal constant { i8*, i32, i8* } { i8* getelementptr inbounds ([102 x i8], [102 x i8]* @.const.pickledata.139788684325824, i32 0, i32 0), i32 102, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.const.pickledata.139788684325824.sha1, i32 0, i32 0) }
@.const.pickledata.139788684325824 = internal constant [102 x i8] c"\80\04\95[\00\00\00\00\00\00\00\8C\08builtins\94\8C\0CRuntimeError\94\93\94\8C6numba jitted function aborted due to unresolved symbol\94\85\94N\87\94."
@.const.pickledata.139788684325824.sha1 = internal constant [20 x i8] c"\97\BE\DC\DF\EC\8E\80\B7\09>P\CE%\EDV\F7r\0E\0C\9C"

; Function Attrs: nofree norecurse nounwind
define i64 @nrt_atomic_add(i64* nocapture %.1) local_unnamed_addr #0 {
.3:
  %.4 = atomicrmw add i64* %.1, i64 1 monotonic
  %.5 = add i64 %.4, 1
  ret i64 %.5
}

; Function Attrs: nofree norecurse nounwind
define i64 @nrt_atomic_sub(i64* nocapture %.1) local_unnamed_addr #0 {
.3:
  %.4 = atomicrmw sub i64* %.1, i64 1 monotonic
  %.5 = add i64 %.4, -1
  ret i64 %.5
}

; Function Attrs: nofree norecurse nounwind
define i32 @nrt_atomic_cas(i64* nocapture %.1, i64 %.2, i64 %.3, i64* nocapture %.4) local_unnamed_addr #0 {
.6:
  %.7 = cmpxchg i64* %.1, i64 %.2, i64 %.3 monotonic monotonic
  %.8 = extractvalue { i64, i1 } %.7, 0
  %.9 = extractvalue { i64, i1 } %.7, 1
  store i64 %.8, i64* %.4, align 8
  %.11 = zext i1 %.9 to i32
  ret i32 %.11
}

; Function Attrs: norecurse nounwind readonly
define i8* @NRT_MemInfo_data_fast(i8* nocapture readonly %.1) local_unnamed_addr #1 {
.3:
  %.5 = getelementptr i8, i8* %.1, i64 24
  %0 = bitcast i8* %.5 to i8**
  %.6 = load i8*, i8** %0, align 8
  ret i8* %.6
}

; Function Attrs: nofree noinline norecurse nounwind
define void @NRT_incref(i8* %.1) local_unnamed_addr #2 {
.3:
  %.4 = icmp eq i8* %.1, null
  br i1 %.4, label %.3.if, label %.3.endif, !prof !0

.3.if:                                            ; preds = %.3
  ret void

.3.endif:                                         ; preds = %.3
  %.7 = bitcast i8* %.1 to i64*
  %.4.i = atomicrmw add i64* %.7, i64 1 monotonic
  ret void
}

; Function Attrs: noinline
define void @NRT_decref(i8* %.1) local_unnamed_addr #3 {
.3:
  %.4 = icmp eq i8* %.1, null
  br i1 %.4, label %.3.if, label %.3.endif, !prof !0

.3.if:                                            ; preds = %.3.endif, %.3
  ret void

.3.endif:                                         ; preds = %.3
  fence release
  %.8 = bitcast i8* %.1 to i64*
  %.4.i = atomicrmw sub i64* %.8, i64 1 monotonic
  %.10 = icmp eq i64 %.4.i, 1
  br i1 %.10, label %.3.endif.if, label %.3.if, !prof !0

.3.endif.if:                                      ; preds = %.3.endif
  fence acquire
  tail call void @NRT_MemInfo_call_dtor(i8* nonnull %.1)
  ret void
}

declare void @NRT_MemInfo_call_dtor(i8*) local_unnamed_addr

; Function Attrs: nofree norecurse nounwind writeonly
define i32 @nrt_unresolved_abort(i8** nocapture readnone %.1, { i8*, i32, i8* }** nocapture %.2) local_unnamed_addr #4 {
.4:
  store { i8*, i32, i8* }* @.const.picklebuf.139788684325824, { i8*, i32, i8* }** %.2, align 8
  ret i32 1, !ret_is_raise !1
}

; Function Attrs: nounwind
declare void @llvm.stackprotector(i8*, i8**) #5

attributes #0 = { nofree norecurse nounwind }
attributes #1 = { norecurse nounwind readonly }
attributes #2 = { nofree noinline norecurse nounwind }
attributes #3 = { noinline }
attributes #4 = { nofree norecurse nounwind writeonly }
attributes #5 = { nounwind }

!0 = !{!"branch_weights", i32 1, i32 99}
!1 = !{i1 true}

================================================================================
================================================================================
----------------------------OPTIMIZED DUMP <lambda>-----------------------------
; ModuleID = '<lambda>'
source_filename = "<string>"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@"_ZN08NumbaEnv5numba7cpython8builtins17$3clambda$3e$2437Exx" = common local_unnamed_addr global i8* null

; Function Attrs: nofree norecurse nounwind writeonly
define i32 @"_ZN5numba7cpython8builtins17$3clambda$3e$2437Exx"(i8* noalias nocapture %retptr, { i8*, i32, i8* }** noalias nocapture readnone %excinfo, i64 %arg.a, i64 %arg.b) local_unnamed_addr #0 {
entry:
  %.6 = icmp slt i64 %arg.a, %arg.b
  %.7 = zext i1 %.6 to i8
  store i8 %.7, i8* %retptr, align 1
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind writeonly
define i1 @"cfunc._ZN5numba7cpython8builtins17$3clambda$3e$2437Exx"(i64 %.1, i64 %.2) local_unnamed_addr #0 {
entry:
  %.4 = alloca i8, align 1
  store i8 0, i8* %.4, align 1
  %.8 = call i32 @"_ZN5numba7cpython8builtins17$3clambda$3e$2437Exx"(i8* nonnull %.4, { i8*, i32, i8* }** undef, i64 %.1, i64 %.2) #2
  %.18 = load i8, i8* %.4, align 1
  %.21 = icmp ne i8 %.18, 0
  ret i1 %.21
}

; Function Attrs: nounwind
declare void @llvm.stackprotector(i8*, i8**) #1

attributes #0 = { nofree norecurse nounwind writeonly }
attributes #1 = { nounwind }
attributes #2 = { noinline }

================================================================================
================================================================================
-------------------OPTIMIZED DUMP min_max_impl.<locals>.impl--------------------
; ModuleID = 'min_max_impl.<locals>.impl'
source_filename = "<string>"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@"_ZN08NumbaEnv5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e" = common local_unnamed_addr global i8* null
@.const.picklebuf.139788661619840 = internal constant { i8*, i32, i8* } { i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.const.pickledata.139788661619840, i32 0, i32 0), i32 45, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.const.pickledata.139788661619840.sha1, i32 0, i32 0) }
@.const.pickledata.139788661619840 = internal constant [45 x i8] c"\80\04\95\22\00\00\00\00\00\00\00\8C\08builtins\94\8C\0DStopIteration\94\93\94)N\87\94."
@.const.pickledata.139788661619840.sha1 = internal constant [20 x i8] c"r\FF\91\BA\9B\96%\AA\06<\19\8C\F2\BA\14\B8\A5\F6\80\A0"
@".const.<numba.core.cpu.CPUContext object at 0x7f23157b05b0>" = internal constant [53 x i8] c"<numba.core.cpu.CPUContext object at 0x7f23157b05b0>\00"
@PyExc_SystemError = external global i8
@".const.unknown error when calling native function" = internal constant [43 x i8] c"unknown error when calling native function\00"
@"_ZN08NumbaEnv5numba7cpython8builtins17$3clambda$3e$2437Exx" = common local_unnamed_addr global i8* null

; Function Attrs: nofree norecurse nounwind
define i32 @"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e"(i64* noalias nocapture %retptr, { i8*, i32, i8* }** noalias nocapture %excinfo, i8* nocapture readonly %arg.iterable.0, i8* nocapture readnone %arg.iterable.1) local_unnamed_addr #0 {
entry:
  %.5.i = getelementptr i8, i8* %arg.iterable.0, i64 24
  %0 = bitcast i8* %.5.i to { i64, i64, i8, i64 }**
  %.6.i11 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %0, align 8
  %.4061 = bitcast { i64, i64, i8, i64 }* %.6.i11 to i64*
  %.41 = load i64, i64* %.4061, align 8
  %.42 = icmp sgt i64 %.41, 0
  br i1 %.42, label %B0.endif.endif.endif, label %B0.endif.endif.if

B24:                                              ; preds = %B24.preheader36, %B24
  %return_val.2.025 = phi i64 [ %return_val.3.1, %B24 ], [ %return_val.2.025.ph, %B24.preheader36 ]
  %.14.024 = phi i64 [ %.129, %B24 ], [ %.14.024.ph, %B24.preheader36 ]
  %sunkaddr = mul i64 %.14.024, 8
  %1 = bitcast { i64, i64, i8, i64 }* %.6.i11 to i8*
  %sunkaddr62 = getelementptr i8, i8* %1, i64 %sunkaddr
  %sunkaddr63 = getelementptr i8, i8* %sunkaddr62, i64 24
  %2 = bitcast i8* %sunkaddr63 to i64*
  %.126 = load i64, i64* %2, align 8
  %.129 = add nuw nsw i64 %.14.024, 1
  %.6.i7.not = icmp slt i64 %.126, %return_val.2.025
  %return_val.3.1 = select i1 %.6.i7.not, i64 %.126, i64 %return_val.2.025
  %exitcond.not = icmp eq i64 %.41, %.129
  br i1 %exitcond.not, label %B42, label %B24, !llvm.loop !1

B42:                                              ; preds = %B24, %middle.block, %B0.endif.endif.endif
  %return_val.2.0.lcssa = phi i64 [ %.52, %B0.endif.endif.endif ], [ %21, %middle.block ], [ %return_val.3.1, %B24 ]
  store i64 %return_val.2.0.lcssa, i64* %retptr, align 8
  ret i32 0

B0.endif.endif.if:                                ; preds = %entry
  store { i8*, i32, i8* }* @.const.picklebuf.139788661619840, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !4

B0.endif.endif.endif:                             ; preds = %entry
  %.50 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11, i64 0, i32 3
  %.52 = load i64, i64* %.50, align 8
  %.11623.not = icmp eq i64 %.41, 1
  br i1 %.11623.not, label %B42, label %B24.preheader

B24.preheader:                                    ; preds = %B0.endif.endif.endif
  %3 = add i64 %.41, -1
  %min.iters.check = icmp ult i64 %3, 16
  br i1 %min.iters.check, label %B24.preheader36, label %vector.ph

B24.preheader36:                                  ; preds = %middle.block, %B24.preheader
  %return_val.2.025.ph = phi i64 [ %.52, %B24.preheader ], [ %21, %middle.block ]
  %.14.024.ph = phi i64 [ 1, %B24.preheader ], [ %ind.end, %middle.block ]
  br label %B24

vector.ph:                                        ; preds = %B24.preheader
  %n.vec = and i64 %3, -16
  %ind.end = or i64 %n.vec, 1
  %minmax.ident.splatinsert = insertelement <4 x i64> undef, i64 %.52, i32 0
  %minmax.ident.splat = shufflevector <4 x i64> %minmax.ident.splatinsert, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ %minmax.ident.splat, %vector.ph ], [ %16, %vector.body ]
  %vec.phi26 = phi <4 x i64> [ %minmax.ident.splat, %vector.ph ], [ %17, %vector.body ]
  %vec.phi27 = phi <4 x i64> [ %minmax.ident.splat, %vector.ph ], [ %18, %vector.body ]
  %vec.phi28 = phi <4 x i64> [ %minmax.ident.splat, %vector.ph ], [ %19, %vector.body ]
  %sunkaddr64 = mul i64 %index, 8
  %4 = bitcast { i64, i64, i8, i64 }* %.6.i11 to i8*
  %sunkaddr65 = getelementptr i8, i8* %4, i64 %sunkaddr64
  %sunkaddr66 = getelementptr i8, i8* %sunkaddr65, i64 32
  %5 = bitcast i8* %sunkaddr66 to <4 x i64>*
  %wide.load = load <4 x i64>, <4 x i64>* %5, align 8
  %sunkaddr67 = mul i64 %index, 8
  %6 = bitcast { i64, i64, i8, i64 }* %.6.i11 to i8*
  %sunkaddr68 = getelementptr i8, i8* %6, i64 %sunkaddr67
  %sunkaddr69 = getelementptr i8, i8* %sunkaddr68, i64 64
  %7 = bitcast i8* %sunkaddr69 to <4 x i64>*
  %wide.load29 = load <4 x i64>, <4 x i64>* %7, align 8
  %sunkaddr70 = mul i64 %index, 8
  %8 = bitcast { i64, i64, i8, i64 }* %.6.i11 to i8*
  %sunkaddr71 = getelementptr i8, i8* %8, i64 %sunkaddr70
  %sunkaddr72 = getelementptr i8, i8* %sunkaddr71, i64 96
  %9 = bitcast i8* %sunkaddr72 to <4 x i64>*
  %wide.load30 = load <4 x i64>, <4 x i64>* %9, align 8
  %sunkaddr73 = mul i64 %index, 8
  %10 = bitcast { i64, i64, i8, i64 }* %.6.i11 to i8*
  %sunkaddr74 = getelementptr i8, i8* %10, i64 %sunkaddr73
  %sunkaddr75 = getelementptr i8, i8* %sunkaddr74, i64 128
  %11 = bitcast i8* %sunkaddr75 to <4 x i64>*
  %wide.load31 = load <4 x i64>, <4 x i64>* %11, align 8
  %12 = icmp slt <4 x i64> %wide.load, %vec.phi
  %13 = icmp slt <4 x i64> %wide.load29, %vec.phi26
  %14 = icmp slt <4 x i64> %wide.load30, %vec.phi27
  %15 = icmp slt <4 x i64> %wide.load31, %vec.phi28
  %16 = select <4 x i1> %12, <4 x i64> %wide.load, <4 x i64> %vec.phi
  %17 = select <4 x i1> %13, <4 x i64> %wide.load29, <4 x i64> %vec.phi26
  %18 = select <4 x i1> %14, <4 x i64> %wide.load30, <4 x i64> %vec.phi27
  %19 = select <4 x i1> %15, <4 x i64> %wide.load31, <4 x i64> %vec.phi28
  %index.next = add i64 %index, 16
  %20 = icmp eq i64 %n.vec, %index.next
  br i1 %20, label %middle.block, label %vector.body, !llvm.loop !5

middle.block:                                     ; preds = %vector.body
  %rdx.minmax.cmp = icmp slt <4 x i64> %16, %17
  %rdx.minmax.select = select <4 x i1> %rdx.minmax.cmp, <4 x i64> %16, <4 x i64> %17
  %rdx.minmax.cmp32 = icmp slt <4 x i64> %rdx.minmax.select, %18
  %rdx.minmax.select33 = select <4 x i1> %rdx.minmax.cmp32, <4 x i64> %rdx.minmax.select, <4 x i64> %18
  %rdx.minmax.cmp34 = icmp slt <4 x i64> %rdx.minmax.select33, %19
  %rdx.minmax.select35 = select <4 x i1> %rdx.minmax.cmp34, <4 x i64> %rdx.minmax.select33, <4 x i64> %19
  %rdx.shuf = shufflevector <4 x i64> %rdx.minmax.select35, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp56 = icmp slt <4 x i64> %rdx.minmax.select35, %rdx.shuf
  %rdx.minmax.select57 = select <4 x i1> %rdx.minmax.cmp56, <4 x i64> %rdx.minmax.select35, <4 x i64> %rdx.shuf
  %rdx.shuf58 = shufflevector <4 x i64> %rdx.minmax.select57, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp59 = icmp slt <4 x i64> %rdx.minmax.select57, %rdx.shuf58
  %rdx.minmax.select60 = select <4 x i1> %rdx.minmax.cmp59, <4 x i64> %rdx.minmax.select57, <4 x i64> %rdx.shuf58
  %21 = extractelement <4 x i64> %rdx.minmax.select60, i32 0
  %cmp.n = icmp eq i64 %3, %n.vec
  br i1 %cmp.n, label %B42, label %B24.preheader36
}

define i64 @"cfunc._ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e"({ i8*, i8* } %.1) local_unnamed_addr {
entry:
  %.3 = alloca i64, align 8
  store i64 0, i64* %.3, align 8
  %excinfo = alloca { i8*, i32, i8* }*, align 8
  store { i8*, i32, i8* }* null, { i8*, i32, i8* }** %excinfo, align 8
  %extracted.meminfo = extractvalue { i8*, i8* } %.1, 0
  %extracted.parent = extractvalue { i8*, i8* } %.1, 1
  %.7 = call i32 @"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e"(i64* nonnull %.3, { i8*, i32, i8* }** nonnull %excinfo, i8* %extracted.meminfo, i8* %extracted.parent) #3
  %.8 = load { i8*, i32, i8* }*, { i8*, i32, i8* }** %excinfo, align 8
  %.9.not = icmp eq i32 %.7, 0
  %.17 = load i64, i64* %.3, align 8
  %.19 = alloca i32, align 4
  store i32 0, i32* %.19, align 4
  br i1 %.9.not, label %entry.endif, label %entry.if, !prof !6

entry.if:                                         ; preds = %entry
  %.15 = icmp sgt i32 %.7, 0
  call void @numba_gil_ensure(i32* nonnull %.19)
  br i1 %.15, label %entry.if.if, label %entry.if.endif.endif.endif

entry.endif:                                      ; preds = %entry, %.22
  ret i64 %.17

.22:                                              ; preds = %entry.if.if, %entry.if.if.if, %entry.if.endif.endif.endif
  %.44 = call i8* @PyUnicode_FromString(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @".const.<numba.core.cpu.CPUContext object at 0x7f23157b05b0>", i64 0, i64 0))
  call void @PyErr_WriteUnraisable(i8* %.44)
  call void @Py_DecRef(i8* %.44)
  call void @numba_gil_release(i32* nonnull %.19)
  br label %entry.endif

entry.if.if:                                      ; preds = %entry.if
  call void @PyErr_Clear()
  %.25 = load { i8*, i32, i8* }, { i8*, i32, i8* }* %.8, align 8
  %.26 = extractvalue { i8*, i32, i8* } %.25, 0
  %.28 = extractvalue { i8*, i32, i8* } %.25, 1
  %.30 = extractvalue { i8*, i32, i8* } %.25, 2
  %.31 = call i8* @numba_unpickle(i8* %.26, i32 %.28, i8* %.30)
  %.32.not = icmp eq i8* %.31, null
  br i1 %.32.not, label %.22, label %entry.if.if.if, !prof !7

entry.if.if.if:                                   ; preds = %entry.if.if
  call void @numba_do_raise(i8* nonnull %.31)
  br label %.22

entry.if.endif.endif.endif:                       ; preds = %entry.if
  call void @PyErr_SetString(i8* nonnull @PyExc_SystemError, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @".const.unknown error when calling native function", i64 0, i64 0))
  br label %.22
}

declare void @numba_gil_ensure(i32*) local_unnamed_addr

declare i8* @PyUnicode_FromString(i8*) local_unnamed_addr

declare void @PyErr_WriteUnraisable(i8*) local_unnamed_addr

declare void @Py_DecRef(i8*) local_unnamed_addr

declare void @numba_gil_release(i32*) local_unnamed_addr

declare void @PyErr_Clear() local_unnamed_addr

declare i8* @numba_unpickle(i8*, i32, i8*) local_unnamed_addr

declare void @numba_do_raise(i8*) local_unnamed_addr

declare void @PyErr_SetString(i8*, i8*) local_unnamed_addr

; Function Attrs: nounwind readnone willreturn
declare i64 @llvm.experimental.vector.reduce.smin.v4i64(<4 x i64>) #1

; Function Attrs: nounwind
declare void @llvm.stackprotector(i8*, i8**) #2

attributes #0 = { nofree norecurse nounwind }
attributes #1 = { nounwind readnone willreturn }
attributes #2 = { nounwind }
attributes #3 = { noinline }

!numba_args_may_always_need_nrt = !{!0}

!0 = !{i32 (i64*, { i8*, i32, i8* }**, i8*, i8*)* @"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e"}
!1 = distinct !{!1, !2, !3}
!2 = !{!"llvm.loop.unroll.runtime.disable"}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = !{i1 true}
!5 = distinct !{!5, !3}
!6 = !{!"branch_weights", i32 99, i32 1}
!7 = !{!"branch_weights", i32 1, i32 99}

================================================================================
================================================================================
----------------------OPTIMIZED DUMP ol_sum.<locals>.impl-----------------------
; ModuleID = 'ol_sum.<locals>.impl'
source_filename = "<string>"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@"_ZN08NumbaEnv5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29" = common local_unnamed_addr global i8* null

; Function Attrs: nofree norecurse nounwind
define i32 @"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29"(i64* noalias nocapture %retptr, { i8*, i32, i8* }** noalias nocapture readnone %excinfo, i8* nocapture readonly %arg.iterable.0, i8* nocapture readnone %arg.iterable.1) local_unnamed_addr #0 {
entry:
  %.5.i = getelementptr i8, i8* %arg.iterable.0, i64 24
  %0 = bitcast i8* %.5.i to { i64, i64, i8, i64 }**
  %.6.i3 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %0, align 8
  %.5342 = bitcast { i64, i64, i8, i64 }* %.6.i3 to i64*
  %.548 = load i64, i64* %.5342, align 8
  %.559 = icmp sgt i64 %.548, 0
  br i1 %.559, label %B14.endif.lr.ph, label %B28

B14.endif.lr.ph:                                  ; preds = %entry
  %min.iters.check = icmp ult i64 %.548, 16
  br i1 %min.iters.check, label %B14.endif.preheader, label %vector.ph

B14.endif.preheader:                              ; preds = %middle.block, %B14.endif.lr.ph
  %acc.2.011.ph = phi i64 [ 0, %B14.endif.lr.ph ], [ %14, %middle.block ]
  %.17.010.ph = phi i64 [ 0, %B14.endif.lr.ph ], [ %n.vec, %middle.block ]
  br label %B14.endif

vector.ph:                                        ; preds = %B14.endif.lr.ph
  %n.vec = and i64 %.548, -16
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %9, %vector.body ]
  %vec.phi12 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %10, %vector.body ]
  %vec.phi13 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %11, %vector.body ]
  %vec.phi14 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %12, %vector.body ]
  %sunkaddr = mul i64 %index, 8
  %1 = bitcast { i64, i64, i8, i64 }* %.6.i3 to i8*
  %sunkaddr43 = getelementptr i8, i8* %1, i64 %sunkaddr
  %sunkaddr44 = getelementptr i8, i8* %sunkaddr43, i64 24
  %2 = bitcast i8* %sunkaddr44 to <4 x i64>*
  %wide.load = load <4 x i64>, <4 x i64>* %2, align 8
  %sunkaddr45 = mul i64 %index, 8
  %3 = bitcast { i64, i64, i8, i64 }* %.6.i3 to i8*
  %sunkaddr46 = getelementptr i8, i8* %3, i64 %sunkaddr45
  %sunkaddr47 = getelementptr i8, i8* %sunkaddr46, i64 56
  %4 = bitcast i8* %sunkaddr47 to <4 x i64>*
  %wide.load15 = load <4 x i64>, <4 x i64>* %4, align 8
  %sunkaddr48 = mul i64 %index, 8
  %5 = bitcast { i64, i64, i8, i64 }* %.6.i3 to i8*
  %sunkaddr49 = getelementptr i8, i8* %5, i64 %sunkaddr48
  %sunkaddr50 = getelementptr i8, i8* %sunkaddr49, i64 88
  %6 = bitcast i8* %sunkaddr50 to <4 x i64>*
  %wide.load16 = load <4 x i64>, <4 x i64>* %6, align 8
  %sunkaddr51 = mul i64 %index, 8
  %7 = bitcast { i64, i64, i8, i64 }* %.6.i3 to i8*
  %sunkaddr52 = getelementptr i8, i8* %7, i64 %sunkaddr51
  %sunkaddr53 = getelementptr i8, i8* %sunkaddr52, i64 120
  %8 = bitcast i8* %sunkaddr53 to <4 x i64>*
  %wide.load17 = load <4 x i64>, <4 x i64>* %8, align 8
  %9 = add <4 x i64> %wide.load, %vec.phi
  %10 = add <4 x i64> %wide.load15, %vec.phi12
  %11 = add <4 x i64> %wide.load16, %vec.phi13
  %12 = add <4 x i64> %wide.load17, %vec.phi14
  %index.next = add i64 %index, 16
  %13 = icmp eq i64 %n.vec, %index.next
  br i1 %13, label %middle.block, label %vector.body, !llvm.loop !1

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %10, %9
  %bin.rdx18 = add <4 x i64> %11, %bin.rdx
  %bin.rdx19 = add <4 x i64> %12, %bin.rdx18
  %rdx.shuf = shufflevector <4 x i64> %bin.rdx19, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx39 = add <4 x i64> %bin.rdx19, %rdx.shuf
  %rdx.shuf40 = shufflevector <4 x i64> %bin.rdx39, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx41 = add <4 x i64> %bin.rdx39, %rdx.shuf40
  %14 = extractelement <4 x i64> %bin.rdx41, i32 0
  %cmp.n = icmp eq i64 %.548, %n.vec
  br i1 %cmp.n, label %B28, label %B14.endif.preheader

B28:                                              ; preds = %B14.endif, %middle.block, %entry
  %acc.2.0.lcssa = phi i64 [ 0, %entry ], [ %14, %middle.block ], [ %.94, %B14.endif ]
  store i64 %acc.2.0.lcssa, i64* %retptr, align 8
  ret i32 0

B14.endif:                                        ; preds = %B14.endif.preheader, %B14.endif
  %acc.2.011 = phi i64 [ %.94, %B14.endif ], [ %acc.2.011.ph, %B14.endif.preheader ]
  %.17.010 = phi i64 [ %.68, %B14.endif ], [ %.17.010.ph, %B14.endif.preheader ]
  %sunkaddr54 = mul i64 %.17.010, 8
  %15 = bitcast { i64, i64, i8, i64 }* %.6.i3 to i8*
  %sunkaddr55 = getelementptr i8, i8* %15, i64 %sunkaddr54
  %sunkaddr56 = getelementptr i8, i8* %sunkaddr55, i64 24
  %16 = bitcast i8* %sunkaddr56 to i64*
  %.65 = load i64, i64* %16, align 8
  %.68 = add nuw nsw i64 %.17.010, 1
  %.94 = add nsw i64 %.65, %acc.2.011
  %exitcond.not = icmp eq i64 %.548, %.68
  br i1 %exitcond.not, label %B28, label %B14.endif, !llvm.loop !3
}

; Function Attrs: nounwind readnone willreturn
declare i64 @llvm.experimental.vector.reduce.add.v4i64(<4 x i64>) #1

attributes #0 = { nofree norecurse nounwind }
attributes #1 = { nounwind readnone willreturn }

!numba_args_may_always_need_nrt = !{!0}

!0 = !{i32 (i64*, { i8*, i32, i8* }**, i8*, i8*)* @"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29"}
!1 = distinct !{!1, !2}
!2 = !{!"llvm.loop.isvectorized", i32 1}
!3 = distinct !{!3, !4, !2}
!4 = !{!"llvm.loop.unroll.runtime.disable"}

================================================================================
================================================================================
----------------------------OPTIMIZED DUMP <lambda>-----------------------------
; ModuleID = '<lambda>'
source_filename = "<string>"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@"_ZN08NumbaEnv5numba7cpython8builtins17$3clambda$3e$2440Exx" = common local_unnamed_addr global i8* null

; Function Attrs: nofree norecurse nounwind writeonly
define i32 @"_ZN5numba7cpython8builtins17$3clambda$3e$2440Exx"(i8* noalias nocapture %retptr, { i8*, i32, i8* }** noalias nocapture readnone %excinfo, i64 %arg.a, i64 %arg.b) local_unnamed_addr #0 {
entry:
  %.6 = icmp sgt i64 %arg.a, %arg.b
  %.7 = zext i1 %.6 to i8
  store i8 %.7, i8* %retptr, align 1
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind writeonly
define i1 @"cfunc._ZN5numba7cpython8builtins17$3clambda$3e$2440Exx"(i64 %.1, i64 %.2) local_unnamed_addr #0 {
entry:
  %.4 = alloca i8, align 1
  store i8 0, i8* %.4, align 1
  %.8 = call i32 @"_ZN5numba7cpython8builtins17$3clambda$3e$2440Exx"(i8* nonnull %.4, { i8*, i32, i8* }** undef, i64 %.1, i64 %.2) #2
  %.18 = load i8, i8* %.4, align 1
  %.21 = icmp ne i8 %.18, 0
  ret i1 %.21
}

; Function Attrs: nounwind
declare void @llvm.stackprotector(i8*, i8**) #1

attributes #0 = { nofree norecurse nounwind writeonly }
attributes #1 = { nounwind }
attributes #2 = { noinline }

================================================================================
================================================================================
-------------------OPTIMIZED DUMP min_max_impl.<locals>.impl--------------------
; ModuleID = 'min_max_impl.<locals>.impl'
source_filename = "<string>"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@"_ZN08NumbaEnv5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e" = common local_unnamed_addr global i8* null
@.const.picklebuf.139788661619840 = internal constant { i8*, i32, i8* } { i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.const.pickledata.139788661619840, i32 0, i32 0), i32 45, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.const.pickledata.139788661619840.sha1, i32 0, i32 0) }
@.const.pickledata.139788661619840 = internal constant [45 x i8] c"\80\04\95\22\00\00\00\00\00\00\00\8C\08builtins\94\8C\0DStopIteration\94\93\94)N\87\94."
@.const.pickledata.139788661619840.sha1 = internal constant [20 x i8] c"r\FF\91\BA\9B\96%\AA\06<\19\8C\F2\BA\14\B8\A5\F6\80\A0"
@".const.<numba.core.cpu.CPUContext object at 0x7f2315764a30>" = internal constant [53 x i8] c"<numba.core.cpu.CPUContext object at 0x7f2315764a30>\00"
@PyExc_SystemError = external global i8
@".const.unknown error when calling native function" = internal constant [43 x i8] c"unknown error when calling native function\00"
@"_ZN08NumbaEnv5numba7cpython8builtins17$3clambda$3e$2440Exx" = common local_unnamed_addr global i8* null

; Function Attrs: nofree norecurse nounwind
define i32 @"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e"(i64* noalias nocapture %retptr, { i8*, i32, i8* }** noalias nocapture %excinfo, i8* nocapture readonly %arg.iterable.0, i8* nocapture readnone %arg.iterable.1) local_unnamed_addr #0 {
entry:
  %.5.i = getelementptr i8, i8* %arg.iterable.0, i64 24
  %0 = bitcast i8* %.5.i to { i64, i64, i8, i64 }**
  %.6.i11 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %0, align 8
  %.4061 = bitcast { i64, i64, i8, i64 }* %.6.i11 to i64*
  %.41 = load i64, i64* %.4061, align 8
  %.42 = icmp sgt i64 %.41, 0
  br i1 %.42, label %B0.endif.endif.endif, label %B0.endif.endif.if

B24:                                              ; preds = %B24.preheader36, %B24
  %return_val.2.025 = phi i64 [ %return_val.3.1, %B24 ], [ %return_val.2.025.ph, %B24.preheader36 ]
  %.14.024 = phi i64 [ %.129, %B24 ], [ %.14.024.ph, %B24.preheader36 ]
  %sunkaddr = mul i64 %.14.024, 8
  %1 = bitcast { i64, i64, i8, i64 }* %.6.i11 to i8*
  %sunkaddr62 = getelementptr i8, i8* %1, i64 %sunkaddr
  %sunkaddr63 = getelementptr i8, i8* %sunkaddr62, i64 24
  %2 = bitcast i8* %sunkaddr63 to i64*
  %.126 = load i64, i64* %2, align 8
  %.129 = add nuw nsw i64 %.14.024, 1
  %.6.i7.not = icmp sgt i64 %.126, %return_val.2.025
  %return_val.3.1 = select i1 %.6.i7.not, i64 %.126, i64 %return_val.2.025
  %exitcond.not = icmp eq i64 %.41, %.129
  br i1 %exitcond.not, label %B42, label %B24, !llvm.loop !1

B42:                                              ; preds = %B24, %middle.block, %B0.endif.endif.endif
  %return_val.2.0.lcssa = phi i64 [ %.52, %B0.endif.endif.endif ], [ %21, %middle.block ], [ %return_val.3.1, %B24 ]
  store i64 %return_val.2.0.lcssa, i64* %retptr, align 8
  ret i32 0

B0.endif.endif.if:                                ; preds = %entry
  store { i8*, i32, i8* }* @.const.picklebuf.139788661619840, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !4

B0.endif.endif.endif:                             ; preds = %entry
  %.50 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11, i64 0, i32 3
  %.52 = load i64, i64* %.50, align 8
  %.11623.not = icmp eq i64 %.41, 1
  br i1 %.11623.not, label %B42, label %B24.preheader

B24.preheader:                                    ; preds = %B0.endif.endif.endif
  %3 = add i64 %.41, -1
  %min.iters.check = icmp ult i64 %3, 16
  br i1 %min.iters.check, label %B24.preheader36, label %vector.ph

B24.preheader36:                                  ; preds = %middle.block, %B24.preheader
  %return_val.2.025.ph = phi i64 [ %.52, %B24.preheader ], [ %21, %middle.block ]
  %.14.024.ph = phi i64 [ 1, %B24.preheader ], [ %ind.end, %middle.block ]
  br label %B24

vector.ph:                                        ; preds = %B24.preheader
  %n.vec = and i64 %3, -16
  %ind.end = or i64 %n.vec, 1
  %minmax.ident.splatinsert = insertelement <4 x i64> undef, i64 %.52, i32 0
  %minmax.ident.splat = shufflevector <4 x i64> %minmax.ident.splatinsert, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ %minmax.ident.splat, %vector.ph ], [ %16, %vector.body ]
  %vec.phi26 = phi <4 x i64> [ %minmax.ident.splat, %vector.ph ], [ %17, %vector.body ]
  %vec.phi27 = phi <4 x i64> [ %minmax.ident.splat, %vector.ph ], [ %18, %vector.body ]
  %vec.phi28 = phi <4 x i64> [ %minmax.ident.splat, %vector.ph ], [ %19, %vector.body ]
  %sunkaddr64 = mul i64 %index, 8
  %4 = bitcast { i64, i64, i8, i64 }* %.6.i11 to i8*
  %sunkaddr65 = getelementptr i8, i8* %4, i64 %sunkaddr64
  %sunkaddr66 = getelementptr i8, i8* %sunkaddr65, i64 32
  %5 = bitcast i8* %sunkaddr66 to <4 x i64>*
  %wide.load = load <4 x i64>, <4 x i64>* %5, align 8
  %sunkaddr67 = mul i64 %index, 8
  %6 = bitcast { i64, i64, i8, i64 }* %.6.i11 to i8*
  %sunkaddr68 = getelementptr i8, i8* %6, i64 %sunkaddr67
  %sunkaddr69 = getelementptr i8, i8* %sunkaddr68, i64 64
  %7 = bitcast i8* %sunkaddr69 to <4 x i64>*
  %wide.load29 = load <4 x i64>, <4 x i64>* %7, align 8
  %sunkaddr70 = mul i64 %index, 8
  %8 = bitcast { i64, i64, i8, i64 }* %.6.i11 to i8*
  %sunkaddr71 = getelementptr i8, i8* %8, i64 %sunkaddr70
  %sunkaddr72 = getelementptr i8, i8* %sunkaddr71, i64 96
  %9 = bitcast i8* %sunkaddr72 to <4 x i64>*
  %wide.load30 = load <4 x i64>, <4 x i64>* %9, align 8
  %sunkaddr73 = mul i64 %index, 8
  %10 = bitcast { i64, i64, i8, i64 }* %.6.i11 to i8*
  %sunkaddr74 = getelementptr i8, i8* %10, i64 %sunkaddr73
  %sunkaddr75 = getelementptr i8, i8* %sunkaddr74, i64 128
  %11 = bitcast i8* %sunkaddr75 to <4 x i64>*
  %wide.load31 = load <4 x i64>, <4 x i64>* %11, align 8
  %12 = icmp sgt <4 x i64> %wide.load, %vec.phi
  %13 = icmp sgt <4 x i64> %wide.load29, %vec.phi26
  %14 = icmp sgt <4 x i64> %wide.load30, %vec.phi27
  %15 = icmp sgt <4 x i64> %wide.load31, %vec.phi28
  %16 = select <4 x i1> %12, <4 x i64> %wide.load, <4 x i64> %vec.phi
  %17 = select <4 x i1> %13, <4 x i64> %wide.load29, <4 x i64> %vec.phi26
  %18 = select <4 x i1> %14, <4 x i64> %wide.load30, <4 x i64> %vec.phi27
  %19 = select <4 x i1> %15, <4 x i64> %wide.load31, <4 x i64> %vec.phi28
  %index.next = add i64 %index, 16
  %20 = icmp eq i64 %n.vec, %index.next
  br i1 %20, label %middle.block, label %vector.body, !llvm.loop !5

middle.block:                                     ; preds = %vector.body
  %rdx.minmax.cmp = icmp sgt <4 x i64> %16, %17
  %rdx.minmax.select = select <4 x i1> %rdx.minmax.cmp, <4 x i64> %16, <4 x i64> %17
  %rdx.minmax.cmp32 = icmp sgt <4 x i64> %rdx.minmax.select, %18
  %rdx.minmax.select33 = select <4 x i1> %rdx.minmax.cmp32, <4 x i64> %rdx.minmax.select, <4 x i64> %18
  %rdx.minmax.cmp34 = icmp sgt <4 x i64> %rdx.minmax.select33, %19
  %rdx.minmax.select35 = select <4 x i1> %rdx.minmax.cmp34, <4 x i64> %rdx.minmax.select33, <4 x i64> %19
  %rdx.shuf = shufflevector <4 x i64> %rdx.minmax.select35, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp56 = icmp sgt <4 x i64> %rdx.minmax.select35, %rdx.shuf
  %rdx.minmax.select57 = select <4 x i1> %rdx.minmax.cmp56, <4 x i64> %rdx.minmax.select35, <4 x i64> %rdx.shuf
  %rdx.shuf58 = shufflevector <4 x i64> %rdx.minmax.select57, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp59 = icmp sgt <4 x i64> %rdx.minmax.select57, %rdx.shuf58
  %rdx.minmax.select60 = select <4 x i1> %rdx.minmax.cmp59, <4 x i64> %rdx.minmax.select57, <4 x i64> %rdx.shuf58
  %21 = extractelement <4 x i64> %rdx.minmax.select60, i32 0
  %cmp.n = icmp eq i64 %3, %n.vec
  br i1 %cmp.n, label %B42, label %B24.preheader36
}

define i64 @"cfunc._ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e"({ i8*, i8* } %.1) local_unnamed_addr {
entry:
  %.3 = alloca i64, align 8
  store i64 0, i64* %.3, align 8
  %excinfo = alloca { i8*, i32, i8* }*, align 8
  store { i8*, i32, i8* }* null, { i8*, i32, i8* }** %excinfo, align 8
  %extracted.meminfo = extractvalue { i8*, i8* } %.1, 0
  %extracted.parent = extractvalue { i8*, i8* } %.1, 1
  %.7 = call i32 @"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e"(i64* nonnull %.3, { i8*, i32, i8* }** nonnull %excinfo, i8* %extracted.meminfo, i8* %extracted.parent) #3
  %.8 = load { i8*, i32, i8* }*, { i8*, i32, i8* }** %excinfo, align 8
  %.9.not = icmp eq i32 %.7, 0
  %.17 = load i64, i64* %.3, align 8
  %.19 = alloca i32, align 4
  store i32 0, i32* %.19, align 4
  br i1 %.9.not, label %entry.endif, label %entry.if, !prof !6

entry.if:                                         ; preds = %entry
  %.15 = icmp sgt i32 %.7, 0
  call void @numba_gil_ensure(i32* nonnull %.19)
  br i1 %.15, label %entry.if.if, label %entry.if.endif.endif.endif

entry.endif:                                      ; preds = %entry, %.22
  ret i64 %.17

.22:                                              ; preds = %entry.if.if, %entry.if.if.if, %entry.if.endif.endif.endif
  %.44 = call i8* @PyUnicode_FromString(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @".const.<numba.core.cpu.CPUContext object at 0x7f2315764a30>", i64 0, i64 0))
  call void @PyErr_WriteUnraisable(i8* %.44)
  call void @Py_DecRef(i8* %.44)
  call void @numba_gil_release(i32* nonnull %.19)
  br label %entry.endif

entry.if.if:                                      ; preds = %entry.if
  call void @PyErr_Clear()
  %.25 = load { i8*, i32, i8* }, { i8*, i32, i8* }* %.8, align 8
  %.26 = extractvalue { i8*, i32, i8* } %.25, 0
  %.28 = extractvalue { i8*, i32, i8* } %.25, 1
  %.30 = extractvalue { i8*, i32, i8* } %.25, 2
  %.31 = call i8* @numba_unpickle(i8* %.26, i32 %.28, i8* %.30)
  %.32.not = icmp eq i8* %.31, null
  br i1 %.32.not, label %.22, label %entry.if.if.if, !prof !7

entry.if.if.if:                                   ; preds = %entry.if.if
  call void @numba_do_raise(i8* nonnull %.31)
  br label %.22

entry.if.endif.endif.endif:                       ; preds = %entry.if
  call void @PyErr_SetString(i8* nonnull @PyExc_SystemError, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @".const.unknown error when calling native function", i64 0, i64 0))
  br label %.22
}

declare void @numba_gil_ensure(i32*) local_unnamed_addr

declare i8* @PyUnicode_FromString(i8*) local_unnamed_addr

declare void @PyErr_WriteUnraisable(i8*) local_unnamed_addr

declare void @Py_DecRef(i8*) local_unnamed_addr

declare void @numba_gil_release(i32*) local_unnamed_addr

declare void @PyErr_Clear() local_unnamed_addr

declare i8* @numba_unpickle(i8*, i32, i8*) local_unnamed_addr

declare void @numba_do_raise(i8*) local_unnamed_addr

declare void @PyErr_SetString(i8*, i8*) local_unnamed_addr

; Function Attrs: nounwind readnone willreturn
declare i64 @llvm.experimental.vector.reduce.smax.v4i64(<4 x i64>) #1

; Function Attrs: nounwind
declare void @llvm.stackprotector(i8*, i8**) #2

attributes #0 = { nofree norecurse nounwind }
attributes #1 = { nounwind readnone willreturn }
attributes #2 = { nounwind }
attributes #3 = { noinline }

!numba_args_may_always_need_nrt = !{!0}

!0 = !{i32 (i64*, { i8*, i32, i8* }**, i8*, i8*)* @"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e"}
!1 = distinct !{!1, !2, !3}
!2 = !{!"llvm.loop.unroll.runtime.disable"}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = !{i1 true}
!5 = distinct !{!5, !3}
!6 = !{!"branch_weights", i32 99, i32 1}
!7 = !{!"branch_weights", i32 1, i32 99}

================================================================================
================================================================================
-----------------------------OPTIMIZED DUMP calc_x------------------------------
; ModuleID = 'calc_x'
source_filename = "<string>"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@"_ZN08NumbaEnv8__main__10calc_x$241E" = common local_unnamed_addr global i8* null
@.const.picklebuf.139788660015744 = internal constant { i8*, i32, i8* } { i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.const.pickledata.139788660015744, i32 0, i32 0), i32 67, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.const.pickledata.139788660015744.sha1, i32 0, i32 0) }
@.const.pickledata.139788660015744 = internal constant [67 x i8] c"\80\04\958\00\00\00\00\00\00\00\8C\08builtins\94\8C\0BMemoryError\94\93\94\8C\14cannot allocate list\94\85\94N\87\94."
@.const.pickledata.139788660015744.sha1 = internal constant [20 x i8] c"+\98\F4\13f\88\DD\D3\C0)\127\06\86\F1\A0\011(\0C"
@.const.calc_x = internal constant [7 x i8] c"calc_x\00"
@PyExc_RuntimeError = external global i8
@".const.missing Environment: _ZN08NumbaEnv8__main__10calc_x$241E" = internal constant [57 x i8] c"missing Environment: _ZN08NumbaEnv8__main__10calc_x$241E\00"
@PyExc_SystemError = external global i8
@".const.unknown error when calling native function" = internal constant [43 x i8] c"unknown error when calling native function\00"
@".const.<numba.core.cpu.CPUContext object at 0x7f2315a5aa60>" = internal constant [53 x i8] c"<numba.core.cpu.CPUContext object at 0x7f2315a5aa60>\00"
@".const.unknown error when calling native function.1" = internal constant [43 x i8] c"unknown error when calling native function\00"
@"_ZN08NumbaEnv5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e" = common local_unnamed_addr global i8* null
@"_ZN08NumbaEnv5numba7cpython8builtins17$3clambda$3e$2437Exx" = common local_unnamed_addr global i8* null
@.const.picklebuf.139788661619840 = internal constant { i8*, i32, i8* } { i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.const.pickledata.139788661619840, i32 0, i32 0), i32 45, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.const.pickledata.139788661619840.sha1, i32 0, i32 0) }
@.const.pickledata.139788661619840 = internal constant [45 x i8] c"\80\04\95\22\00\00\00\00\00\00\00\8C\08builtins\94\8C\0DStopIteration\94\93\94)N\87\94."
@.const.pickledata.139788661619840.sha1 = internal constant [20 x i8] c"r\FF\91\BA\9B\96%\AA\06<\19\8C\F2\BA\14\B8\A5\F6\80\A0"
@"_ZN08NumbaEnv5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29" = common local_unnamed_addr global i8* null
@"_ZN08NumbaEnv5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e" = common local_unnamed_addr global i8* null
@"_ZN08NumbaEnv5numba7cpython8builtins17$3clambda$3e$2440Exx" = common local_unnamed_addr global i8* null
@.const.picklebuf.139788661619840.8 = internal constant { i8*, i32, i8* } { i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.const.pickledata.139788661619840.9, i32 0, i32 0), i32 45, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.const.pickledata.139788661619840.sha1.10, i32 0, i32 0) }
@.const.pickledata.139788661619840.9 = internal constant [45 x i8] c"\80\04\95\22\00\00\00\00\00\00\00\8C\08builtins\94\8C\0DStopIteration\94\93\94)N\87\94."
@.const.pickledata.139788661619840.sha1.10 = internal constant [20 x i8] c"r\FF\91\BA\9B\96%\AA\06<\19\8C\F2\BA\14\B8\A5\F6\80\A0"

define i32 @"_ZN8__main__10calc_x$241E"(i64* noalias nocapture %retptr, { i8*, i32, i8* }** noalias nocapture %excinfo) local_unnamed_addr {
entry:
  %.65 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 32, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.66 = icmp eq i8* %.65, null
  br i1 %.66, label %B0.endif.endif.if, label %B0.endif.endif.endif, !prof !3

B166:                                             ; preds = %B166.preheader, %B166
  %temp.2.539.2.06996 = phi i64 [ %.488, %B166 ], [ %temp.2.539.2.06996.ph, %B166.preheader ]
  %.413.06995 = phi i64 [ %.462, %B166 ], [ %.413.06995.ph, %B166.preheader ]
  %sunkaddr = mul i64 %.413.06995, 8
  %0 = bitcast { i64, i64, i8, i64 }* %.6.i51626991 to i8*
  %sunkaddr10215 = getelementptr i8, i8* %0, i64 %sunkaddr
  %sunkaddr10216 = getelementptr i8, i8* %sunkaddr10215, i64 24
  %1 = bitcast i8* %sunkaddr10216 to i64*
  %.459 = load i64, i64* %1, align 8
  %.462 = add nuw nsw i64 %.413.06995, 1
  %.488 = mul nsw i64 %.459, %temp.2.539.2.06996
  %exitcond7243.not = icmp eq i64 %.4486993, %.462
  br i1 %exitcond7243.not, label %B168, label %B166, !llvm.loop !4

B168:                                             ; preds = %B166, %middle.block, %B0.endif.endif.endif.endi...endif.endif
  %temp.2.539.2.0.lcssa = phi i64 [ 1, %B0.endif.endif.endif.endi...endif.endif ], [ %121, %middle.block ], [ %.488, %B166 ]
  tail call void @NRT_decref(i8* nonnull %.319)
  %.519 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 32, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.520 = icmp eq i8* %.519, null
  br i1 %.520, label %B168.endif.endif.if, label %B168.endif.endif.endif, !prof !3

B224:                                             ; preds = %B224.preheader, %B224
  %temp.2.557.2.06988 = phi i64 [ %.816, %B224 ], [ %temp.2.557.2.06988.ph, %B224.preheader ]
  %.741.06987 = phi i64 [ %.790, %B224 ], [ %.741.06987.ph, %B224.preheader ]
  %sunkaddr10217 = mul i64 %.741.06987, 8
  %2 = bitcast { i64, i64, i8, i64 }* %.6.i251776983 to i8*
  %sunkaddr10218 = getelementptr i8, i8* %2, i64 %sunkaddr10217
  %sunkaddr10219 = getelementptr i8, i8* %sunkaddr10218, i64 24
  %3 = bitcast i8* %sunkaddr10219 to i64*
  %.787 = load i64, i64* %3, align 8
  %.790 = add nuw nsw i64 %.741.06987, 1
  %.816 = mul nsw i64 %.787, %temp.2.557.2.06988
  %exitcond7241.not = icmp eq i64 %.7766985, %.790
  br i1 %exitcond7241.not, label %B226, label %B224, !llvm.loop !7

B226:                                             ; preds = %B224, %middle.block7610, %B168.endif.endif.endif.endif.endif.endif.endif
  %temp.2.557.2.0.lcssa = phi i64 [ 1, %B168.endif.endif.endif.endif.endif.endif.endif ], [ %158, %middle.block7610 ], [ %.816, %B224 ]
  tail call void @NRT_decref(i8* nonnull %.647)
  %.847 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 32, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.848 = icmp eq i8* %.847, null
  br i1 %.848, label %B226.endif.endif.if, label %B226.endif.endif.endif, !prof !3

B254:                                             ; preds = %B254.preheader, %B254
  %temp.2.575.2.06980 = phi i64 [ %.1272, %B254 ], [ %temp.2.575.2.06980.ph, %B254.preheader ]
  %.1197.06979 = phi i64 [ %.1246, %B254 ], [ %.1197.06979.ph, %B254.preheader ]
  %sunkaddr10220 = mul i64 %.1197.06979, 8
  %4 = bitcast { i64, i64, i8, i64 }* %.6.i23051996975 to i8*
  %sunkaddr10221 = getelementptr i8, i8* %4, i64 %sunkaddr10220
  %sunkaddr10222 = getelementptr i8, i8* %sunkaddr10221, i64 24
  %5 = bitcast i8* %sunkaddr10222 to i64*
  %.1243 = load i64, i64* %5, align 8
  %.1246 = add nuw nsw i64 %.1197.06979, 1
  %.1272 = mul nsw i64 %.1243, %temp.2.575.2.06980
  %exitcond7239.not = icmp eq i64 %.12326977, %.1246
  br i1 %exitcond7239.not, label %B256, label %B254, !llvm.loop !8

B256:                                             ; preds = %B254, %middle.block7633, %B226.endif.endif.endif.en...endif.endif.endif
  %temp.2.575.2.0.lcssa = phi i64 [ 1, %B226.endif.endif.endif.en...endif.endif.endif ], [ %217, %middle.block7633 ], [ %.1272, %B254 ]
  tail call void @NRT_decref(i8* nonnull %.1103)
  %.1303 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 32, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.1304 = icmp eq i8* %.1303, null
  br i1 %.1304, label %B256.endif.endif.if, label %B256.endif.endif.endif, !prof !3

B300:                                             ; preds = %B300.preheader, %B300
  %temp.2.593.2.06972 = phi i64 [ %.1472, %B300 ], [ %temp.2.593.2.06972.ph, %B300.preheader ]
  %.1397.06971 = phi i64 [ %.1446, %B300 ], [ %.1397.06971.ph, %B300.preheader ]
  %sunkaddr10223 = mul i64 %.1397.06971, 8
  %6 = bitcast { i64, i64, i8, i64 }* %.6.i38652076967 to i8*
  %sunkaddr10224 = getelementptr i8, i8* %6, i64 %sunkaddr10223
  %sunkaddr10225 = getelementptr i8, i8* %sunkaddr10224, i64 24
  %7 = bitcast i8* %sunkaddr10225 to i64*
  %.1443 = load i64, i64* %7, align 8
  %.1446 = add nuw nsw i64 %.1397.06971, 1
  %.1472 = mul nsw i64 %.1443, %temp.2.593.2.06972
  %exitcond7237.not = icmp eq i64 %.14326969, %.1446
  br i1 %exitcond7237.not, label %B302, label %B300, !llvm.loop !9

B302:                                             ; preds = %B300, %middle.block7656, %B256.endif.endif.endif
  %temp.2.593.2.0.lcssa = phi i64 [ 1, %B256.endif.endif.endif ], [ %232, %middle.block7656 ], [ %.1472, %B300 ]
  tail call void @NRT_decref(i8* nonnull %.1303)
  %.1503 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 32, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.1504 = icmp eq i8* %.1503, null
  br i1 %.1504, label %B302.endif.endif.if, label %B302.endif.endif.endif, !prof !3

B340:                                             ; preds = %B340.preheader, %B340
  %temp.2.611.2.06964 = phi i64 [ %.2184, %B340 ], [ %temp.2.611.2.06964.ph, %B340.preheader ]
  %.2109.06963 = phi i64 [ %.2158, %B340 ], [ %.2109.06963.ph, %B340.preheader ]
  %sunkaddr10226 = mul i64 %.2109.06963, 8
  %8 = bitcast { i64, i64, i8, i64 }* %.6.i53052436959 to i8*
  %sunkaddr10227 = getelementptr i8, i8* %8, i64 %sunkaddr10226
  %sunkaddr10228 = getelementptr i8, i8* %sunkaddr10227, i64 24
  %9 = bitcast i8* %sunkaddr10228 to i64*
  %.2155 = load i64, i64* %9, align 8
  %.2158 = add nuw nsw i64 %.2109.06963, 1
  %.2184 = mul nsw i64 %.2155, %temp.2.611.2.06964
  %exitcond7235.not = icmp eq i64 %.21446961, %.2158
  br i1 %exitcond7235.not, label %B342, label %B340, !llvm.loop !10

B342:                                             ; preds = %B340, %middle.block7679, %B302.endif.endif.endif.en...endif.2.endif.endif
  %temp.2.611.2.0.lcssa = phi i64 [ 1, %B302.endif.endif.endif.en...endif.2.endif.endif ], [ %335, %middle.block7679 ], [ %.2184, %B340 ]
  tail call void @NRT_decref(i8* nonnull %.2015)
  %.2215 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 32, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.2216 = icmp eq i8* %.2215, null
  br i1 %.2216, label %B342.endif.endif.if, label %B342.endif.endif.endif, !prof !3

B414:                                             ; preds = %B414.preheader, %B414
  %temp.2.467.2.06956 = phi i64 [ %.3322, %B414 ], [ %temp.2.467.2.06956.ph, %B414.preheader ]
  %.3247.06955 = phi i64 [ %.3296, %B414 ], [ %.3247.06955.ph, %B414.preheader ]
  %sunkaddr10229 = mul i64 %.3247.06955, 8
  %10 = bitcast { i64, i64, i8, i64 }* %.6.i60553016951 to i8*
  %sunkaddr10230 = getelementptr i8, i8* %10, i64 %sunkaddr10229
  %sunkaddr10231 = getelementptr i8, i8* %sunkaddr10230, i64 24
  %11 = bitcast i8* %sunkaddr10231 to i64*
  %.3293 = load i64, i64* %11, align 8
  %.3296 = add nuw nsw i64 %.3247.06955, 1
  %.3322 = mul nsw i64 %.3293, %temp.2.467.2.06956
  %exitcond7233.not = icmp eq i64 %.32826953, %.3296
  br i1 %exitcond7233.not, label %B416, label %B414, !llvm.loop !11

B416:                                             ; preds = %B414, %middle.block7702, %B376.endif.endif.endif
  %temp.2.467.2.0.lcssa = phi i64 [ 1, %B376.endif.endif.endif ], [ %504, %middle.block7702 ], [ %.3322, %B414 ]
  tail call void @NRT_decref(i8* nonnull %.3135)
  %.3359 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 48, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.3360 = icmp eq i8* %.3359, null
  br i1 %.3360, label %B416.endif.endif.if, label %B416.endif.endif.endif, !prof !3

B458:                                             ; preds = %B458.preheader, %B458
  %temp.2.485.2.06948 = phi i64 [ %.3556, %B458 ], [ %temp.2.485.2.06948.ph, %B458.preheader ]
  %.3481.06947 = phi i64 [ %.3530, %B458 ], [ %.3481.06947.ph, %B458.preheader ]
  %sunkaddr10232 = mul i64 %.3481.06947, 8
  %12 = bitcast { i64, i64, i8, i64 }* %.6.i68953116943 to i8*
  %sunkaddr10233 = getelementptr i8, i8* %12, i64 %sunkaddr10232
  %sunkaddr10234 = getelementptr i8, i8* %sunkaddr10233, i64 24
  %13 = bitcast i8* %sunkaddr10234 to i64*
  %.3527 = load i64, i64* %13, align 8
  %.3530 = add nuw nsw i64 %.3481.06947, 1
  %.3556 = mul nsw i64 %.3527, %temp.2.485.2.06948
  %exitcond7231.not = icmp eq i64 %.35166945, %.3530
  br i1 %exitcond7231.not, label %B460, label %B458, !llvm.loop !12

B460:                                             ; preds = %B458, %middle.block7725, %B416.endif.endif.endif
  %temp.2.485.2.0.lcssa = phi i64 [ 1, %B416.endif.endif.endif ], [ %519, %middle.block7725 ], [ %.3556, %B458 ]
  tail call void @NRT_decref(i8* nonnull %.3359)
  %.3590 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 48, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.3591 = icmp eq i8* %.3590, null
  br i1 %.3591, label %B460.endif.endif.if, label %B460.endif.endif.endif, !prof !3

B500:                                             ; preds = %B500.preheader, %B500
  %temp.2.503.2.06940 = phi i64 [ %.3787, %B500 ], [ %temp.2.503.2.06940.ph, %B500.preheader ]
  %.3712.06939 = phi i64 [ %.3761, %B500 ], [ %.3712.06939.ph, %B500.preheader ]
  %sunkaddr10235 = mul i64 %.3712.06939, 8
  %14 = bitcast { i64, i64, i8, i64 }* %.6.i77353216935 to i8*
  %sunkaddr10236 = getelementptr i8, i8* %14, i64 %sunkaddr10235
  %sunkaddr10237 = getelementptr i8, i8* %sunkaddr10236, i64 24
  %15 = bitcast i8* %sunkaddr10237 to i64*
  %.3758 = load i64, i64* %15, align 8
  %.3761 = add nuw nsw i64 %.3712.06939, 1
  %.3787 = mul nsw i64 %.3758, %temp.2.503.2.06940
  %exitcond7229.not = icmp eq i64 %.37476937, %.3761
  br i1 %exitcond7229.not, label %B502, label %B500, !llvm.loop !13

B502:                                             ; preds = %B500, %middle.block7748, %B460.endif.endif.endif
  %temp.2.503.2.0.lcssa = phi i64 [ 1, %B460.endif.endif.endif ], [ %534, %middle.block7748 ], [ %.3787, %B500 ]
  tail call void @NRT_decref(i8* nonnull %.3590)
  %.3821 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 48, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.3822 = icmp eq i8* %.3821, null
  br i1 %.3822, label %B502.endif.endif.if, label %B502.endif.endif.endif, !prof !3

B532:                                             ; preds = %B532.preheader, %B532
  %temp.2.521.2.06932 = phi i64 [ %.4018, %B532 ], [ %temp.2.521.2.06932.ph, %B532.preheader ]
  %.3943.06931 = phi i64 [ %.3992, %B532 ], [ %.3943.06931.ph, %B532.preheader ]
  %sunkaddr10238 = mul i64 %.3943.06931, 8
  %16 = bitcast { i64, i64, i8, i64 }* %.6.i88053316927 to i8*
  %sunkaddr10239 = getelementptr i8, i8* %16, i64 %sunkaddr10238
  %sunkaddr10240 = getelementptr i8, i8* %sunkaddr10239, i64 24
  %17 = bitcast i8* %sunkaddr10240 to i64*
  %.3989 = load i64, i64* %17, align 8
  %.3992 = add nuw nsw i64 %.3943.06931, 1
  %.4018 = mul nsw i64 %.3989, %temp.2.521.2.06932
  %exitcond7227.not = icmp eq i64 %.39786929, %.3992
  br i1 %exitcond7227.not, label %B534, label %B532, !llvm.loop !14

B534:                                             ; preds = %B532, %middle.block7771, %B502.endif.endif.endif
  %temp.2.521.2.0.lcssa = phi i64 [ 1, %B502.endif.endif.endif ], [ %549, %middle.block7771 ], [ %.4018, %B532 ]
  tail call void @NRT_decref(i8* nonnull %.3821)
  %.4051 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 48, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.4052 = icmp eq i8* %.4051, null
  br i1 %.4052, label %B534.endif.endif.if, label %B534.endif.endif.endif, !prof !3

B616:                                             ; preds = %B616.preheader, %B616
  %temp.2.449.2.06924 = phi i64 [ %.4415, %B616 ], [ %temp.2.449.2.06924.ph, %B616.preheader ]
  %.4340.06923 = phi i64 [ %.4389, %B616 ], [ %.4340.06923.ph, %B616.preheader ]
  %sunkaddr10241 = mul i64 %.4340.06923, 8
  %18 = bitcast { i64, i64, i8, i64 }* %.6.i97653496919 to i8*
  %sunkaddr10242 = getelementptr i8, i8* %18, i64 %sunkaddr10241
  %sunkaddr10243 = getelementptr i8, i8* %sunkaddr10242, i64 24
  %19 = bitcast i8* %sunkaddr10243 to i64*
  %.4386 = load i64, i64* %19, align 8
  %.4389 = add nuw nsw i64 %.4340.06923, 1
  %.4415 = mul nsw i64 %.4386, %temp.2.449.2.06924
  %exitcond7225.not = icmp eq i64 %.43756921, %.4389
  br i1 %exitcond7225.not, label %B618, label %B616, !llvm.loop !15

B618:                                             ; preds = %B616, %middle.block7794, %B568.endif.endif.endif
  %temp.2.449.2.0.lcssa = phi i64 [ 1, %B568.endif.endif.endif ], [ %581, %middle.block7794 ], [ %.4415, %B616 ]
  tail call void @NRT_decref(i8* nonnull %.4230)
  %.4446 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 32, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.4447 = icmp eq i8* %.4446, null
  br i1 %.4447, label %B618.endif.endif.if, label %B618.endif.endif.endif, !prof !3

B686:                                             ; preds = %B686.preheader, %B686
  %temp.2.395.2.06916 = phi i64 [ %.4770, %B686 ], [ %temp.2.395.2.06916.ph, %B686.preheader ]
  %.4695.06915 = phi i64 [ %.4744, %B686 ], [ %.4695.06915.ph, %B686.preheader ]
  %sunkaddr10244 = mul i64 %.4695.06915, 8
  %20 = bitcast { i64, i64, i8, i64 }* %.6.i110853656911 to i8*
  %sunkaddr10245 = getelementptr i8, i8* %20, i64 %sunkaddr10244
  %sunkaddr10246 = getelementptr i8, i8* %sunkaddr10245, i64 24
  %21 = bitcast i8* %sunkaddr10246 to i64*
  %.4741 = load i64, i64* %21, align 8
  %.4744 = add nuw nsw i64 %.4695.06915, 1
  %.4770 = mul nsw i64 %.4741, %temp.2.395.2.06916
  %exitcond7223.not = icmp eq i64 %.47306913, %.4744
  br i1 %exitcond7223.not, label %B688, label %B686, !llvm.loop !16

B688:                                             ; preds = %B686, %middle.block7817, %B660.endif.endif.endif
  %temp.2.395.2.0.lcssa = phi i64 [ 1, %B660.endif.endif.endif ], [ %613, %middle.block7817 ], [ %.4770, %B686 ]
  tail call void @NRT_decref(i8* nonnull %.4585)
  %.4804 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 56, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.4805 = icmp eq i8* %.4804, null
  br i1 %.4805, label %B688.endif.endif.if, label %B688.endif.endif.endif, !prof !3

B756:                                             ; preds = %B756.preheader, %B756
  %temp.2.413.2.06908 = phi i64 [ %.5015, %B756 ], [ %temp.2.413.2.06908.ph, %B756.preheader ]
  %.4940.06907 = phi i64 [ %.4989, %B756 ], [ %.4940.06907.ph, %B756.preheader ]
  %sunkaddr10247 = mul i64 %.4940.06907, 8
  %22 = bitcast { i64, i64, i8, i64 }* %.6.i119253766903 to i8*
  %sunkaddr10248 = getelementptr i8, i8* %22, i64 %sunkaddr10247
  %sunkaddr10249 = getelementptr i8, i8* %sunkaddr10248, i64 24
  %23 = bitcast i8* %sunkaddr10249 to i64*
  %.4986 = load i64, i64* %23, align 8
  %.4989 = add nuw nsw i64 %.4940.06907, 1
  %.5015 = mul nsw i64 %.4986, %temp.2.413.2.06908
  %exitcond7221.not = icmp eq i64 %.49756905, %.4989
  br i1 %exitcond7221.not, label %B758, label %B756, !llvm.loop !17

B758:                                             ; preds = %B756, %middle.block7840, %B688.endif.endif.endif
  %temp.2.413.2.0.lcssa = phi i64 [ 1, %B688.endif.endif.endif ], [ %628, %middle.block7840 ], [ %.5015, %B756 ]
  tail call void @NRT_decref(i8* nonnull %.4804)
  %.5052 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 32, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.5053 = icmp eq i8* %.5052, null
  br i1 %.5053, label %B758.endif.endif.if, label %B758.endif.endif.endif, !prof !3

B828:                                             ; preds = %B828.preheader, %B828
  %temp.2.431.2.06900 = phi i64 [ %.5221, %B828 ], [ %temp.2.431.2.06900.ph, %B828.preheader ]
  %.5146.06899 = phi i64 [ %.5195, %B828 ], [ %.5146.06899.ph, %B828.preheader ]
  %sunkaddr10250 = mul i64 %.5146.06899, 8
  %24 = bitcast { i64, i64, i8, i64 }* %.6.i127653846895 to i8*
  %sunkaddr10251 = getelementptr i8, i8* %24, i64 %sunkaddr10250
  %sunkaddr10252 = getelementptr i8, i8* %sunkaddr10251, i64 24
  %25 = bitcast i8* %sunkaddr10252 to i64*
  %.5192 = load i64, i64* %25, align 8
  %.5195 = add nuw nsw i64 %.5146.06899, 1
  %.5221 = mul nsw i64 %.5192, %temp.2.431.2.06900
  %exitcond7219.not = icmp eq i64 %.51816897, %.5195
  br i1 %exitcond7219.not, label %B830, label %B828, !llvm.loop !18

B830:                                             ; preds = %B828, %middle.block7863, %B758.endif.endif.endif
  %temp.2.431.2.0.lcssa = phi i64 [ 1, %B758.endif.endif.endif ], [ %643, %middle.block7863 ], [ %.5221, %B828 ]
  tail call void @NRT_decref(i8* nonnull %.5052)
  %.5284 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 40, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.5285 = icmp eq i8* %.5284, null
  br i1 %.5285, label %B862.endif.endif.if, label %B862.endif.endif.endif, !prof !3

B910:                                             ; preds = %B910.preheader, %B910
  %temp.2.377.2.06892 = phi i64 [ %.5471, %B910 ], [ %temp.2.377.2.06892.ph, %B910.preheader ]
  %.5396.06891 = phi i64 [ %.5445, %B910 ], [ %.5396.06891.ph, %B910.preheader ]
  %sunkaddr10253 = mul i64 %.5396.06891, 8
  %26 = bitcast { i64, i64, i8, i64 }* %.6.i136053936887 to i8*
  %sunkaddr10254 = getelementptr i8, i8* %26, i64 %sunkaddr10253
  %sunkaddr10255 = getelementptr i8, i8* %sunkaddr10254, i64 24
  %27 = bitcast i8* %sunkaddr10255 to i64*
  %.5442 = load i64, i64* %27, align 8
  %.5445 = add nuw nsw i64 %.5396.06891, 1
  %.5471 = mul nsw i64 %.5442, %temp.2.377.2.06892
  %exitcond7217.not = icmp eq i64 %.54316889, %.5445
  br i1 %exitcond7217.not, label %B912, label %B910, !llvm.loop !19

B912:                                             ; preds = %B910, %middle.block7886, %B862.endif.endif.endif
  %temp.2.377.2.0.lcssa = phi i64 [ 1, %B862.endif.endif.endif ], [ %658, %middle.block7886 ], [ %.5471, %B910 ]
  tail call void @NRT_decref(i8* nonnull %.5284)
  %.5502 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 48, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.5503 = icmp eq i8* %.5502, null
  br i1 %.5503, label %B912.endif.endif.if, label %B912.endif.endif.endif, !prof !3

B958:                                             ; preds = %B958.preheader, %B958
  %temp.2.359.2.06884 = phi i64 [ %.6014, %B958 ], [ %temp.2.359.2.06884.ph, %B958.preheader ]
  %.5939.06883 = phi i64 [ %.5988, %B958 ], [ %.5939.06883.ph, %B958.preheader ]
  %sunkaddr10256 = mul i64 %.5939.06883, 8
  %28 = bitcast { i64, i64, i8, i64 }* %.6.i149654206879 to i8*
  %sunkaddr10257 = getelementptr i8, i8* %28, i64 %sunkaddr10256
  %sunkaddr10258 = getelementptr i8, i8* %sunkaddr10257, i64 24
  %29 = bitcast i8* %sunkaddr10258 to i64*
  %.5985 = load i64, i64* %29, align 8
  %.5988 = add nuw nsw i64 %.5939.06883, 1
  %.6014 = mul nsw i64 %.5985, %temp.2.359.2.06884
  %exitcond7215.not = icmp eq i64 %.59746881, %.5988
  br i1 %exitcond7215.not, label %B960, label %B958, !llvm.loop !20

B960:                                             ; preds = %B958, %middle.block7909, %B934.endif.endif.endif
  %temp.2.359.2.0.lcssa = phi i64 [ 1, %B934.endif.endif.endif ], [ %707, %middle.block7909 ], [ %.6014, %B958 ]
  tail call void @NRT_decref(i8* nonnull %.5827)
  %.6045 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 56, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.6046 = icmp eq i8* %.6045, null
  br i1 %.6046, label %B960.endif.endif.if, label %B960.endif.endif.endif, !prof !3

B1000:                                            ; preds = %B1000.preheader, %B1000
  %temp.2.341.2.06876 = phi i64 [ %.6414, %B1000 ], [ %temp.2.341.2.06876.ph, %B1000.preheader ]
  %.6339.06875 = phi i64 [ %.6388, %B1000 ], [ %.6339.06875.ph, %B1000.preheader ]
  %sunkaddr10259 = mul i64 %.6339.06875, 8
  %30 = bitcast { i64, i64, i8, i64 }* %.6.i159654396871 to i8*
  %sunkaddr10260 = getelementptr i8, i8* %30, i64 %sunkaddr10259
  %sunkaddr10261 = getelementptr i8, i8* %sunkaddr10260, i64 24
  %31 = bitcast i8* %sunkaddr10261 to i64*
  %.6385 = load i64, i64* %31, align 8
  %.6388 = add nuw nsw i64 %.6339.06875, 1
  %.6414 = mul nsw i64 %.6385, %temp.2.341.2.06876
  %exitcond7213.not = icmp eq i64 %.63746873, %.6388
  br i1 %exitcond7213.not, label %B1012, label %B1000, !llvm.loop !21

B1012:                                            ; preds = %B1000, %middle.block7932, %B985.endif.endif.endif
  %temp.2.341.2.0.lcssa = phi i64 [ 1, %B985.endif.endif.endif ], [ %744, %middle.block7932 ], [ %.6414, %B1000 ]
  tail call void @NRT_decref(i8* nonnull %.6229)
  %.6445 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 48, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.6446 = icmp eq i8* %.6445, null
  br i1 %.6446, label %B1012.endif.endif.if, label %B1012.endif.endif.endif, !prof !3

B1054:                                            ; preds = %B1054.preheader, %B1054
  %temp.2.305.2.06868 = phi i64 [ %.6951, %B1054 ], [ %temp.2.305.2.06868.ph, %B1054.preheader ]
  %.6876.06867 = phi i64 [ %.6925, %B1054 ], [ %.6876.06867.ph, %B1054.preheader ]
  %sunkaddr10262 = mul i64 %.6876.06867, 8
  %32 = bitcast { i64, i64, i8, i64 }* %.6.i171254666863 to i8*
  %sunkaddr10263 = getelementptr i8, i8* %32, i64 %sunkaddr10262
  %sunkaddr10264 = getelementptr i8, i8* %sunkaddr10263, i64 24
  %33 = bitcast i8* %sunkaddr10264 to i64*
  %.6922 = load i64, i64* %33, align 8
  %.6925 = add nuw nsw i64 %.6876.06867, 1
  %.6951 = mul nsw i64 %.6922, %temp.2.305.2.06868
  %exitcond7211.not = icmp eq i64 %.69116865, %.6925
  br i1 %exitcond7211.not, label %B1066, label %B1054, !llvm.loop !22

B1066:                                            ; preds = %B1054, %middle.block7955, %B1039.endif.endif.endif
  %temp.2.305.2.0.lcssa = phi i64 [ 1, %B1039.endif.endif.endif ], [ %793, %middle.block7955 ], [ %.6951, %B1054 ]
  tail call void @NRT_decref(i8* nonnull %.6766)
  %.6985 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 56, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.6986 = icmp eq i8* %.6985, null
  br i1 %.6986, label %B1066.endif.endif.if, label %B1066.endif.endif.endif, !prof !3

B1081:                                            ; preds = %B1081.preheader, %B1081
  %temp.2.323.2.06860 = phi i64 [ %.7339, %B1081 ], [ %temp.2.323.2.06860.ph, %B1081.preheader ]
  %.7264.06859 = phi i64 [ %.7313, %B1081 ], [ %.7264.06859.ph, %B1081.preheader ]
  %sunkaddr10265 = mul i64 %.7264.06859, 8
  %34 = bitcast { i64, i64, i8, i64 }* %.6.i179654856855 to i8*
  %sunkaddr10266 = getelementptr i8, i8* %34, i64 %sunkaddr10265
  %sunkaddr10267 = getelementptr i8, i8* %sunkaddr10266, i64 24
  %35 = bitcast i8* %sunkaddr10267 to i64*
  %.7310 = load i64, i64* %35, align 8
  %.7313 = add nuw nsw i64 %.7264.06859, 1
  %.7339 = mul nsw i64 %.7310, %temp.2.323.2.06860
  %exitcond7209.not = icmp eq i64 %.72996857, %.7313
  br i1 %exitcond7209.not, label %B1093, label %B1081, !llvm.loop !23

B1093:                                            ; preds = %B1081, %middle.block7978, %B1066.endif.endif.endif.endif.endif.endif.endif
  %temp.2.323.2.0.lcssa = phi i64 [ 1, %B1066.endif.endif.endif.endif.endif.endif.endif ], [ %830, %middle.block7978 ], [ %.7339, %B1081 ]
  tail call void @NRT_decref(i8* nonnull %.7156)
  %.7392 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 40, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.7393 = icmp eq i8* %.7392, null
  br i1 %.7393, label %B1120.endif.endif.if, label %B1120.endif.endif.endif, !prof !3

B1135:                                            ; preds = %B1135.preheader, %B1135
  %temp.2.287.2.06852 = phi i64 [ %.7577, %B1135 ], [ %temp.2.287.2.06852.ph, %B1135.preheader ]
  %.7502.06851 = phi i64 [ %.7551, %B1135 ], [ %.7502.06851.ph, %B1135.preheader ]
  %sunkaddr10268 = mul i64 %.7502.06851, 8
  %36 = bitcast { i64, i64, i8, i64 }* %.6.i194054946847 to i8*
  %sunkaddr10269 = getelementptr i8, i8* %36, i64 %sunkaddr10268
  %sunkaddr10270 = getelementptr i8, i8* %sunkaddr10269, i64 24
  %37 = bitcast i8* %sunkaddr10270 to i64*
  %.7548 = load i64, i64* %37, align 8
  %.7551 = add nuw nsw i64 %.7502.06851, 1
  %.7577 = mul nsw i64 %.7548, %temp.2.287.2.06852
  %exitcond7207.not = icmp eq i64 %.75376849, %.7551
  br i1 %exitcond7207.not, label %B1147, label %B1135, !llvm.loop !24

B1147:                                            ; preds = %B1135, %middle.block8001, %B1120.endif.endif.endif
  %temp.2.287.2.0.lcssa = phi i64 [ 1, %B1120.endif.endif.endif ], [ %845, %middle.block8001 ], [ %.7577, %B1135 ]
  tail call void @NRT_decref(i8* nonnull %.7392)
  %.7608 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 48, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.7609 = icmp eq i8* %.7608, null
  br i1 %.7609, label %B1147.endif.endif.if, label %B1147.endif.endif.endif, !prof !3

B1189:                                            ; preds = %B1189.preheader, %B1189
  %temp.2.269.2.06844 = phi i64 [ %.8120, %B1189 ], [ %temp.2.269.2.06844.ph, %B1189.preheader ]
  %.8045.06843 = phi i64 [ %.8094, %B1189 ], [ %.8045.06843.ph, %B1189.preheader ]
  %sunkaddr10271 = mul i64 %.8045.06843, 8
  %38 = bitcast { i64, i64, i8, i64 }* %.6.i206455216839 to i8*
  %sunkaddr10272 = getelementptr i8, i8* %38, i64 %sunkaddr10271
  %sunkaddr10273 = getelementptr i8, i8* %sunkaddr10272, i64 24
  %39 = bitcast i8* %sunkaddr10273 to i64*
  %.8091 = load i64, i64* %39, align 8
  %.8094 = add nuw nsw i64 %.8045.06843, 1
  %.8120 = mul nsw i64 %.8091, %temp.2.269.2.06844
  %exitcond7205.not = icmp eq i64 %.80806841, %.8094
  br i1 %exitcond7205.not, label %B1201, label %B1189, !llvm.loop !25

B1201:                                            ; preds = %B1189, %middle.block8024, %B1174.endif.endif.endif
  %temp.2.269.2.0.lcssa = phi i64 [ 1, %B1174.endif.endif.endif ], [ %894, %middle.block8024 ], [ %.8120, %B1189 ]
  tail call void @NRT_decref(i8* nonnull %.7933)
  %.8151 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 40, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.8152 = icmp eq i8* %.8151, null
  br i1 %.8152, label %B1201.endif.endif.if, label %B1201.endif.endif.endif, !prof !3

B1243:                                            ; preds = %B1243.preheader, %B1243
  %temp.2.251.2.06836 = phi i64 [ %.8489, %B1243 ], [ %temp.2.251.2.06836.ph, %B1243.preheader ]
  %.8414.06835 = phi i64 [ %.8463, %B1243 ], [ %.8414.06835.ph, %B1243.preheader ]
  %sunkaddr10274 = mul i64 %.8414.06835, 8
  %40 = bitcast { i64, i64, i8, i64 }* %.6.i218455386831 to i8*
  %sunkaddr10275 = getelementptr i8, i8* %40, i64 %sunkaddr10274
  %sunkaddr10276 = getelementptr i8, i8* %sunkaddr10275, i64 24
  %41 = bitcast i8* %sunkaddr10276 to i64*
  %.8460 = load i64, i64* %41, align 8
  %.8463 = add nuw nsw i64 %.8414.06835, 1
  %.8489 = mul nsw i64 %.8460, %temp.2.251.2.06836
  %exitcond7203.not = icmp eq i64 %.84496833, %.8463
  br i1 %exitcond7203.not, label %B1255, label %B1243, !llvm.loop !26

B1255:                                            ; preds = %B1243, %middle.block8047, %B1228.endif.endif.endif
  %temp.2.251.2.0.lcssa = phi i64 [ 1, %B1228.endif.endif.endif ], [ %931, %middle.block8047 ], [ %.8489, %B1243 ]
  tail call void @NRT_decref(i8* nonnull %.8304)
  %.8520 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 48, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.8521 = icmp eq i8* %.8520, null
  br i1 %.8521, label %B1255.endif.endif.if, label %B1255.endif.endif.endif, !prof !3

B1297:                                            ; preds = %B1297.preheader, %B1297
  %temp.2.215.2.06828 = phi i64 [ %.8872, %B1297 ], [ %temp.2.215.2.06828.ph, %B1297.preheader ]
  %.8797.06827 = phi i64 [ %.8846, %B1297 ], [ %.8797.06827.ph, %B1297.preheader ]
  %sunkaddr10277 = mul i64 %.8797.06827, 8
  %42 = bitcast { i64, i64, i8, i64 }* %.6.i226855566823 to i8*
  %sunkaddr10278 = getelementptr i8, i8* %42, i64 %sunkaddr10277
  %sunkaddr10279 = getelementptr i8, i8* %sunkaddr10278, i64 24
  %43 = bitcast i8* %sunkaddr10279 to i64*
  %.8843 = load i64, i64* %43, align 8
  %.8846 = add nuw nsw i64 %.8797.06827, 1
  %.8872 = mul nsw i64 %.8843, %temp.2.215.2.06828
  %exitcond7201.not = icmp eq i64 %.88326825, %.8846
  br i1 %exitcond7201.not, label %B1309, label %B1297, !llvm.loop !27

B1309:                                            ; preds = %B1297, %middle.block8070, %B1282.endif.endif.endif
  %temp.2.215.2.0.lcssa = phi i64 [ 1, %B1282.endif.endif.endif ], [ %968, %middle.block8070 ], [ %.8872, %B1297 ]
  tail call void @NRT_decref(i8* nonnull %.8687)
  %.8906 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 64, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.8907 = icmp eq i8* %.8906, null
  br i1 %.8907, label %B1309.endif.endif.if, label %B1309.endif.endif.endif, !prof !3

B1324:                                            ; preds = %B1324.preheader, %B1324
  %temp.2.233.2.06820 = phi i64 [ %.9131, %B1324 ], [ %temp.2.233.2.06820.ph, %B1324.preheader ]
  %.9056.06819 = phi i64 [ %.9105, %B1324 ], [ %.9056.06819.ph, %B1324.preheader ]
  %sunkaddr10280 = mul i64 %.9056.06819, 8
  %44 = bitcast { i64, i64, i8, i64 }* %.6.i240055686815 to i8*
  %sunkaddr10281 = getelementptr i8, i8* %44, i64 %sunkaddr10280
  %sunkaddr10282 = getelementptr i8, i8* %sunkaddr10281, i64 24
  %45 = bitcast i8* %sunkaddr10282 to i64*
  %.9102 = load i64, i64* %45, align 8
  %.9105 = add nuw nsw i64 %.9056.06819, 1
  %.9131 = mul nsw i64 %.9102, %temp.2.233.2.06820
  %exitcond7199.not = icmp eq i64 %.90916817, %.9105
  br i1 %exitcond7199.not, label %B1336, label %B1324, !llvm.loop !28

B1336:                                            ; preds = %B1324, %middle.block8093, %B1309.endif.endif.endif
  %temp.2.233.2.0.lcssa = phi i64 [ 1, %B1309.endif.endif.endif ], [ %983, %middle.block8093 ], [ %.9131, %B1324 ]
  tail call void @NRT_decref(i8* nonnull %.8906)
  %.9162 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 48, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.9163 = icmp eq i8* %.9162, null
  br i1 %.9163, label %B1336.endif.endif.if, label %B1336.endif.endif.endif, !prof !3

B1378:                                            ; preds = %B1378.preheader, %B1378
  %temp.2.197.2.06812 = phi i64 [ %.9674, %B1378 ], [ %temp.2.197.2.06812.ph, %B1378.preheader ]
  %.9599.06811 = phi i64 [ %.9648, %B1378 ], [ %.9599.06811.ph, %B1378.preheader ]
  %sunkaddr10283 = mul i64 %.9599.06811, 8
  %46 = bitcast { i64, i64, i8, i64 }* %.6.i252855956807 to i8*
  %sunkaddr10284 = getelementptr i8, i8* %46, i64 %sunkaddr10283
  %sunkaddr10285 = getelementptr i8, i8* %sunkaddr10284, i64 24
  %47 = bitcast i8* %sunkaddr10285 to i64*
  %.9645 = load i64, i64* %47, align 8
  %.9648 = add nuw nsw i64 %.9599.06811, 1
  %.9674 = mul nsw i64 %.9645, %temp.2.197.2.06812
  %exitcond7197.not = icmp eq i64 %.96346809, %.9648
  br i1 %exitcond7197.not, label %B1390, label %B1378, !llvm.loop !29

B1390:                                            ; preds = %B1378, %middle.block8116, %B1363.endif.endif.endif
  %temp.2.197.2.0.lcssa = phi i64 [ 1, %B1363.endif.endif.endif ], [ %1032, %middle.block8116 ], [ %.9674, %B1378 ]
  tail call void @NRT_decref(i8* nonnull %.9489)
  %.9705 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 32, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.9706 = icmp eq i8* %.9705, null
  br i1 %.9706, label %B1390.endif.endif.if, label %B1390.endif.endif.endif, !prof !3

B1432:                                            ; preds = %B1432.preheader, %B1432
  %temp.2.179.2.06804 = phi i64 [ %.10186, %B1432 ], [ %temp.2.179.2.06804.ph, %B1432.preheader ]
  %.10111.06803 = phi i64 [ %.10160, %B1432 ], [ %.10111.06803.ph, %B1432.preheader ]
  %sunkaddr10286 = mul i64 %.10111.06803, 8
  %48 = bitcast { i64, i64, i8, i64 }* %.6.i261256206799 to i8*
  %sunkaddr10287 = getelementptr i8, i8* %48, i64 %sunkaddr10286
  %sunkaddr10288 = getelementptr i8, i8* %sunkaddr10287, i64 24
  %49 = bitcast i8* %sunkaddr10288 to i64*
  %.10157 = load i64, i64* %49, align 8
  %.10160 = add nuw nsw i64 %.10111.06803, 1
  %.10186 = mul nsw i64 %.10157, %temp.2.179.2.06804
  %exitcond7195.not = icmp eq i64 %.101466801, %.10160
  br i1 %exitcond7195.not, label %B1444, label %B1432, !llvm.loop !30

B1444:                                            ; preds = %B1432, %middle.block8139, %B1417.endif.endif.endif
  %temp.2.179.2.0.lcssa = phi i64 [ 1, %B1417.endif.endif.endif ], [ %1091, %middle.block8139 ], [ %.10186, %B1432 ]
  tail call void @NRT_decref(i8* nonnull %.10001)
  %.10234 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 40, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.10235 = icmp eq i8* %.10234, null
  br i1 %.10235, label %B1471.endif.endif.if, label %B1471.endif.endif.endif, !prof !3

B1486:                                            ; preds = %B1486.preheader, %B1486
  %temp.2.143.2.06796 = phi i64 [ %.10421, %B1486 ], [ %temp.2.143.2.06796.ph, %B1486.preheader ]
  %.10346.06795 = phi i64 [ %.10395, %B1486 ], [ %.10346.06795.ph, %B1486.preheader ]
  %sunkaddr10289 = mul i64 %.10346.06795, 8
  %50 = bitcast { i64, i64, i8, i64 }* %.6.i272056296791 to i8*
  %sunkaddr10290 = getelementptr i8, i8* %50, i64 %sunkaddr10289
  %sunkaddr10291 = getelementptr i8, i8* %sunkaddr10290, i64 24
  %51 = bitcast i8* %sunkaddr10291 to i64*
  %.10392 = load i64, i64* %51, align 8
  %.10395 = add nuw nsw i64 %.10346.06795, 1
  %.10421 = mul nsw i64 %.10392, %temp.2.143.2.06796
  %exitcond7193.not = icmp eq i64 %.103816793, %.10395
  br i1 %exitcond7193.not, label %B1498, label %B1486, !llvm.loop !31

B1498:                                            ; preds = %B1486, %middle.block8162, %B1471.endif.endif.endif
  %temp.2.143.2.0.lcssa = phi i64 [ 1, %B1471.endif.endif.endif ], [ %1106, %middle.block8162 ], [ %.10421, %B1486 ]
  tail call void @NRT_decref(i8* nonnull %.10234)
  %.10455 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 56, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.10456 = icmp eq i8* %.10455, null
  br i1 %.10456, label %B1498.endif.endif.if, label %B1498.endif.endif.endif, !prof !3

B1513:                                            ; preds = %B1513.preheader, %B1513
  %temp.2.161.2.06788 = phi i64 [ %.11285, %B1513 ], [ %temp.2.161.2.06788.ph, %B1513.preheader ]
  %.11210.06787 = phi i64 [ %.11259, %B1513 ], [ %.11210.06787.ph, %B1513.preheader ]
  %sunkaddr10292 = mul i64 %.11210.06787, 8
  %52 = bitcast { i64, i64, i8, i64 }* %.6.i284856766783 to i8*
  %sunkaddr10293 = getelementptr i8, i8* %52, i64 %sunkaddr10292
  %sunkaddr10294 = getelementptr i8, i8* %sunkaddr10293, i64 24
  %53 = bitcast i8* %sunkaddr10294 to i64*
  %.11256 = load i64, i64* %53, align 8
  %.11259 = add nuw nsw i64 %.11210.06787, 1
  %.11285 = mul nsw i64 %.11256, %temp.2.161.2.06788
  %exitcond7191.not = icmp eq i64 %.112456785, %.11259
  br i1 %exitcond7191.not, label %B1525, label %B1513, !llvm.loop !32

B1525:                                            ; preds = %B1513, %middle.block8185, %B1498.endif.endif.endif.e...endif.2.endif.endif
  %temp.2.161.2.0.lcssa = phi i64 [ 1, %B1498.endif.endif.endif.e...endif.2.endif.endif ], [ %1189, %middle.block8185 ], [ %.11285, %B1513 ]
  tail call void @NRT_decref(i8* nonnull %.11088)
  %.11341 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 40, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.11342 = icmp eq i8* %.11341, null
  br i1 %.11342, label %B1552.endif.endif.if, label %B1552.endif.endif.endif, !prof !3

B1567:                                            ; preds = %B1567.preheader, %B1567
  %temp.2.125.2.06780 = phi i64 [ %.11526, %B1567 ], [ %temp.2.125.2.06780.ph, %B1567.preheader ]
  %.11451.06779 = phi i64 [ %.11500, %B1567 ], [ %.11451.06779.ph, %B1567.preheader ]
  %sunkaddr10295 = mul i64 %.11451.06779, 8
  %54 = bitcast { i64, i64, i8, i64 }* %.6.i293256856775 to i8*
  %sunkaddr10296 = getelementptr i8, i8* %54, i64 %sunkaddr10295
  %sunkaddr10297 = getelementptr i8, i8* %sunkaddr10296, i64 24
  %55 = bitcast i8* %sunkaddr10297 to i64*
  %.11497 = load i64, i64* %55, align 8
  %.11500 = add nuw nsw i64 %.11451.06779, 1
  %.11526 = mul nsw i64 %.11497, %temp.2.125.2.06780
  %exitcond7189.not = icmp eq i64 %.114866777, %.11500
  br i1 %exitcond7189.not, label %B1579, label %B1567, !llvm.loop !33

B1579:                                            ; preds = %B1567, %middle.block8208, %B1552.endif.endif.endif
  %temp.2.125.2.0.lcssa = phi i64 [ 1, %B1552.endif.endif.endif ], [ %1204, %middle.block8208 ], [ %.11526, %B1567 ]
  tail call void @NRT_decref(i8* nonnull %.11341)
  %.11557 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 40, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.11558 = icmp eq i8* %.11557, null
  br i1 %.11558, label %B1579.endif.endif.if, label %B1579.endif.endif.endif, !prof !3

B1621:                                            ; preds = %B1621.preheader, %B1621
  %temp.2.107.2.06772 = phi i64 [ %.12540, %B1621 ], [ %temp.2.107.2.06772.ph, %B1621.preheader ]
  %.12465.06771 = phi i64 [ %.12514, %B1621 ], [ %.12465.06771.ph, %B1621.preheader ]
  %sunkaddr10298 = mul i64 %.12465.06771, 8
  %56 = bitcast { i64, i64, i8, i64 }* %.6.i311657396767 to i8*
  %sunkaddr10299 = getelementptr i8, i8* %56, i64 %sunkaddr10298
  %sunkaddr10300 = getelementptr i8, i8* %sunkaddr10299, i64 24
  %57 = bitcast i8* %sunkaddr10300 to i64*
  %.12511 = load i64, i64* %57, align 8
  %.12514 = add nuw nsw i64 %.12465.06771, 1
  %.12540 = mul nsw i64 %.12511, %temp.2.107.2.06772
  %exitcond7187.not = icmp eq i64 %.125006769, %.12514
  br i1 %exitcond7187.not, label %B1633, label %B1621, !llvm.loop !34

B1633:                                            ; preds = %B1621, %middle.block8231, %B1606.endif.endif.endif
  %temp.2.107.2.0.lcssa = phi i64 [ 1, %B1606.endif.endif.endif ], [ %1314, %middle.block8231 ], [ %.12540, %B1621 ]
  tail call void @NRT_decref(i8* nonnull %.12353)
  %.12571 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 64, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.12572 = icmp eq i8* %.12571, null
  br i1 %.12572, label %B1633.endif.endif.if, label %B1633.endif.endif.endif, !prof !3

B1675:                                            ; preds = %B1675.preheader, %B1675
  %temp.2.71.2.06764 = phi i64 [ %.12951, %B1675 ], [ %temp.2.71.2.06764.ph, %B1675.preheader ]
  %.12876.06763 = phi i64 [ %.12925, %B1675 ], [ %.12876.06763.ph, %B1675.preheader ]
  %sunkaddr10301 = mul i64 %.12876.06763, 8
  %58 = bitcast { i64, i64, i8, i64 }* %.6.i321657596759 to i8*
  %sunkaddr10302 = getelementptr i8, i8* %58, i64 %sunkaddr10301
  %sunkaddr10303 = getelementptr i8, i8* %sunkaddr10302, i64 24
  %59 = bitcast i8* %sunkaddr10303 to i64*
  %.12922 = load i64, i64* %59, align 8
  %.12925 = add nuw nsw i64 %.12876.06763, 1
  %.12951 = mul nsw i64 %.12922, %temp.2.71.2.06764
  %exitcond7185.not = icmp eq i64 %.129116761, %.12925
  br i1 %exitcond7185.not, label %B1687, label %B1675, !llvm.loop !35

B1687:                                            ; preds = %B1675, %middle.block8254, %B1660.endif.endif.endif
  %temp.2.71.2.0.lcssa = phi i64 [ 1, %B1660.endif.endif.endif ], [ %1351, %middle.block8254 ], [ %.12951, %B1675 ]
  tail call void @NRT_decref(i8* nonnull %.12766)
  %.12985 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 48, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.12986 = icmp eq i8* %.12985, null
  br i1 %.12986, label %B1687.endif.endif.if, label %B1687.endif.endif.endif, !prof !3

B1702:                                            ; preds = %B1702.preheader, %B1702
  %temp.2.89.2.06756 = phi i64 [ %.13182, %B1702 ], [ %temp.2.89.2.06756.ph, %B1702.preheader ]
  %.13107.06755 = phi i64 [ %.13156, %B1702 ], [ %.13107.06755.ph, %B1702.preheader ]
  %sunkaddr10304 = mul i64 %.13107.06755, 8
  %60 = bitcast { i64, i64, i8, i64 }* %.6.i340857696751 to i8*
  %sunkaddr10305 = getelementptr i8, i8* %60, i64 %sunkaddr10304
  %sunkaddr10306 = getelementptr i8, i8* %sunkaddr10305, i64 24
  %61 = bitcast i8* %sunkaddr10306 to i64*
  %.13153 = load i64, i64* %61, align 8
  %.13156 = add nuw nsw i64 %.13107.06755, 1
  %.13182 = mul nsw i64 %.13153, %temp.2.89.2.06756
  %exitcond7183.not = icmp eq i64 %.131426753, %.13156
  br i1 %exitcond7183.not, label %B1714, label %B1702, !llvm.loop !36

B1714:                                            ; preds = %B1702, %middle.block8277, %B1687.endif.endif.endif
  %temp.2.89.2.0.lcssa = phi i64 [ 1, %B1687.endif.endif.endif ], [ %1366, %middle.block8277 ], [ %.13182, %B1702 ]
  tail call void @NRT_decref(i8* nonnull %.12985)
  %.13213 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 64, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.13214 = icmp eq i8* %.13213, null
  br i1 %.13214, label %B1714.endif.endif.if, label %B1714.endif.endif.endif, !prof !3

B1756:                                            ; preds = %B1756.preheader, %B1756
  %temp.2.53.2.06748 = phi i64 [ %.13611, %B1756 ], [ %temp.2.53.2.06748.ph, %B1756.preheader ]
  %.13536.06747 = phi i64 [ %.13585, %B1756 ], [ %.13536.06747.ph, %B1756.preheader ]
  %sunkaddr10307 = mul i64 %.13536.06747, 8
  %62 = bitcast { i64, i64, i8, i64 }* %.6.i350057896743 to i8*
  %sunkaddr10308 = getelementptr i8, i8* %62, i64 %sunkaddr10307
  %sunkaddr10309 = getelementptr i8, i8* %sunkaddr10308, i64 24
  %63 = bitcast i8* %sunkaddr10309 to i64*
  %.13582 = load i64, i64* %63, align 8
  %.13585 = add nuw nsw i64 %.13536.06747, 1
  %.13611 = mul nsw i64 %.13582, %temp.2.53.2.06748
  %exitcond7181.not = icmp eq i64 %.135716745, %.13585
  br i1 %exitcond7181.not, label %B1768, label %B1756, !llvm.loop !37

B1768:                                            ; preds = %B1756, %middle.block8300, %B1741.endif.endif.endif
  %temp.2.53.2.0.lcssa = phi i64 [ 1, %B1741.endif.endif.endif ], [ %1398, %middle.block8300 ], [ %.13611, %B1756 ]
  tail call void @NRT_decref(i8* nonnull %.13424)
  %.13652 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 40, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.13653 = icmp eq i8* %.13652, null
  br i1 %.13653, label %B1795.endif.endif.if, label %B1795.endif.endif.endif, !prof !3

B1810:                                            ; preds = %B1810.preheader, %B1810
  %temp.2.35.2.06740 = phi i64 [ %.13837, %B1810 ], [ %temp.2.35.2.06740.ph, %B1810.preheader ]
  %.13762.06739 = phi i64 [ %.13811, %B1810 ], [ %.13762.06739.ph, %B1810.preheader ]
  %sunkaddr10310 = mul i64 %.13762.06739, 8
  %64 = bitcast { i64, i64, i8, i64 }* %.6.i359257986735 to i8*
  %sunkaddr10311 = getelementptr i8, i8* %64, i64 %sunkaddr10310
  %sunkaddr10312 = getelementptr i8, i8* %sunkaddr10311, i64 24
  %65 = bitcast i8* %sunkaddr10312 to i64*
  %.13808 = load i64, i64* %65, align 8
  %.13811 = add nuw nsw i64 %.13762.06739, 1
  %.13837 = mul nsw i64 %.13808, %temp.2.35.2.06740
  %exitcond7179.not = icmp eq i64 %.137976737, %.13811
  br i1 %exitcond7179.not, label %B1822, label %B1810, !llvm.loop !38

B1822:                                            ; preds = %B1810, %middle.block8323, %B1795.endif.endif.endif
  %temp.2.35.2.0.lcssa = phi i64 [ 1, %B1795.endif.endif.endif ], [ %1413, %middle.block8323 ], [ %.13837, %B1810 ]
  tail call void @NRT_decref(i8* nonnull %.13652)
  %.13881 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 40, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.13882 = icmp eq i8* %.13881, null
  br i1 %.13882, label %B1849.endif.endif.if, label %B1849.endif.endif.endif, !prof !3

B1864:                                            ; preds = %B1864.preheader, %B1864
  %temp.2.17.2.06733 = phi i64 [ %.14066, %B1864 ], [ %temp.2.17.2.06733.ph, %B1864.preheader ]
  %.13991.06732 = phi i64 [ %.14040, %B1864 ], [ %.13991.06732.ph, %B1864.preheader ]
  %sunkaddr10313 = mul i64 %.13991.06732, 8
  %66 = bitcast { i64, i64, i8, i64 }* %.6.i368458076728 to i8*
  %sunkaddr10314 = getelementptr i8, i8* %66, i64 %sunkaddr10313
  %sunkaddr10315 = getelementptr i8, i8* %sunkaddr10314, i64 24
  %67 = bitcast i8* %sunkaddr10315 to i64*
  %.14037 = load i64, i64* %67, align 8
  %.14040 = add nuw nsw i64 %.13991.06732, 1
  %.14066 = mul nsw i64 %.14037, %temp.2.17.2.06733
  %exitcond.not = icmp eq i64 %.140266730, %.14040
  br i1 %exitcond.not, label %B1876, label %B1864, !llvm.loop !39

B1876:                                            ; preds = %B1864, %middle.block8346, %B1849.endif.endif.endif
  %temp.2.17.2.0.lcssa = phi i64 [ 1, %B1849.endif.endif.endif ], [ %1428, %middle.block8346 ], [ %.14066, %B1864 ]
  tail call void @NRT_decref(i8* nonnull %.13881)
  %.14097 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 48, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.14098 = icmp eq i8* %.14097, null
  br i1 %.14098, label %B1876.endif.endif.if, label %B1876.endif.endif.endif, !prof !3

B0.endif.endif.if:                                ; preds = %entry
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B0.endif.endif.endif:                             ; preds = %entry
  %.5.i3775 = getelementptr i8, i8* %.65, i64 24
  %68 = bitcast i8* %.5.i3775 to { i64, i64, i8, i64 }**
  %.6.i37765141 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %68, align 8
  %.78 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i37765141, i64 0, i32 1
  store i64 1, i64* %.78, align 8
  %.6.i38685142 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %68, align 8
  %.8410316 = bitcast { i64, i64, i8, i64 }* %.6.i38685142 to i64*
  store i64 0, i64* %.8410316, align 8
  %.6.i39605143 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %68, align 8
  %.90 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i39605143, i64 0, i32 2
  store i8 0, i8* %.90, align 1
  %.6.i41645144 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %68, align 8
  %.103 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i41645144, i64 0, i32 3
  store i64 0, i64* %.103, align 1
  %.6.i43485146 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %68, align 8
  %.13210317 = bitcast { i64, i64, i8, i64 }* %.6.i43485146 to i64*
  store i64 1, i64* %.13210317, align 8
  %.6.i45725147 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %68, align 8
  %.145 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i45725147, i64 0, i32 3
  store i64 1736671104, i64* %.145, align 8
  %.6.i11.i4684 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %68, align 8, !noalias !41
  %.4061.i468510318 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4684 to i64*
  %.41.i4686 = load i64, i64* %.4061.i468510318, align 8, !noalias !41
  %.42.i4687 = icmp sgt i64 %.41.i4686, 0
  br i1 %.42.i4687, label %B0.endif.endif.endif.i4705, label %B0.endif.endif.endif.if.if, !prof !45

B24.i4698:                                        ; preds = %B24.i4698.preheader, %B24.i4698
  %return_val.2.025.i4688 = phi i64 [ %return_val.3.1.i4696, %B24.i4698 ], [ %return_val.2.025.i4688.ph, %B24.i4698.preheader ]
  %.14.024.i4689 = phi i64 [ %.129.i4694, %B24.i4698 ], [ %.14.024.i4689.ph, %B24.i4698.preheader ]
  %sunkaddr10319 = mul i64 %.14.024.i4689, 8
  %69 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4684 to i8*
  %sunkaddr10320 = getelementptr i8, i8* %69, i64 %sunkaddr10319
  %sunkaddr10321 = getelementptr i8, i8* %sunkaddr10320, i64 24
  %70 = bitcast i8* %sunkaddr10321 to i64*
  %.126.i4693 = load i64, i64* %70, align 8, !noalias !41
  %.129.i4694 = add nuw nsw i64 %.14.024.i4689, 1
  %.6.i7.not.i4695 = icmp slt i64 %.126.i4693, %return_val.2.025.i4688
  %return_val.3.1.i4696 = select i1 %.6.i7.not.i4695, i64 %.126.i4693, i64 %return_val.2.025.i4688
  %exitcond.not.i4697 = icmp eq i64 %.41.i4686, %.129.i4694
  br i1 %exitcond.not.i4697, label %B0.endif.endif.endif.endif, label %B24.i4698, !llvm.loop !46

B0.endif.endif.endif.i4705:                       ; preds = %B0.endif.endif.endif
  %.50.i4702 = getelementptr { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11.i4684, i64 0, i32 3
  %.52.i4703 = load i64, i64* %.50.i4702, align 8, !noalias !41
  %.11623.not.i4704 = icmp eq i64 %.41.i4686, 1
  br i1 %.11623.not.i4704, label %B0.endif.endif.endif.endif, label %B24.preheader.i4707

B24.preheader.i4707:                              ; preds = %B0.endif.endif.endif.i4705
  %71 = add nsw i64 %.41.i4686, -1
  %min.iters.check.i4706 = icmp ult i64 %71, 16
  br i1 %min.iters.check.i4706, label %B24.i4698.preheader, label %vector.ph.i4715

B24.i4698.preheader:                              ; preds = %middle.block.i4752, %B24.preheader.i4707
  %return_val.2.025.i4688.ph = phi i64 [ %89, %middle.block.i4752 ], [ %.52.i4703, %B24.preheader.i4707 ]
  %.14.024.i4689.ph = phi i64 [ %ind.end.i4712, %middle.block.i4752 ], [ 1, %B24.preheader.i4707 ]
  br label %B24.i4698

vector.ph.i4715:                                  ; preds = %B24.preheader.i4707
  %n.vec.i4711 = and i64 %71, -16
  %minmax.ident.splatinsert.i4713 = insertelement <4 x i64> undef, i64 %.52.i4703, i32 0
  %minmax.ident.splat.i4714 = shufflevector <4 x i64> %minmax.ident.splatinsert.i4713, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %vector.body.i4738

vector.body.i4738:                                ; preds = %vector.body.i4738, %vector.ph.i4715
  %index.i4716 = phi i64 [ 0, %vector.ph.i4715 ], [ %index.next.i4737, %vector.body.i4738 ]
  %vec.phi.i4717 = phi <4 x i64> [ %minmax.ident.splat.i4714, %vector.ph.i4715 ], [ %84, %vector.body.i4738 ]
  %vec.phi26.i4718 = phi <4 x i64> [ %minmax.ident.splat.i4714, %vector.ph.i4715 ], [ %85, %vector.body.i4738 ]
  %vec.phi27.i4719 = phi <4 x i64> [ %minmax.ident.splat.i4714, %vector.ph.i4715 ], [ %86, %vector.body.i4738 ]
  %vec.phi28.i4720 = phi <4 x i64> [ %minmax.ident.splat.i4714, %vector.ph.i4715 ], [ %87, %vector.body.i4738 ]
  %sunkaddr10322 = mul i64 %index.i4716, 8
  %72 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4684 to i8*
  %sunkaddr10323 = getelementptr i8, i8* %72, i64 %sunkaddr10322
  %sunkaddr10324 = getelementptr i8, i8* %sunkaddr10323, i64 32
  %73 = bitcast i8* %sunkaddr10324 to <4 x i64>*
  %wide.load.i4724 = load <4 x i64>, <4 x i64>* %73, align 8, !noalias !41
  %sunkaddr10325 = mul i64 %index.i4716, 8
  %74 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4684 to i8*
  %sunkaddr10326 = getelementptr i8, i8* %74, i64 %sunkaddr10325
  %sunkaddr10327 = getelementptr i8, i8* %sunkaddr10326, i64 64
  %75 = bitcast i8* %sunkaddr10327 to <4 x i64>*
  %wide.load29.i4728 = load <4 x i64>, <4 x i64>* %75, align 8, !noalias !41
  %sunkaddr10328 = mul i64 %index.i4716, 8
  %76 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4684 to i8*
  %sunkaddr10329 = getelementptr i8, i8* %76, i64 %sunkaddr10328
  %sunkaddr10330 = getelementptr i8, i8* %sunkaddr10329, i64 96
  %77 = bitcast i8* %sunkaddr10330 to <4 x i64>*
  %wide.load30.i4732 = load <4 x i64>, <4 x i64>* %77, align 8, !noalias !41
  %sunkaddr10331 = mul i64 %index.i4716, 8
  %78 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4684 to i8*
  %sunkaddr10332 = getelementptr i8, i8* %78, i64 %sunkaddr10331
  %sunkaddr10333 = getelementptr i8, i8* %sunkaddr10332, i64 128
  %79 = bitcast i8* %sunkaddr10333 to <4 x i64>*
  %wide.load31.i4736 = load <4 x i64>, <4 x i64>* %79, align 8, !noalias !41
  %80 = icmp slt <4 x i64> %wide.load.i4724, %vec.phi.i4717
  %81 = icmp slt <4 x i64> %wide.load29.i4728, %vec.phi26.i4718
  %82 = icmp slt <4 x i64> %wide.load30.i4732, %vec.phi27.i4719
  %83 = icmp slt <4 x i64> %wide.load31.i4736, %vec.phi28.i4720
  %84 = select <4 x i1> %80, <4 x i64> %wide.load.i4724, <4 x i64> %vec.phi.i4717
  %85 = select <4 x i1> %81, <4 x i64> %wide.load29.i4728, <4 x i64> %vec.phi26.i4718
  %86 = select <4 x i1> %82, <4 x i64> %wide.load30.i4732, <4 x i64> %vec.phi27.i4719
  %87 = select <4 x i1> %83, <4 x i64> %wide.load31.i4736, <4 x i64> %vec.phi28.i4720
  %index.next.i4737 = add i64 %index.i4716, 16
  %88 = icmp eq i64 %n.vec.i4711, %index.next.i4737
  br i1 %88, label %middle.block.i4752, label %vector.body.i4738, !llvm.loop !47

middle.block.i4752:                               ; preds = %vector.body.i4738
  %ind.end.i4712 = or i64 %n.vec.i4711, 1
  %rdx.minmax.cmp.i4739 = icmp slt <4 x i64> %84, %85
  %rdx.minmax.select.i4740 = select <4 x i1> %rdx.minmax.cmp.i4739, <4 x i64> %84, <4 x i64> %85
  %rdx.minmax.cmp32.i4741 = icmp slt <4 x i64> %rdx.minmax.select.i4740, %86
  %rdx.minmax.select33.i4742 = select <4 x i1> %rdx.minmax.cmp32.i4741, <4 x i64> %rdx.minmax.select.i4740, <4 x i64> %86
  %rdx.minmax.cmp34.i4743 = icmp slt <4 x i64> %rdx.minmax.select33.i4742, %87
  %rdx.minmax.select35.i4744 = select <4 x i1> %rdx.minmax.cmp34.i4743, <4 x i64> %rdx.minmax.select33.i4742, <4 x i64> %87
  %rdx.shuf.i4745 = shufflevector <4 x i64> %rdx.minmax.select35.i4744, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp56.i4746 = icmp slt <4 x i64> %rdx.minmax.select35.i4744, %rdx.shuf.i4745
  %rdx.minmax.select57.i4747 = select <4 x i1> %rdx.minmax.cmp56.i4746, <4 x i64> %rdx.minmax.select35.i4744, <4 x i64> %rdx.shuf.i4745
  %rdx.shuf58.i4748 = shufflevector <4 x i64> %rdx.minmax.select57.i4747, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp59.i4749 = icmp slt <4 x i64> %rdx.minmax.select57.i4747, %rdx.shuf58.i4748
  %rdx.minmax.select60.i4750 = select <4 x i1> %rdx.minmax.cmp59.i4749, <4 x i64> %rdx.minmax.select57.i4747, <4 x i64> %rdx.shuf58.i4748
  %89 = extractelement <4 x i64> %rdx.minmax.select60.i4750, i32 0
  %cmp.n.i4751 = icmp eq i64 %71, %n.vec.i4711
  br i1 %cmp.n.i4751, label %B0.endif.endif.endif.endif, label %B24.i4698.preheader

B0.endif.endif.endif.endif:                       ; preds = %B24.i4698, %middle.block.i4752, %B0.endif.endif.endif.i4705
  %.149.0.ph = phi i64 [ %89, %middle.block.i4752 ], [ %.52.i4703, %B0.endif.endif.endif.i4705 ], [ %return_val.3.1.i4696, %B24.i4698 ]
  tail call void @NRT_decref(i8* nonnull %.65)
  %.193 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 32, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.194 = icmp eq i8* %.193, null
  br i1 %.194, label %B0.endif.endif.endif.endif.endif.endif.if, label %B0.endif.endif.endif.endif.endif.endif.endif, !prof !3

B0.endif.endif.endif.if.if:                       ; preds = %B0.endif.endif.endif, %B1633.endif.endif.endif, %B1579.endif.endif.endif.e...endif.endif.endif, %B1579.endif.endif.endif.endif.endif.endif.endif, %B1390.endif.endif.endif.endif.endif.endif.endif, %B1390.endif.endif.endif, %B1255.endif.endif.endif, %B1201.endif.endif.endif, %B1066.endif.endif.endif, %B960.endif.endif.endif, %B342.endif.endif.endif.en...endif.4.endif.endif, %B342.endif.endif.endif.en...endif.3.endif.endif, %B342.endif.endif.endif.en...endif.2.endif.endif, %B342.endif.endif.endif.en...endif.1.endif.endif, %B342.endif.endif.endif.en...endif.endif.endif, %B342.endif.endif.endif.endif.endif.endif.endif, %B342.endif.endif.endif, %B302.endif.endif.endif.en...endif.1.endif.endif, %B302.endif.endif.endif.en...endif.endif.endif, %B302.endif.endif.endif.endif.endif.endif.endif, %B302.endif.endif.endif, %B226.endif.endif.endif.endif.endif.endif.endif, %B226.endif.endif.endif, %B168.endif.endif.endif
  %.const.picklebuf.139788661619840.sink = phi { i8*, i32, i8* }* [ @.const.picklebuf.139788661619840.8, %B168.endif.endif.endif ], [ @.const.picklebuf.139788661619840, %B226.endif.endif.endif ], [ @.const.picklebuf.139788661619840, %B226.endif.endif.endif.endif.endif.endif.endif ], [ @.const.picklebuf.139788661619840, %B302.endif.endif.endif ], [ @.const.picklebuf.139788661619840.8, %B302.endif.endif.endif.endif.endif.endif.endif ], [ @.const.picklebuf.139788661619840.8, %B302.endif.endif.endif.en...endif.endif.endif ], [ @.const.picklebuf.139788661619840.8, %B302.endif.endif.endif.en...endif.1.endif.endif ], [ @.const.picklebuf.139788661619840, %B342.endif.endif.endif ], [ @.const.picklebuf.139788661619840, %B342.endif.endif.endif.endif.endif.endif.endif ], [ @.const.picklebuf.139788661619840, %B342.endif.endif.endif.en...endif.endif.endif ], [ @.const.picklebuf.139788661619840, %B342.endif.endif.endif.en...endif.1.endif.endif ], [ @.const.picklebuf.139788661619840.8, %B342.endif.endif.endif.en...endif.2.endif.endif ], [ @.const.picklebuf.139788661619840, %B342.endif.endif.endif.en...endif.3.endif.endif ], [ @.const.picklebuf.139788661619840.8, %B342.endif.endif.endif.en...endif.4.endif.endif ], [ @.const.picklebuf.139788661619840, %B960.endif.endif.endif ], [ @.const.picklebuf.139788661619840.8, %B1066.endif.endif.endif ], [ @.const.picklebuf.139788661619840, %B1201.endif.endif.endif ], [ @.const.picklebuf.139788661619840, %B1255.endif.endif.endif ], [ @.const.picklebuf.139788661619840, %B1390.endif.endif.endif ], [ @.const.picklebuf.139788661619840.8, %B1390.endif.endif.endif.endif.endif.endif.endif ], [ @.const.picklebuf.139788661619840.8, %B1579.endif.endif.endif.endif.endif.endif.endif ], [ @.const.picklebuf.139788661619840.8, %B1579.endif.endif.endif.e...endif.endif.endif ], [ @.const.picklebuf.139788661619840, %B1633.endif.endif.endif ], [ @.const.picklebuf.139788661619840, %B0.endif.endif.endif ]
  store { i8*, i32, i8* }* %.const.picklebuf.139788661619840.sink, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B0.endif.endif.endif.endif.endif.endif.if:        ; preds = %B0.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B0.endif.endif.endif.endif.endif.endif.endif:     ; preds = %B0.endif.endif.endif.endif
  %.5.i4865 = getelementptr i8, i8* %.193, i64 24
  %90 = bitcast i8* %.5.i4865 to { i64, i64, i8, i64 }**
  %.6.i48665148 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %90, align 8
  %.206 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i48665148, i64 0, i32 1
  store i64 1, i64* %.206, align 8
  %.6.i49385149 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %90, align 8
  %.21210334 = bitcast { i64, i64, i8, i64 }* %.6.i49385149 to i64*
  store i64 0, i64* %.21210334, align 8
  %.6.i49365150 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %90, align 8
  %.218 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i49365150, i64 0, i32 2
  store i8 0, i8* %.218, align 1
  %.6.i49325151 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %90, align 8
  %.231 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i49325151, i64 0, i32 3
  store i64 0, i64* %.231, align 1
  %.6.i49285153 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %90, align 8
  %.25810335 = bitcast { i64, i64, i8, i64 }* %.6.i49285153 to i64*
  store i64 1, i64* %.25810335, align 8
  %.6.i49245154 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %90, align 8
  %.271 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i49245154, i64 0, i32 3
  store i64 %.149.0.ph, i64* %.271, align 8
  %.6.i3.i4868 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %90, align 8, !noalias !48
  %.5342.i486910336 = bitcast { i64, i64, i8, i64 }* %.6.i3.i4868 to i64*
  %.548.i4870 = load i64, i64* %.5342.i486910336, align 8, !noalias !48
  %.559.i4871 = icmp sgt i64 %.548.i4870, 0
  br i1 %.559.i4871, label %B14.endif.lr.ph.i4873, label %B0.endif.endif.endif.endif.endif.endif.endif.endif

B14.endif.lr.ph.i4873:                            ; preds = %B0.endif.endif.endif.endif.endif.endif.endif
  %min.iters.check.i4872 = icmp ult i64 %.548.i4870, 16
  br i1 %min.iters.check.i4872, label %B14.endif.preheader.i4876, label %vector.ph.i4878

B14.endif.preheader.i4876:                        ; preds = %middle.block.i4910, %B14.endif.lr.ph.i4873
  %acc.2.011.ph.i4874 = phi i64 [ 0, %B14.endif.lr.ph.i4873 ], [ %104, %middle.block.i4910 ]
  %.17.010.ph.i4875 = phi i64 [ 0, %B14.endif.lr.ph.i4873 ], [ %n.vec.i4877, %middle.block.i4910 ]
  br label %B14.endif.i4921

vector.ph.i4878:                                  ; preds = %B14.endif.lr.ph.i4873
  %n.vec.i4877 = and i64 %.548.i4870, -16
  br label %vector.body.i4901

vector.body.i4901:                                ; preds = %vector.body.i4901, %vector.ph.i4878
  %index.i4879 = phi i64 [ 0, %vector.ph.i4878 ], [ %index.next.i4900, %vector.body.i4901 ]
  %vec.phi.i4880 = phi <4 x i64> [ zeroinitializer, %vector.ph.i4878 ], [ %99, %vector.body.i4901 ]
  %vec.phi12.i4881 = phi <4 x i64> [ zeroinitializer, %vector.ph.i4878 ], [ %100, %vector.body.i4901 ]
  %vec.phi13.i4882 = phi <4 x i64> [ zeroinitializer, %vector.ph.i4878 ], [ %101, %vector.body.i4901 ]
  %vec.phi14.i4883 = phi <4 x i64> [ zeroinitializer, %vector.ph.i4878 ], [ %102, %vector.body.i4901 ]
  %sunkaddr10337 = mul i64 %index.i4879, 8
  %91 = bitcast { i64, i64, i8, i64 }* %.6.i3.i4868 to i8*
  %sunkaddr10338 = getelementptr i8, i8* %91, i64 %sunkaddr10337
  %sunkaddr10339 = getelementptr i8, i8* %sunkaddr10338, i64 24
  %92 = bitcast i8* %sunkaddr10339 to <4 x i64>*
  %wide.load.i4887 = load <4 x i64>, <4 x i64>* %92, align 8, !noalias !48
  %sunkaddr10340 = mul i64 %index.i4879, 8
  %93 = bitcast { i64, i64, i8, i64 }* %.6.i3.i4868 to i8*
  %sunkaddr10341 = getelementptr i8, i8* %93, i64 %sunkaddr10340
  %sunkaddr10342 = getelementptr i8, i8* %sunkaddr10341, i64 56
  %94 = bitcast i8* %sunkaddr10342 to <4 x i64>*
  %wide.load15.i4891 = load <4 x i64>, <4 x i64>* %94, align 8, !noalias !48
  %sunkaddr10343 = mul i64 %index.i4879, 8
  %95 = bitcast { i64, i64, i8, i64 }* %.6.i3.i4868 to i8*
  %sunkaddr10344 = getelementptr i8, i8* %95, i64 %sunkaddr10343
  %sunkaddr10345 = getelementptr i8, i8* %sunkaddr10344, i64 88
  %96 = bitcast i8* %sunkaddr10345 to <4 x i64>*
  %wide.load16.i4895 = load <4 x i64>, <4 x i64>* %96, align 8, !noalias !48
  %sunkaddr10346 = mul i64 %index.i4879, 8
  %97 = bitcast { i64, i64, i8, i64 }* %.6.i3.i4868 to i8*
  %sunkaddr10347 = getelementptr i8, i8* %97, i64 %sunkaddr10346
  %sunkaddr10348 = getelementptr i8, i8* %sunkaddr10347, i64 120
  %98 = bitcast i8* %sunkaddr10348 to <4 x i64>*
  %wide.load17.i4899 = load <4 x i64>, <4 x i64>* %98, align 8, !noalias !48
  %99 = add <4 x i64> %wide.load.i4887, %vec.phi.i4880
  %100 = add <4 x i64> %wide.load15.i4891, %vec.phi12.i4881
  %101 = add <4 x i64> %wide.load16.i4895, %vec.phi13.i4882
  %102 = add <4 x i64> %wide.load17.i4899, %vec.phi14.i4883
  %index.next.i4900 = add i64 %index.i4879, 16
  %103 = icmp eq i64 %n.vec.i4877, %index.next.i4900
  br i1 %103, label %middle.block.i4910, label %vector.body.i4901, !llvm.loop !51

middle.block.i4910:                               ; preds = %vector.body.i4901
  %bin.rdx.i4902 = add <4 x i64> %100, %99
  %bin.rdx18.i4903 = add <4 x i64> %bin.rdx.i4902, %101
  %bin.rdx19.i4904 = add <4 x i64> %bin.rdx18.i4903, %102
  %rdx.shuf.i4905 = shufflevector <4 x i64> %bin.rdx19.i4904, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx39.i4906 = add <4 x i64> %rdx.shuf.i4905, %bin.rdx19.i4904
  %rdx.shuf40.i4907 = shufflevector <4 x i64> %bin.rdx39.i4906, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx41.i4908 = add <4 x i64> %rdx.shuf40.i4907, %bin.rdx39.i4906
  %104 = extractelement <4 x i64> %bin.rdx41.i4908, i32 0
  %cmp.n.i4909 = icmp eq i64 %.548.i4870, %n.vec.i4877
  br i1 %cmp.n.i4909, label %B0.endif.endif.endif.endif.endif.endif.endif.endif, label %B14.endif.preheader.i4876

B14.endif.i4921:                                  ; preds = %B14.endif.i4921, %B14.endif.preheader.i4876
  %acc.2.011.i4912 = phi i64 [ %.94.i4919, %B14.endif.i4921 ], [ %acc.2.011.ph.i4874, %B14.endif.preheader.i4876 ]
  %.17.010.i4913 = phi i64 [ %.68.i4918, %B14.endif.i4921 ], [ %.17.010.ph.i4875, %B14.endif.preheader.i4876 ]
  %sunkaddr10349 = mul i64 %.17.010.i4913, 8
  %105 = bitcast { i64, i64, i8, i64 }* %.6.i3.i4868 to i8*
  %sunkaddr10350 = getelementptr i8, i8* %105, i64 %sunkaddr10349
  %sunkaddr10351 = getelementptr i8, i8* %sunkaddr10350, i64 24
  %106 = bitcast i8* %sunkaddr10351 to i64*
  %.65.i4917 = load i64, i64* %106, align 8, !noalias !48
  %.68.i4918 = add nuw nsw i64 %.17.010.i4913, 1
  %.94.i4919 = add nsw i64 %.65.i4917, %acc.2.011.i4912
  %exitcond.not.i4920 = icmp eq i64 %.548.i4870, %.68.i4918
  br i1 %exitcond.not.i4920, label %B0.endif.endif.endif.endif.endif.endif.endif.endif, label %B14.endif.i4921, !llvm.loop !52

B0.endif.endif.endif.endif.endif.endif.endif.endif: ; preds = %B14.endif.i4921, %middle.block.i4910, %B0.endif.endif.endif.endif.endif.endif.endif
  %acc.2.0.lcssa.i4911 = phi i64 [ 0, %B0.endif.endif.endif.endif.endif.endif.endif ], [ %104, %middle.block.i4910 ], [ %.94.i4919, %B14.endif.i4921 ]
  tail call void @NRT_decref(i8* nonnull %.193)
  %.319 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 32, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.320 = icmp eq i8* %.319, null
  br i1 %.320, label %B0.endif.endif.endif.endi...endif.if, label %B0.endif.endif.endif.endi...endif.endif, !prof !3

B0.endif.endif.endif.endi...endif.if:             ; preds = %B0.endif.endif.endif.endif.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B0.endif.endif.endif.endi...endif.endif:          ; preds = %B0.endif.endif.endif.endif.endif.endif.endif.endif
  %.5.i4863 = getelementptr i8, i8* %.319, i64 24
  %107 = bitcast i8* %.5.i4863 to { i64, i64, i8, i64 }**
  %.6.i48645155 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %107, align 8
  %.332 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i48645155, i64 0, i32 1
  store i64 1, i64* %.332, align 8
  %.6.i48625156 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %107, align 8
  %.33810352 = bitcast { i64, i64, i8, i64 }* %.6.i48625156 to i64*
  store i64 0, i64* %.33810352, align 8
  %.6.i48605157 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %107, align 8
  %.344 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i48605157, i64 0, i32 2
  store i8 0, i8* %.344, align 1
  %.6.i48565158 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %107, align 8
  %.357 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i48565158, i64 0, i32 3
  store i64 0, i64* %.357, align 1
  %.6.i48525160 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %107, align 8
  %.38410353 = bitcast { i64, i64, i8, i64 }* %.6.i48525160 to i64*
  store i64 1, i64* %.38410353, align 8
  %.6.i48485161 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %107, align 8
  %.397 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i48485161, i64 0, i32 3
  store i64 %acc.2.0.lcssa.i4911, i64* %.397, align 8
  %.6.i51626991 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %107, align 8
  %.447699210354 = bitcast { i64, i64, i8, i64 }* %.6.i51626991 to i64*
  %.4486993 = load i64, i64* %.447699210354, align 8
  %.4496994 = icmp sgt i64 %.4486993, 0
  br i1 %.4496994, label %B166.lr.ph, label %B168

B166.lr.ph:                                       ; preds = %B0.endif.endif.endif.endi...endif.endif
  %min.iters.check = icmp ult i64 %.4486993, 16
  br i1 %min.iters.check, label %B166.preheader, label %vector.ph

B166.preheader:                                   ; preds = %middle.block, %B166.lr.ph
  %temp.2.539.2.06996.ph = phi i64 [ 1, %B166.lr.ph ], [ %121, %middle.block ]
  %.413.06995.ph = phi i64 [ 0, %B166.lr.ph ], [ %n.vec, %middle.block ]
  br label %B166

vector.ph:                                        ; preds = %B166.lr.ph
  %n.vec = and i64 %.4486993, -16
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph ], [ %116, %vector.body ]
  %vec.phi7602 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph ], [ %117, %vector.body ]
  %vec.phi7603 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph ], [ %118, %vector.body ]
  %vec.phi7604 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph ], [ %119, %vector.body ]
  %sunkaddr10355 = mul i64 %index, 8
  %108 = bitcast { i64, i64, i8, i64 }* %.6.i51626991 to i8*
  %sunkaddr10356 = getelementptr i8, i8* %108, i64 %sunkaddr10355
  %sunkaddr10357 = getelementptr i8, i8* %sunkaddr10356, i64 24
  %109 = bitcast i8* %sunkaddr10357 to <4 x i64>*
  %wide.load = load <4 x i64>, <4 x i64>* %109, align 8
  %sunkaddr10358 = mul i64 %index, 8
  %110 = bitcast { i64, i64, i8, i64 }* %.6.i51626991 to i8*
  %sunkaddr10359 = getelementptr i8, i8* %110, i64 %sunkaddr10358
  %sunkaddr10360 = getelementptr i8, i8* %sunkaddr10359, i64 56
  %111 = bitcast i8* %sunkaddr10360 to <4 x i64>*
  %wide.load7605 = load <4 x i64>, <4 x i64>* %111, align 8
  %sunkaddr10361 = mul i64 %index, 8
  %112 = bitcast { i64, i64, i8, i64 }* %.6.i51626991 to i8*
  %sunkaddr10362 = getelementptr i8, i8* %112, i64 %sunkaddr10361
  %sunkaddr10363 = getelementptr i8, i8* %sunkaddr10362, i64 88
  %113 = bitcast i8* %sunkaddr10363 to <4 x i64>*
  %wide.load7606 = load <4 x i64>, <4 x i64>* %113, align 8
  %sunkaddr10364 = mul i64 %index, 8
  %114 = bitcast { i64, i64, i8, i64 }* %.6.i51626991 to i8*
  %sunkaddr10365 = getelementptr i8, i8* %114, i64 %sunkaddr10364
  %sunkaddr10366 = getelementptr i8, i8* %sunkaddr10365, i64 120
  %115 = bitcast i8* %sunkaddr10366 to <4 x i64>*
  %wide.load7607 = load <4 x i64>, <4 x i64>* %115, align 8
  %116 = mul <4 x i64> %wide.load, %vec.phi
  %117 = mul <4 x i64> %wide.load7605, %vec.phi7602
  %118 = mul <4 x i64> %wide.load7606, %vec.phi7603
  %119 = mul <4 x i64> %wide.load7607, %vec.phi7604
  %index.next = add i64 %index, 16
  %120 = icmp eq i64 %n.vec, %index.next
  br i1 %120, label %middle.block, label %vector.body, !llvm.loop !53

middle.block:                                     ; preds = %vector.body
  %bin.rdx = mul <4 x i64> %117, %116
  %bin.rdx7608 = mul <4 x i64> %118, %bin.rdx
  %bin.rdx7609 = mul <4 x i64> %119, %bin.rdx7608
  %rdx.shuf = shufflevector <4 x i64> %bin.rdx7609, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10080 = mul <4 x i64> %bin.rdx7609, %rdx.shuf
  %rdx.shuf10081 = shufflevector <4 x i64> %bin.rdx10080, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10082 = mul <4 x i64> %bin.rdx10080, %rdx.shuf10081
  %121 = extractelement <4 x i64> %bin.rdx10082, i32 0
  %cmp.n = icmp eq i64 %.4486993, %n.vec
  br i1 %cmp.n, label %B168, label %B166.preheader

B168.endif.endif.if:                              ; preds = %B168
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B168.endif.endif.endif:                           ; preds = %B168
  %.5.i4843 = getelementptr i8, i8* %.519, i64 24
  %122 = bitcast i8* %.5.i4843 to { i64, i64, i8, i64 }**
  %.6.i48445163 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %122, align 8
  %.532 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i48445163, i64 0, i32 1
  store i64 1, i64* %.532, align 8
  %.6.i48425164 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %122, align 8
  %.53810367 = bitcast { i64, i64, i8, i64 }* %.6.i48425164 to i64*
  store i64 0, i64* %.53810367, align 8
  %.6.i48405165 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %122, align 8
  %.544 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i48405165, i64 0, i32 2
  store i8 0, i8* %.544, align 1
  %.6.i48365166 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %122, align 8
  %.557 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i48365166, i64 0, i32 3
  store i64 0, i64* %.557, align 1
  %.6.i48325168 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %122, align 8
  %.58410368 = bitcast { i64, i64, i8, i64 }* %.6.i48325168 to i64*
  store i64 1, i64* %.58410368, align 8
  %.6.i48285169 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %122, align 8
  %.597 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i48285169, i64 0, i32 3
  store i64 %temp.2.539.2.0.lcssa, i64* %.597, align 8
  %.6.i11.i4756 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %122, align 8, !noalias !54
  %.4061.i475710369 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4756 to i64*
  %.41.i4758 = load i64, i64* %.4061.i475710369, align 8, !noalias !54
  %.42.i4759 = icmp sgt i64 %.41.i4758, 0
  br i1 %.42.i4759, label %B0.endif.endif.endif.i4777, label %B0.endif.endif.endif.if.if, !prof !45

B24.i4770:                                        ; preds = %B24.i4770.preheader, %B24.i4770
  %return_val.2.025.i4760 = phi i64 [ %return_val.3.1.i4768, %B24.i4770 ], [ %return_val.2.025.i4760.ph, %B24.i4770.preheader ]
  %.14.024.i4761 = phi i64 [ %.129.i4766, %B24.i4770 ], [ %.14.024.i4761.ph, %B24.i4770.preheader ]
  %sunkaddr10370 = mul i64 %.14.024.i4761, 8
  %123 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4756 to i8*
  %sunkaddr10371 = getelementptr i8, i8* %123, i64 %sunkaddr10370
  %sunkaddr10372 = getelementptr i8, i8* %sunkaddr10371, i64 24
  %124 = bitcast i8* %sunkaddr10372 to i64*
  %.126.i4765 = load i64, i64* %124, align 8, !noalias !54
  %.129.i4766 = add nuw nsw i64 %.14.024.i4761, 1
  %.6.i7.not.i4767 = icmp sgt i64 %.126.i4765, %return_val.2.025.i4760
  %return_val.3.1.i4768 = select i1 %.6.i7.not.i4767, i64 %.126.i4765, i64 %return_val.2.025.i4760
  %exitcond.not.i4769 = icmp eq i64 %.41.i4758, %.129.i4766
  br i1 %exitcond.not.i4769, label %B168.endif.endif.endif.endif, label %B24.i4770, !llvm.loop !58

B0.endif.endif.endif.i4777:                       ; preds = %B168.endif.endif.endif
  %.50.i4774 = getelementptr { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11.i4756, i64 0, i32 3
  %.52.i4775 = load i64, i64* %.50.i4774, align 8, !noalias !54
  %.11623.not.i4776 = icmp eq i64 %.41.i4758, 1
  br i1 %.11623.not.i4776, label %B168.endif.endif.endif.endif, label %B24.preheader.i4779

B24.preheader.i4779:                              ; preds = %B0.endif.endif.endif.i4777
  %125 = add nsw i64 %.41.i4758, -1
  %min.iters.check.i4778 = icmp ult i64 %125, 16
  br i1 %min.iters.check.i4778, label %B24.i4770.preheader, label %vector.ph.i4787

B24.i4770.preheader:                              ; preds = %middle.block.i4824, %B24.preheader.i4779
  %return_val.2.025.i4760.ph = phi i64 [ %143, %middle.block.i4824 ], [ %.52.i4775, %B24.preheader.i4779 ]
  %.14.024.i4761.ph = phi i64 [ %ind.end.i4784, %middle.block.i4824 ], [ 1, %B24.preheader.i4779 ]
  br label %B24.i4770

vector.ph.i4787:                                  ; preds = %B24.preheader.i4779
  %n.vec.i4783 = and i64 %125, -16
  %minmax.ident.splatinsert.i4785 = insertelement <4 x i64> undef, i64 %.52.i4775, i32 0
  %minmax.ident.splat.i4786 = shufflevector <4 x i64> %minmax.ident.splatinsert.i4785, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %vector.body.i4810

vector.body.i4810:                                ; preds = %vector.body.i4810, %vector.ph.i4787
  %index.i4788 = phi i64 [ 0, %vector.ph.i4787 ], [ %index.next.i4809, %vector.body.i4810 ]
  %vec.phi.i4789 = phi <4 x i64> [ %minmax.ident.splat.i4786, %vector.ph.i4787 ], [ %138, %vector.body.i4810 ]
  %vec.phi26.i4790 = phi <4 x i64> [ %minmax.ident.splat.i4786, %vector.ph.i4787 ], [ %139, %vector.body.i4810 ]
  %vec.phi27.i4791 = phi <4 x i64> [ %minmax.ident.splat.i4786, %vector.ph.i4787 ], [ %140, %vector.body.i4810 ]
  %vec.phi28.i4792 = phi <4 x i64> [ %minmax.ident.splat.i4786, %vector.ph.i4787 ], [ %141, %vector.body.i4810 ]
  %sunkaddr10373 = mul i64 %index.i4788, 8
  %126 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4756 to i8*
  %sunkaddr10374 = getelementptr i8, i8* %126, i64 %sunkaddr10373
  %sunkaddr10375 = getelementptr i8, i8* %sunkaddr10374, i64 32
  %127 = bitcast i8* %sunkaddr10375 to <4 x i64>*
  %wide.load.i4796 = load <4 x i64>, <4 x i64>* %127, align 8, !noalias !54
  %sunkaddr10376 = mul i64 %index.i4788, 8
  %128 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4756 to i8*
  %sunkaddr10377 = getelementptr i8, i8* %128, i64 %sunkaddr10376
  %sunkaddr10378 = getelementptr i8, i8* %sunkaddr10377, i64 64
  %129 = bitcast i8* %sunkaddr10378 to <4 x i64>*
  %wide.load29.i4800 = load <4 x i64>, <4 x i64>* %129, align 8, !noalias !54
  %sunkaddr10379 = mul i64 %index.i4788, 8
  %130 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4756 to i8*
  %sunkaddr10380 = getelementptr i8, i8* %130, i64 %sunkaddr10379
  %sunkaddr10381 = getelementptr i8, i8* %sunkaddr10380, i64 96
  %131 = bitcast i8* %sunkaddr10381 to <4 x i64>*
  %wide.load30.i4804 = load <4 x i64>, <4 x i64>* %131, align 8, !noalias !54
  %sunkaddr10382 = mul i64 %index.i4788, 8
  %132 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4756 to i8*
  %sunkaddr10383 = getelementptr i8, i8* %132, i64 %sunkaddr10382
  %sunkaddr10384 = getelementptr i8, i8* %sunkaddr10383, i64 128
  %133 = bitcast i8* %sunkaddr10384 to <4 x i64>*
  %wide.load31.i4808 = load <4 x i64>, <4 x i64>* %133, align 8, !noalias !54
  %134 = icmp sgt <4 x i64> %wide.load.i4796, %vec.phi.i4789
  %135 = icmp sgt <4 x i64> %wide.load29.i4800, %vec.phi26.i4790
  %136 = icmp sgt <4 x i64> %wide.load30.i4804, %vec.phi27.i4791
  %137 = icmp sgt <4 x i64> %wide.load31.i4808, %vec.phi28.i4792
  %138 = select <4 x i1> %134, <4 x i64> %wide.load.i4796, <4 x i64> %vec.phi.i4789
  %139 = select <4 x i1> %135, <4 x i64> %wide.load29.i4800, <4 x i64> %vec.phi26.i4790
  %140 = select <4 x i1> %136, <4 x i64> %wide.load30.i4804, <4 x i64> %vec.phi27.i4791
  %141 = select <4 x i1> %137, <4 x i64> %wide.load31.i4808, <4 x i64> %vec.phi28.i4792
  %index.next.i4809 = add i64 %index.i4788, 16
  %142 = icmp eq i64 %n.vec.i4783, %index.next.i4809
  br i1 %142, label %middle.block.i4824, label %vector.body.i4810, !llvm.loop !59

middle.block.i4824:                               ; preds = %vector.body.i4810
  %ind.end.i4784 = or i64 %n.vec.i4783, 1
  %rdx.minmax.cmp.i4811 = icmp sgt <4 x i64> %138, %139
  %rdx.minmax.select.i4812 = select <4 x i1> %rdx.minmax.cmp.i4811, <4 x i64> %138, <4 x i64> %139
  %rdx.minmax.cmp32.i4813 = icmp sgt <4 x i64> %rdx.minmax.select.i4812, %140
  %rdx.minmax.select33.i4814 = select <4 x i1> %rdx.minmax.cmp32.i4813, <4 x i64> %rdx.minmax.select.i4812, <4 x i64> %140
  %rdx.minmax.cmp34.i4815 = icmp sgt <4 x i64> %rdx.minmax.select33.i4814, %141
  %rdx.minmax.select35.i4816 = select <4 x i1> %rdx.minmax.cmp34.i4815, <4 x i64> %rdx.minmax.select33.i4814, <4 x i64> %141
  %rdx.shuf.i4817 = shufflevector <4 x i64> %rdx.minmax.select35.i4816, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp56.i4818 = icmp sgt <4 x i64> %rdx.minmax.select35.i4816, %rdx.shuf.i4817
  %rdx.minmax.select57.i4819 = select <4 x i1> %rdx.minmax.cmp56.i4818, <4 x i64> %rdx.minmax.select35.i4816, <4 x i64> %rdx.shuf.i4817
  %rdx.shuf58.i4820 = shufflevector <4 x i64> %rdx.minmax.select57.i4819, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp59.i4821 = icmp sgt <4 x i64> %rdx.minmax.select57.i4819, %rdx.shuf58.i4820
  %rdx.minmax.select60.i4822 = select <4 x i1> %rdx.minmax.cmp59.i4821, <4 x i64> %rdx.minmax.select57.i4819, <4 x i64> %rdx.shuf58.i4820
  %143 = extractelement <4 x i64> %rdx.minmax.select60.i4822, i32 0
  %cmp.n.i4823 = icmp eq i64 %125, %n.vec.i4783
  br i1 %cmp.n.i4823, label %B168.endif.endif.endif.endif, label %B24.i4770.preheader

B168.endif.endif.endif.endif:                     ; preds = %B24.i4770, %middle.block.i4824, %B0.endif.endif.endif.i4777
  %.601.0.ph = phi i64 [ %143, %middle.block.i4824 ], [ %.52.i4775, %B0.endif.endif.endif.i4777 ], [ %return_val.3.1.i4768, %B24.i4770 ]
  tail call void @NRT_decref(i8* nonnull %.519)
  %.647 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 32, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.648 = icmp eq i8* %.647, null
  br i1 %.648, label %B168.endif.endif.endif.endif.endif.endif.if, label %B168.endif.endif.endif.endif.endif.endif.endif, !prof !3

B168.endif.endif.endif.endif.endif.endif.if:      ; preds = %B168.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B168.endif.endif.endif.endif.endif.endif.endif:   ; preds = %B168.endif.endif.endif.endif
  %.5.i4681 = getelementptr i8, i8* %.647, i64 24
  %144 = bitcast i8* %.5.i4681 to { i64, i64, i8, i64 }**
  %.6.i46825170 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %144, align 8
  %.660 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i46825170, i64 0, i32 1
  store i64 1, i64* %.660, align 8
  %.6.i46805171 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %144, align 8
  %.66610385 = bitcast { i64, i64, i8, i64 }* %.6.i46805171 to i64*
  store i64 0, i64* %.66610385, align 8
  %.6.i46785172 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %144, align 8
  %.672 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i46785172, i64 0, i32 2
  store i8 0, i8* %.672, align 1
  %.6.i46745173 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %144, align 8
  %.685 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i46745173, i64 0, i32 3
  store i64 0, i64* %.685, align 1
  %.6.i46705175 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %144, align 8
  %.71210386 = bitcast { i64, i64, i8, i64 }* %.6.i46705175 to i64*
  store i64 1, i64* %.71210386, align 8
  %.6.i46665176 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %144, align 8
  %.725 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i46665176, i64 0, i32 3
  store i64 %.601.0.ph, i64* %.725, align 8
  %.6.i251776983 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %144, align 8
  %.775698410387 = bitcast { i64, i64, i8, i64 }* %.6.i251776983 to i64*
  %.7766985 = load i64, i64* %.775698410387, align 8
  %.7776986 = icmp sgt i64 %.7766985, 0
  br i1 %.7776986, label %B224.lr.ph, label %B226

B224.lr.ph:                                       ; preds = %B168.endif.endif.endif.endif.endif.endif.endif
  %min.iters.check7613 = icmp ult i64 %.7766985, 16
  br i1 %min.iters.check7613, label %B224.preheader, label %vector.ph7614

B224.preheader:                                   ; preds = %middle.block7610, %B224.lr.ph
  %temp.2.557.2.06988.ph = phi i64 [ 1, %B224.lr.ph ], [ %158, %middle.block7610 ]
  %.741.06987.ph = phi i64 [ 0, %B224.lr.ph ], [ %n.vec7616, %middle.block7610 ]
  br label %B224

vector.ph7614:                                    ; preds = %B224.lr.ph
  %n.vec7616 = and i64 %.7766985, -16
  br label %vector.body7612

vector.body7612:                                  ; preds = %vector.body7612, %vector.ph7614
  %index7617 = phi i64 [ 0, %vector.ph7614 ], [ %index.next7618, %vector.body7612 ]
  %vec.phi7621 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7614 ], [ %153, %vector.body7612 ]
  %vec.phi7622 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7614 ], [ %154, %vector.body7612 ]
  %vec.phi7623 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7614 ], [ %155, %vector.body7612 ]
  %vec.phi7624 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7614 ], [ %156, %vector.body7612 ]
  %sunkaddr10388 = mul i64 %index7617, 8
  %145 = bitcast { i64, i64, i8, i64 }* %.6.i251776983 to i8*
  %sunkaddr10389 = getelementptr i8, i8* %145, i64 %sunkaddr10388
  %sunkaddr10390 = getelementptr i8, i8* %sunkaddr10389, i64 24
  %146 = bitcast i8* %sunkaddr10390 to <4 x i64>*
  %wide.load7625 = load <4 x i64>, <4 x i64>* %146, align 8
  %sunkaddr10391 = mul i64 %index7617, 8
  %147 = bitcast { i64, i64, i8, i64 }* %.6.i251776983 to i8*
  %sunkaddr10392 = getelementptr i8, i8* %147, i64 %sunkaddr10391
  %sunkaddr10393 = getelementptr i8, i8* %sunkaddr10392, i64 56
  %148 = bitcast i8* %sunkaddr10393 to <4 x i64>*
  %wide.load7626 = load <4 x i64>, <4 x i64>* %148, align 8
  %sunkaddr10394 = mul i64 %index7617, 8
  %149 = bitcast { i64, i64, i8, i64 }* %.6.i251776983 to i8*
  %sunkaddr10395 = getelementptr i8, i8* %149, i64 %sunkaddr10394
  %sunkaddr10396 = getelementptr i8, i8* %sunkaddr10395, i64 88
  %150 = bitcast i8* %sunkaddr10396 to <4 x i64>*
  %wide.load7627 = load <4 x i64>, <4 x i64>* %150, align 8
  %sunkaddr10397 = mul i64 %index7617, 8
  %151 = bitcast { i64, i64, i8, i64 }* %.6.i251776983 to i8*
  %sunkaddr10398 = getelementptr i8, i8* %151, i64 %sunkaddr10397
  %sunkaddr10399 = getelementptr i8, i8* %sunkaddr10398, i64 120
  %152 = bitcast i8* %sunkaddr10399 to <4 x i64>*
  %wide.load7628 = load <4 x i64>, <4 x i64>* %152, align 8
  %153 = mul <4 x i64> %wide.load7625, %vec.phi7621
  %154 = mul <4 x i64> %wide.load7626, %vec.phi7622
  %155 = mul <4 x i64> %wide.load7627, %vec.phi7623
  %156 = mul <4 x i64> %wide.load7628, %vec.phi7624
  %index.next7618 = add i64 %index7617, 16
  %157 = icmp eq i64 %n.vec7616, %index.next7618
  br i1 %157, label %middle.block7610, label %vector.body7612, !llvm.loop !60

middle.block7610:                                 ; preds = %vector.body7612
  %bin.rdx7629 = mul <4 x i64> %154, %153
  %bin.rdx7630 = mul <4 x i64> %155, %bin.rdx7629
  %bin.rdx7631 = mul <4 x i64> %156, %bin.rdx7630
  %rdx.shuf10083 = shufflevector <4 x i64> %bin.rdx7631, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10084 = mul <4 x i64> %bin.rdx7631, %rdx.shuf10083
  %rdx.shuf10085 = shufflevector <4 x i64> %bin.rdx10084, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10086 = mul <4 x i64> %bin.rdx10084, %rdx.shuf10085
  %158 = extractelement <4 x i64> %bin.rdx10086, i32 0
  %cmp.n7620 = icmp eq i64 %.7766985, %n.vec7616
  br i1 %cmp.n7620, label %B226, label %B224.preheader

B226.endif.endif.if:                              ; preds = %B226
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B226.endif.endif.endif:                           ; preds = %B226
  %.5.i4661 = getelementptr i8, i8* %.847, i64 24
  %159 = bitcast i8* %.5.i4661 to { i64, i64, i8, i64 }**
  %.6.i46625178 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %159, align 8
  %.860 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i46625178, i64 0, i32 1
  store i64 1, i64* %.860, align 8
  %.6.i46605179 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %159, align 8
  %.86610400 = bitcast { i64, i64, i8, i64 }* %.6.i46605179 to i64*
  store i64 0, i64* %.86610400, align 8
  %.6.i46585180 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %159, align 8
  %.872 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i46585180, i64 0, i32 2
  store i8 0, i8* %.872, align 1
  %.6.i46545181 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %159, align 8
  %.885 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i46545181, i64 0, i32 3
  store i64 0, i64* %.885, align 1
  %.6.i46505183 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %159, align 8
  %.91210401 = bitcast { i64, i64, i8, i64 }* %.6.i46505183 to i64*
  store i64 1, i64* %.91210401, align 8
  %.6.i46465184 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %159, align 8
  %.925 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i46465184, i64 0, i32 3
  store i64 %temp.2.557.2.0.lcssa, i64* %.925, align 8
  %.6.i11.i4574 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %159, align 8, !noalias !61
  %.4061.i457510402 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4574 to i64*
  %.41.i4576 = load i64, i64* %.4061.i457510402, align 8, !noalias !61
  %.42.i4577 = icmp sgt i64 %.41.i4576, 0
  br i1 %.42.i4577, label %B0.endif.endif.endif.i4595, label %B0.endif.endif.endif.if.if, !prof !45

B24.i4588:                                        ; preds = %B24.i4588.preheader, %B24.i4588
  %return_val.2.025.i4578 = phi i64 [ %return_val.3.1.i4586, %B24.i4588 ], [ %return_val.2.025.i4578.ph, %B24.i4588.preheader ]
  %.14.024.i4579 = phi i64 [ %.129.i4584, %B24.i4588 ], [ %.14.024.i4579.ph, %B24.i4588.preheader ]
  %sunkaddr10403 = mul i64 %.14.024.i4579, 8
  %160 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4574 to i8*
  %sunkaddr10404 = getelementptr i8, i8* %160, i64 %sunkaddr10403
  %sunkaddr10405 = getelementptr i8, i8* %sunkaddr10404, i64 24
  %161 = bitcast i8* %sunkaddr10405 to i64*
  %.126.i4583 = load i64, i64* %161, align 8, !noalias !61
  %.129.i4584 = add nuw nsw i64 %.14.024.i4579, 1
  %.6.i7.not.i4585 = icmp slt i64 %.126.i4583, %return_val.2.025.i4578
  %return_val.3.1.i4586 = select i1 %.6.i7.not.i4585, i64 %.126.i4583, i64 %return_val.2.025.i4578
  %exitcond.not.i4587 = icmp eq i64 %.41.i4576, %.129.i4584
  br i1 %exitcond.not.i4587, label %B226.endif.endif.endif.endif, label %B24.i4588, !llvm.loop !46

B0.endif.endif.endif.i4595:                       ; preds = %B226.endif.endif.endif
  %.50.i4592 = getelementptr { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11.i4574, i64 0, i32 3
  %.52.i4593 = load i64, i64* %.50.i4592, align 8, !noalias !61
  %.11623.not.i4594 = icmp eq i64 %.41.i4576, 1
  br i1 %.11623.not.i4594, label %B226.endif.endif.endif.endif, label %B24.preheader.i4597

B24.preheader.i4597:                              ; preds = %B0.endif.endif.endif.i4595
  %162 = add nsw i64 %.41.i4576, -1
  %min.iters.check.i4596 = icmp ult i64 %162, 16
  br i1 %min.iters.check.i4596, label %B24.i4588.preheader, label %vector.ph.i4605

B24.i4588.preheader:                              ; preds = %middle.block.i4642, %B24.preheader.i4597
  %return_val.2.025.i4578.ph = phi i64 [ %180, %middle.block.i4642 ], [ %.52.i4593, %B24.preheader.i4597 ]
  %.14.024.i4579.ph = phi i64 [ %ind.end.i4602, %middle.block.i4642 ], [ 1, %B24.preheader.i4597 ]
  br label %B24.i4588

vector.ph.i4605:                                  ; preds = %B24.preheader.i4597
  %n.vec.i4601 = and i64 %162, -16
  %minmax.ident.splatinsert.i4603 = insertelement <4 x i64> undef, i64 %.52.i4593, i32 0
  %minmax.ident.splat.i4604 = shufflevector <4 x i64> %minmax.ident.splatinsert.i4603, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %vector.body.i4628

vector.body.i4628:                                ; preds = %vector.body.i4628, %vector.ph.i4605
  %index.i4606 = phi i64 [ 0, %vector.ph.i4605 ], [ %index.next.i4627, %vector.body.i4628 ]
  %vec.phi.i4607 = phi <4 x i64> [ %minmax.ident.splat.i4604, %vector.ph.i4605 ], [ %175, %vector.body.i4628 ]
  %vec.phi26.i4608 = phi <4 x i64> [ %minmax.ident.splat.i4604, %vector.ph.i4605 ], [ %176, %vector.body.i4628 ]
  %vec.phi27.i4609 = phi <4 x i64> [ %minmax.ident.splat.i4604, %vector.ph.i4605 ], [ %177, %vector.body.i4628 ]
  %vec.phi28.i4610 = phi <4 x i64> [ %minmax.ident.splat.i4604, %vector.ph.i4605 ], [ %178, %vector.body.i4628 ]
  %sunkaddr10406 = mul i64 %index.i4606, 8
  %163 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4574 to i8*
  %sunkaddr10407 = getelementptr i8, i8* %163, i64 %sunkaddr10406
  %sunkaddr10408 = getelementptr i8, i8* %sunkaddr10407, i64 32
  %164 = bitcast i8* %sunkaddr10408 to <4 x i64>*
  %wide.load.i4614 = load <4 x i64>, <4 x i64>* %164, align 8, !noalias !61
  %sunkaddr10409 = mul i64 %index.i4606, 8
  %165 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4574 to i8*
  %sunkaddr10410 = getelementptr i8, i8* %165, i64 %sunkaddr10409
  %sunkaddr10411 = getelementptr i8, i8* %sunkaddr10410, i64 64
  %166 = bitcast i8* %sunkaddr10411 to <4 x i64>*
  %wide.load29.i4618 = load <4 x i64>, <4 x i64>* %166, align 8, !noalias !61
  %sunkaddr10412 = mul i64 %index.i4606, 8
  %167 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4574 to i8*
  %sunkaddr10413 = getelementptr i8, i8* %167, i64 %sunkaddr10412
  %sunkaddr10414 = getelementptr i8, i8* %sunkaddr10413, i64 96
  %168 = bitcast i8* %sunkaddr10414 to <4 x i64>*
  %wide.load30.i4622 = load <4 x i64>, <4 x i64>* %168, align 8, !noalias !61
  %sunkaddr10415 = mul i64 %index.i4606, 8
  %169 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4574 to i8*
  %sunkaddr10416 = getelementptr i8, i8* %169, i64 %sunkaddr10415
  %sunkaddr10417 = getelementptr i8, i8* %sunkaddr10416, i64 128
  %170 = bitcast i8* %sunkaddr10417 to <4 x i64>*
  %wide.load31.i4626 = load <4 x i64>, <4 x i64>* %170, align 8, !noalias !61
  %171 = icmp slt <4 x i64> %wide.load.i4614, %vec.phi.i4607
  %172 = icmp slt <4 x i64> %wide.load29.i4618, %vec.phi26.i4608
  %173 = icmp slt <4 x i64> %wide.load30.i4622, %vec.phi27.i4609
  %174 = icmp slt <4 x i64> %wide.load31.i4626, %vec.phi28.i4610
  %175 = select <4 x i1> %171, <4 x i64> %wide.load.i4614, <4 x i64> %vec.phi.i4607
  %176 = select <4 x i1> %172, <4 x i64> %wide.load29.i4618, <4 x i64> %vec.phi26.i4608
  %177 = select <4 x i1> %173, <4 x i64> %wide.load30.i4622, <4 x i64> %vec.phi27.i4609
  %178 = select <4 x i1> %174, <4 x i64> %wide.load31.i4626, <4 x i64> %vec.phi28.i4610
  %index.next.i4627 = add i64 %index.i4606, 16
  %179 = icmp eq i64 %n.vec.i4601, %index.next.i4627
  br i1 %179, label %middle.block.i4642, label %vector.body.i4628, !llvm.loop !47

middle.block.i4642:                               ; preds = %vector.body.i4628
  %ind.end.i4602 = or i64 %n.vec.i4601, 1
  %rdx.minmax.cmp.i4629 = icmp slt <4 x i64> %175, %176
  %rdx.minmax.select.i4630 = select <4 x i1> %rdx.minmax.cmp.i4629, <4 x i64> %175, <4 x i64> %176
  %rdx.minmax.cmp32.i4631 = icmp slt <4 x i64> %rdx.minmax.select.i4630, %177
  %rdx.minmax.select33.i4632 = select <4 x i1> %rdx.minmax.cmp32.i4631, <4 x i64> %rdx.minmax.select.i4630, <4 x i64> %177
  %rdx.minmax.cmp34.i4633 = icmp slt <4 x i64> %rdx.minmax.select33.i4632, %178
  %rdx.minmax.select35.i4634 = select <4 x i1> %rdx.minmax.cmp34.i4633, <4 x i64> %rdx.minmax.select33.i4632, <4 x i64> %178
  %rdx.shuf.i4635 = shufflevector <4 x i64> %rdx.minmax.select35.i4634, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp56.i4636 = icmp slt <4 x i64> %rdx.minmax.select35.i4634, %rdx.shuf.i4635
  %rdx.minmax.select57.i4637 = select <4 x i1> %rdx.minmax.cmp56.i4636, <4 x i64> %rdx.minmax.select35.i4634, <4 x i64> %rdx.shuf.i4635
  %rdx.shuf58.i4638 = shufflevector <4 x i64> %rdx.minmax.select57.i4637, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp59.i4639 = icmp slt <4 x i64> %rdx.minmax.select57.i4637, %rdx.shuf58.i4638
  %rdx.minmax.select60.i4640 = select <4 x i1> %rdx.minmax.cmp59.i4639, <4 x i64> %rdx.minmax.select57.i4637, <4 x i64> %rdx.shuf58.i4638
  %180 = extractelement <4 x i64> %rdx.minmax.select60.i4640, i32 0
  %cmp.n.i4641 = icmp eq i64 %162, %n.vec.i4601
  br i1 %cmp.n.i4641, label %B226.endif.endif.endif.endif, label %B24.i4588.preheader

B226.endif.endif.endif.endif:                     ; preds = %B24.i4588, %middle.block.i4642, %B0.endif.endif.endif.i4595
  %.929.0.ph = phi i64 [ %180, %middle.block.i4642 ], [ %.52.i4593, %B0.endif.endif.endif.i4595 ], [ %return_val.3.1.i4586, %B24.i4588 ]
  tail call void @NRT_decref(i8* nonnull %.847)
  %.975 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 32, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.976 = icmp eq i8* %.975, null
  br i1 %.976, label %B226.endif.endif.endif.endif.endif.endif.if, label %B226.endif.endif.endif.endif.endif.endif.endif, !prof !3

B226.endif.endif.endif.endif.endif.endif.if:      ; preds = %B226.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B226.endif.endif.endif.endif.endif.endif.endif:   ; preds = %B226.endif.endif.endif.endif
  %.5.i4569 = getelementptr i8, i8* %.975, i64 24
  %181 = bitcast i8* %.5.i4569 to { i64, i64, i8, i64 }**
  %.6.i45705185 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %181, align 8
  %.988 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i45705185, i64 0, i32 1
  store i64 1, i64* %.988, align 8
  %.6.i45685186 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %181, align 8
  %.99410418 = bitcast { i64, i64, i8, i64 }* %.6.i45685186 to i64*
  store i64 0, i64* %.99410418, align 8
  %.6.i45665187 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %181, align 8
  %.1000 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i45665187, i64 0, i32 2
  store i8 0, i8* %.1000, align 1
  %.6.i45625188 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %181, align 8
  %.1013 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i45625188, i64 0, i32 3
  store i64 0, i64* %.1013, align 1
  %.6.i45585190 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %181, align 8
  %.104010419 = bitcast { i64, i64, i8, i64 }* %.6.i45585190 to i64*
  store i64 1, i64* %.104010419, align 8
  %.6.i45545191 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %181, align 8
  %.1053 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i45545191, i64 0, i32 3
  store i64 %.929.0.ph, i64* %.1053, align 8
  %.6.i11.i4482 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %181, align 8, !noalias !65
  %.4061.i448310420 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4482 to i64*
  %.41.i4484 = load i64, i64* %.4061.i448310420, align 8, !noalias !65
  %.42.i4485 = icmp sgt i64 %.41.i4484, 0
  br i1 %.42.i4485, label %B0.endif.endif.endif.i4503, label %B0.endif.endif.endif.if.if, !prof !45

B24.i4496:                                        ; preds = %B24.i4496.preheader, %B24.i4496
  %return_val.2.025.i4486 = phi i64 [ %return_val.3.1.i4494, %B24.i4496 ], [ %return_val.2.025.i4486.ph, %B24.i4496.preheader ]
  %.14.024.i4487 = phi i64 [ %.129.i4492, %B24.i4496 ], [ %.14.024.i4487.ph, %B24.i4496.preheader ]
  %sunkaddr10421 = mul i64 %.14.024.i4487, 8
  %182 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4482 to i8*
  %sunkaddr10422 = getelementptr i8, i8* %182, i64 %sunkaddr10421
  %sunkaddr10423 = getelementptr i8, i8* %sunkaddr10422, i64 24
  %183 = bitcast i8* %sunkaddr10423 to i64*
  %.126.i4491 = load i64, i64* %183, align 8, !noalias !65
  %.129.i4492 = add nuw nsw i64 %.14.024.i4487, 1
  %.6.i7.not.i4493 = icmp slt i64 %.126.i4491, %return_val.2.025.i4486
  %return_val.3.1.i4494 = select i1 %.6.i7.not.i4493, i64 %.126.i4491, i64 %return_val.2.025.i4486
  %exitcond.not.i4495 = icmp eq i64 %.41.i4484, %.129.i4492
  br i1 %exitcond.not.i4495, label %B226.endif.endif.endif.endif.endif.endif.endif.endif, label %B24.i4496, !llvm.loop !46

B0.endif.endif.endif.i4503:                       ; preds = %B226.endif.endif.endif.endif.endif.endif.endif
  %.50.i4500 = getelementptr { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11.i4482, i64 0, i32 3
  %.52.i4501 = load i64, i64* %.50.i4500, align 8, !noalias !65
  %.11623.not.i4502 = icmp eq i64 %.41.i4484, 1
  br i1 %.11623.not.i4502, label %B226.endif.endif.endif.endif.endif.endif.endif.endif, label %B24.preheader.i4505

B24.preheader.i4505:                              ; preds = %B0.endif.endif.endif.i4503
  %184 = add nsw i64 %.41.i4484, -1
  %min.iters.check.i4504 = icmp ult i64 %184, 16
  br i1 %min.iters.check.i4504, label %B24.i4496.preheader, label %vector.ph.i4513

B24.i4496.preheader:                              ; preds = %middle.block.i4550, %B24.preheader.i4505
  %return_val.2.025.i4486.ph = phi i64 [ %202, %middle.block.i4550 ], [ %.52.i4501, %B24.preheader.i4505 ]
  %.14.024.i4487.ph = phi i64 [ %ind.end.i4510, %middle.block.i4550 ], [ 1, %B24.preheader.i4505 ]
  br label %B24.i4496

vector.ph.i4513:                                  ; preds = %B24.preheader.i4505
  %n.vec.i4509 = and i64 %184, -16
  %minmax.ident.splatinsert.i4511 = insertelement <4 x i64> undef, i64 %.52.i4501, i32 0
  %minmax.ident.splat.i4512 = shufflevector <4 x i64> %minmax.ident.splatinsert.i4511, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %vector.body.i4536

vector.body.i4536:                                ; preds = %vector.body.i4536, %vector.ph.i4513
  %index.i4514 = phi i64 [ 0, %vector.ph.i4513 ], [ %index.next.i4535, %vector.body.i4536 ]
  %vec.phi.i4515 = phi <4 x i64> [ %minmax.ident.splat.i4512, %vector.ph.i4513 ], [ %197, %vector.body.i4536 ]
  %vec.phi26.i4516 = phi <4 x i64> [ %minmax.ident.splat.i4512, %vector.ph.i4513 ], [ %198, %vector.body.i4536 ]
  %vec.phi27.i4517 = phi <4 x i64> [ %minmax.ident.splat.i4512, %vector.ph.i4513 ], [ %199, %vector.body.i4536 ]
  %vec.phi28.i4518 = phi <4 x i64> [ %minmax.ident.splat.i4512, %vector.ph.i4513 ], [ %200, %vector.body.i4536 ]
  %sunkaddr10424 = mul i64 %index.i4514, 8
  %185 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4482 to i8*
  %sunkaddr10425 = getelementptr i8, i8* %185, i64 %sunkaddr10424
  %sunkaddr10426 = getelementptr i8, i8* %sunkaddr10425, i64 32
  %186 = bitcast i8* %sunkaddr10426 to <4 x i64>*
  %wide.load.i4522 = load <4 x i64>, <4 x i64>* %186, align 8, !noalias !65
  %sunkaddr10427 = mul i64 %index.i4514, 8
  %187 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4482 to i8*
  %sunkaddr10428 = getelementptr i8, i8* %187, i64 %sunkaddr10427
  %sunkaddr10429 = getelementptr i8, i8* %sunkaddr10428, i64 64
  %188 = bitcast i8* %sunkaddr10429 to <4 x i64>*
  %wide.load29.i4526 = load <4 x i64>, <4 x i64>* %188, align 8, !noalias !65
  %sunkaddr10430 = mul i64 %index.i4514, 8
  %189 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4482 to i8*
  %sunkaddr10431 = getelementptr i8, i8* %189, i64 %sunkaddr10430
  %sunkaddr10432 = getelementptr i8, i8* %sunkaddr10431, i64 96
  %190 = bitcast i8* %sunkaddr10432 to <4 x i64>*
  %wide.load30.i4530 = load <4 x i64>, <4 x i64>* %190, align 8, !noalias !65
  %sunkaddr10433 = mul i64 %index.i4514, 8
  %191 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4482 to i8*
  %sunkaddr10434 = getelementptr i8, i8* %191, i64 %sunkaddr10433
  %sunkaddr10435 = getelementptr i8, i8* %sunkaddr10434, i64 128
  %192 = bitcast i8* %sunkaddr10435 to <4 x i64>*
  %wide.load31.i4534 = load <4 x i64>, <4 x i64>* %192, align 8, !noalias !65
  %193 = icmp slt <4 x i64> %wide.load.i4522, %vec.phi.i4515
  %194 = icmp slt <4 x i64> %wide.load29.i4526, %vec.phi26.i4516
  %195 = icmp slt <4 x i64> %wide.load30.i4530, %vec.phi27.i4517
  %196 = icmp slt <4 x i64> %wide.load31.i4534, %vec.phi28.i4518
  %197 = select <4 x i1> %193, <4 x i64> %wide.load.i4522, <4 x i64> %vec.phi.i4515
  %198 = select <4 x i1> %194, <4 x i64> %wide.load29.i4526, <4 x i64> %vec.phi26.i4516
  %199 = select <4 x i1> %195, <4 x i64> %wide.load30.i4530, <4 x i64> %vec.phi27.i4517
  %200 = select <4 x i1> %196, <4 x i64> %wide.load31.i4534, <4 x i64> %vec.phi28.i4518
  %index.next.i4535 = add i64 %index.i4514, 16
  %201 = icmp eq i64 %n.vec.i4509, %index.next.i4535
  br i1 %201, label %middle.block.i4550, label %vector.body.i4536, !llvm.loop !47

middle.block.i4550:                               ; preds = %vector.body.i4536
  %ind.end.i4510 = or i64 %n.vec.i4509, 1
  %rdx.minmax.cmp.i4537 = icmp slt <4 x i64> %197, %198
  %rdx.minmax.select.i4538 = select <4 x i1> %rdx.minmax.cmp.i4537, <4 x i64> %197, <4 x i64> %198
  %rdx.minmax.cmp32.i4539 = icmp slt <4 x i64> %rdx.minmax.select.i4538, %199
  %rdx.minmax.select33.i4540 = select <4 x i1> %rdx.minmax.cmp32.i4539, <4 x i64> %rdx.minmax.select.i4538, <4 x i64> %199
  %rdx.minmax.cmp34.i4541 = icmp slt <4 x i64> %rdx.minmax.select33.i4540, %200
  %rdx.minmax.select35.i4542 = select <4 x i1> %rdx.minmax.cmp34.i4541, <4 x i64> %rdx.minmax.select33.i4540, <4 x i64> %200
  %rdx.shuf.i4543 = shufflevector <4 x i64> %rdx.minmax.select35.i4542, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp56.i4544 = icmp slt <4 x i64> %rdx.minmax.select35.i4542, %rdx.shuf.i4543
  %rdx.minmax.select57.i4545 = select <4 x i1> %rdx.minmax.cmp56.i4544, <4 x i64> %rdx.minmax.select35.i4542, <4 x i64> %rdx.shuf.i4543
  %rdx.shuf58.i4546 = shufflevector <4 x i64> %rdx.minmax.select57.i4545, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp59.i4547 = icmp slt <4 x i64> %rdx.minmax.select57.i4545, %rdx.shuf58.i4546
  %rdx.minmax.select60.i4548 = select <4 x i1> %rdx.minmax.cmp59.i4547, <4 x i64> %rdx.minmax.select57.i4545, <4 x i64> %rdx.shuf58.i4546
  %202 = extractelement <4 x i64> %rdx.minmax.select60.i4548, i32 0
  %cmp.n.i4549 = icmp eq i64 %184, %n.vec.i4509
  br i1 %cmp.n.i4549, label %B226.endif.endif.endif.endif.endif.endif.endif.endif, label %B24.i4496.preheader

B226.endif.endif.endif.endif.endif.endif.endif.endif: ; preds = %B24.i4496, %middle.block.i4550, %B0.endif.endif.endif.i4503
  %.1057.0.ph = phi i64 [ %202, %middle.block.i4550 ], [ %.52.i4501, %B0.endif.endif.endif.i4503 ], [ %return_val.3.1.i4494, %B24.i4496 ]
  tail call void @NRT_decref(i8* nonnull %.975)
  %.1103 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 32, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.1104 = icmp eq i8* %.1103, null
  br i1 %.1104, label %B226.endif.endif.endif.en...endif.endif.if, label %B226.endif.endif.endif.en...endif.endif.endif, !prof !3

B226.endif.endif.endif.en...endif.endif.if:       ; preds = %B226.endif.endif.endif.endif.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B226.endif.endif.endif.en...endif.endif.endif:    ; preds = %B226.endif.endif.endif.endif.endif.endif.endif.endif
  %.5.i4477 = getelementptr i8, i8* %.1103, i64 24
  %203 = bitcast i8* %.5.i4477 to { i64, i64, i8, i64 }**
  %.6.i44785192 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %203, align 8
  %.1116 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i44785192, i64 0, i32 1
  store i64 1, i64* %.1116, align 8
  %.6.i44765193 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %203, align 8
  %.112210436 = bitcast { i64, i64, i8, i64 }* %.6.i44765193 to i64*
  store i64 0, i64* %.112210436, align 8
  %.6.i44745194 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %203, align 8
  %.1128 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i44745194, i64 0, i32 2
  store i8 0, i8* %.1128, align 1
  %.6.i44705195 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %203, align 8
  %.1141 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i44705195, i64 0, i32 3
  store i64 0, i64* %.1141, align 1
  %.6.i44665197 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %203, align 8
  %.116810437 = bitcast { i64, i64, i8, i64 }* %.6.i44665197 to i64*
  store i64 1, i64* %.116810437, align 8
  %.6.i44625198 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %203, align 8
  %.1181 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i44625198, i64 0, i32 3
  store i64 %.1057.0.ph, i64* %.1181, align 8
  %.6.i23051996975 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %203, align 8
  %.1231697610438 = bitcast { i64, i64, i8, i64 }* %.6.i23051996975 to i64*
  %.12326977 = load i64, i64* %.1231697610438, align 8
  %.12336978 = icmp sgt i64 %.12326977, 0
  br i1 %.12336978, label %B254.lr.ph, label %B256

B254.lr.ph:                                       ; preds = %B226.endif.endif.endif.en...endif.endif.endif
  %min.iters.check7636 = icmp ult i64 %.12326977, 16
  br i1 %min.iters.check7636, label %B254.preheader, label %vector.ph7637

B254.preheader:                                   ; preds = %middle.block7633, %B254.lr.ph
  %temp.2.575.2.06980.ph = phi i64 [ 1, %B254.lr.ph ], [ %217, %middle.block7633 ]
  %.1197.06979.ph = phi i64 [ 0, %B254.lr.ph ], [ %n.vec7639, %middle.block7633 ]
  br label %B254

vector.ph7637:                                    ; preds = %B254.lr.ph
  %n.vec7639 = and i64 %.12326977, -16
  br label %vector.body7635

vector.body7635:                                  ; preds = %vector.body7635, %vector.ph7637
  %index7640 = phi i64 [ 0, %vector.ph7637 ], [ %index.next7641, %vector.body7635 ]
  %vec.phi7644 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7637 ], [ %212, %vector.body7635 ]
  %vec.phi7645 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7637 ], [ %213, %vector.body7635 ]
  %vec.phi7646 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7637 ], [ %214, %vector.body7635 ]
  %vec.phi7647 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7637 ], [ %215, %vector.body7635 ]
  %sunkaddr10439 = mul i64 %index7640, 8
  %204 = bitcast { i64, i64, i8, i64 }* %.6.i23051996975 to i8*
  %sunkaddr10440 = getelementptr i8, i8* %204, i64 %sunkaddr10439
  %sunkaddr10441 = getelementptr i8, i8* %sunkaddr10440, i64 24
  %205 = bitcast i8* %sunkaddr10441 to <4 x i64>*
  %wide.load7648 = load <4 x i64>, <4 x i64>* %205, align 8
  %sunkaddr10442 = mul i64 %index7640, 8
  %206 = bitcast { i64, i64, i8, i64 }* %.6.i23051996975 to i8*
  %sunkaddr10443 = getelementptr i8, i8* %206, i64 %sunkaddr10442
  %sunkaddr10444 = getelementptr i8, i8* %sunkaddr10443, i64 56
  %207 = bitcast i8* %sunkaddr10444 to <4 x i64>*
  %wide.load7649 = load <4 x i64>, <4 x i64>* %207, align 8
  %sunkaddr10445 = mul i64 %index7640, 8
  %208 = bitcast { i64, i64, i8, i64 }* %.6.i23051996975 to i8*
  %sunkaddr10446 = getelementptr i8, i8* %208, i64 %sunkaddr10445
  %sunkaddr10447 = getelementptr i8, i8* %sunkaddr10446, i64 88
  %209 = bitcast i8* %sunkaddr10447 to <4 x i64>*
  %wide.load7650 = load <4 x i64>, <4 x i64>* %209, align 8
  %sunkaddr10448 = mul i64 %index7640, 8
  %210 = bitcast { i64, i64, i8, i64 }* %.6.i23051996975 to i8*
  %sunkaddr10449 = getelementptr i8, i8* %210, i64 %sunkaddr10448
  %sunkaddr10450 = getelementptr i8, i8* %sunkaddr10449, i64 120
  %211 = bitcast i8* %sunkaddr10450 to <4 x i64>*
  %wide.load7651 = load <4 x i64>, <4 x i64>* %211, align 8
  %212 = mul <4 x i64> %wide.load7648, %vec.phi7644
  %213 = mul <4 x i64> %wide.load7649, %vec.phi7645
  %214 = mul <4 x i64> %wide.load7650, %vec.phi7646
  %215 = mul <4 x i64> %wide.load7651, %vec.phi7647
  %index.next7641 = add i64 %index7640, 16
  %216 = icmp eq i64 %n.vec7639, %index.next7641
  br i1 %216, label %middle.block7633, label %vector.body7635, !llvm.loop !69

middle.block7633:                                 ; preds = %vector.body7635
  %bin.rdx7652 = mul <4 x i64> %213, %212
  %bin.rdx7653 = mul <4 x i64> %214, %bin.rdx7652
  %bin.rdx7654 = mul <4 x i64> %215, %bin.rdx7653
  %rdx.shuf10087 = shufflevector <4 x i64> %bin.rdx7654, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10088 = mul <4 x i64> %bin.rdx7654, %rdx.shuf10087
  %rdx.shuf10089 = shufflevector <4 x i64> %bin.rdx10088, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10090 = mul <4 x i64> %bin.rdx10088, %rdx.shuf10089
  %217 = extractelement <4 x i64> %bin.rdx10090, i32 0
  %cmp.n7643 = icmp eq i64 %.12326977, %n.vec7639
  br i1 %cmp.n7643, label %B256, label %B254.preheader

B256.endif.endif.if:                              ; preds = %B256
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B256.endif.endif.endif:                           ; preds = %B256
  %.5.i4457 = getelementptr i8, i8* %.1303, i64 24
  %218 = bitcast i8* %.5.i4457 to { i64, i64, i8, i64 }**
  %.6.i44585200 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %218, align 8
  %.1316 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i44585200, i64 0, i32 1
  store i64 1, i64* %.1316, align 8
  %.6.i44565201 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %218, align 8
  %.132210451 = bitcast { i64, i64, i8, i64 }* %.6.i44565201 to i64*
  store i64 0, i64* %.132210451, align 8
  %.6.i44545202 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %218, align 8
  %.1328 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i44545202, i64 0, i32 2
  store i8 0, i8* %.1328, align 1
  %.6.i44505203 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %218, align 8
  %.1341 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i44505203, i64 0, i32 3
  store i64 0, i64* %.1341, align 1
  %.6.i44465205 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %218, align 8
  %.136810452 = bitcast { i64, i64, i8, i64 }* %.6.i44465205 to i64*
  store i64 1, i64* %.136810452, align 8
  %.6.i44425206 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %218, align 8
  %.1381 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i44425206, i64 0, i32 3
  store i64 %temp.2.575.2.0.lcssa, i64* %.1381, align 8
  %.6.i38652076967 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %218, align 8
  %.1431696810453 = bitcast { i64, i64, i8, i64 }* %.6.i38652076967 to i64*
  %.14326969 = load i64, i64* %.1431696810453, align 8
  %.14336970 = icmp sgt i64 %.14326969, 0
  br i1 %.14336970, label %B300.lr.ph, label %B302

B300.lr.ph:                                       ; preds = %B256.endif.endif.endif
  %min.iters.check7659 = icmp ult i64 %.14326969, 16
  br i1 %min.iters.check7659, label %B300.preheader, label %vector.ph7660

B300.preheader:                                   ; preds = %middle.block7656, %B300.lr.ph
  %temp.2.593.2.06972.ph = phi i64 [ 1, %B300.lr.ph ], [ %232, %middle.block7656 ]
  %.1397.06971.ph = phi i64 [ 0, %B300.lr.ph ], [ %n.vec7662, %middle.block7656 ]
  br label %B300

vector.ph7660:                                    ; preds = %B300.lr.ph
  %n.vec7662 = and i64 %.14326969, -16
  br label %vector.body7658

vector.body7658:                                  ; preds = %vector.body7658, %vector.ph7660
  %index7663 = phi i64 [ 0, %vector.ph7660 ], [ %index.next7664, %vector.body7658 ]
  %vec.phi7667 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7660 ], [ %227, %vector.body7658 ]
  %vec.phi7668 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7660 ], [ %228, %vector.body7658 ]
  %vec.phi7669 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7660 ], [ %229, %vector.body7658 ]
  %vec.phi7670 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7660 ], [ %230, %vector.body7658 ]
  %sunkaddr10454 = mul i64 %index7663, 8
  %219 = bitcast { i64, i64, i8, i64 }* %.6.i38652076967 to i8*
  %sunkaddr10455 = getelementptr i8, i8* %219, i64 %sunkaddr10454
  %sunkaddr10456 = getelementptr i8, i8* %sunkaddr10455, i64 24
  %220 = bitcast i8* %sunkaddr10456 to <4 x i64>*
  %wide.load7671 = load <4 x i64>, <4 x i64>* %220, align 8
  %sunkaddr10457 = mul i64 %index7663, 8
  %221 = bitcast { i64, i64, i8, i64 }* %.6.i38652076967 to i8*
  %sunkaddr10458 = getelementptr i8, i8* %221, i64 %sunkaddr10457
  %sunkaddr10459 = getelementptr i8, i8* %sunkaddr10458, i64 56
  %222 = bitcast i8* %sunkaddr10459 to <4 x i64>*
  %wide.load7672 = load <4 x i64>, <4 x i64>* %222, align 8
  %sunkaddr10460 = mul i64 %index7663, 8
  %223 = bitcast { i64, i64, i8, i64 }* %.6.i38652076967 to i8*
  %sunkaddr10461 = getelementptr i8, i8* %223, i64 %sunkaddr10460
  %sunkaddr10462 = getelementptr i8, i8* %sunkaddr10461, i64 88
  %224 = bitcast i8* %sunkaddr10462 to <4 x i64>*
  %wide.load7673 = load <4 x i64>, <4 x i64>* %224, align 8
  %sunkaddr10463 = mul i64 %index7663, 8
  %225 = bitcast { i64, i64, i8, i64 }* %.6.i38652076967 to i8*
  %sunkaddr10464 = getelementptr i8, i8* %225, i64 %sunkaddr10463
  %sunkaddr10465 = getelementptr i8, i8* %sunkaddr10464, i64 120
  %226 = bitcast i8* %sunkaddr10465 to <4 x i64>*
  %wide.load7674 = load <4 x i64>, <4 x i64>* %226, align 8
  %227 = mul <4 x i64> %wide.load7671, %vec.phi7667
  %228 = mul <4 x i64> %wide.load7672, %vec.phi7668
  %229 = mul <4 x i64> %wide.load7673, %vec.phi7669
  %230 = mul <4 x i64> %wide.load7674, %vec.phi7670
  %index.next7664 = add i64 %index7663, 16
  %231 = icmp eq i64 %n.vec7662, %index.next7664
  br i1 %231, label %middle.block7656, label %vector.body7658, !llvm.loop !70

middle.block7656:                                 ; preds = %vector.body7658
  %bin.rdx7675 = mul <4 x i64> %228, %227
  %bin.rdx7676 = mul <4 x i64> %229, %bin.rdx7675
  %bin.rdx7677 = mul <4 x i64> %230, %bin.rdx7676
  %rdx.shuf10091 = shufflevector <4 x i64> %bin.rdx7677, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10092 = mul <4 x i64> %bin.rdx7677, %rdx.shuf10091
  %rdx.shuf10093 = shufflevector <4 x i64> %bin.rdx10092, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10094 = mul <4 x i64> %bin.rdx10092, %rdx.shuf10093
  %232 = extractelement <4 x i64> %bin.rdx10094, i32 0
  %cmp.n7666 = icmp eq i64 %.14326969, %n.vec7662
  br i1 %cmp.n7666, label %B302, label %B300.preheader

B302.endif.endif.if:                              ; preds = %B302
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B302.endif.endif.endif:                           ; preds = %B302
  %.5.i4437 = getelementptr i8, i8* %.1503, i64 24
  %233 = bitcast i8* %.5.i4437 to { i64, i64, i8, i64 }**
  %.6.i44385208 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %233, align 8
  %.1516 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i44385208, i64 0, i32 1
  store i64 1, i64* %.1516, align 8
  %.6.i44365209 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %233, align 8
  %.152210466 = bitcast { i64, i64, i8, i64 }* %.6.i44365209 to i64*
  store i64 0, i64* %.152210466, align 8
  %.6.i44345210 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %233, align 8
  %.1528 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i44345210, i64 0, i32 2
  store i8 0, i8* %.1528, align 1
  %.6.i44305211 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %233, align 8
  %.1541 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i44305211, i64 0, i32 3
  store i64 0, i64* %.1541, align 1
  %.6.i44265213 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %233, align 8
  %.156810467 = bitcast { i64, i64, i8, i64 }* %.6.i44265213 to i64*
  store i64 1, i64* %.156810467, align 8
  %.6.i44225214 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %233, align 8
  %.1581 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i44225214, i64 0, i32 3
  store i64 %temp.2.593.2.0.lcssa, i64* %.1581, align 8
  %.6.i11.i4350 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %233, align 8, !noalias !71
  %.4061.i435110468 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4350 to i64*
  %.41.i4352 = load i64, i64* %.4061.i435110468, align 8, !noalias !71
  %.42.i4353 = icmp sgt i64 %.41.i4352, 0
  br i1 %.42.i4353, label %B0.endif.endif.endif.i4371, label %B0.endif.endif.endif.if.if, !prof !45

B24.i4364:                                        ; preds = %B24.i4364.preheader, %B24.i4364
  %return_val.2.025.i4354 = phi i64 [ %return_val.3.1.i4362, %B24.i4364 ], [ %return_val.2.025.i4354.ph, %B24.i4364.preheader ]
  %.14.024.i4355 = phi i64 [ %.129.i4360, %B24.i4364 ], [ %.14.024.i4355.ph, %B24.i4364.preheader ]
  %sunkaddr10469 = mul i64 %.14.024.i4355, 8
  %234 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4350 to i8*
  %sunkaddr10470 = getelementptr i8, i8* %234, i64 %sunkaddr10469
  %sunkaddr10471 = getelementptr i8, i8* %sunkaddr10470, i64 24
  %235 = bitcast i8* %sunkaddr10471 to i64*
  %.126.i4359 = load i64, i64* %235, align 8, !noalias !71
  %.129.i4360 = add nuw nsw i64 %.14.024.i4355, 1
  %.6.i7.not.i4361 = icmp slt i64 %.126.i4359, %return_val.2.025.i4354
  %return_val.3.1.i4362 = select i1 %.6.i7.not.i4361, i64 %.126.i4359, i64 %return_val.2.025.i4354
  %exitcond.not.i4363 = icmp eq i64 %.41.i4352, %.129.i4360
  br i1 %exitcond.not.i4363, label %B302.endif.endif.endif.endif, label %B24.i4364, !llvm.loop !46

B0.endif.endif.endif.i4371:                       ; preds = %B302.endif.endif.endif
  %.50.i4368 = getelementptr { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11.i4350, i64 0, i32 3
  %.52.i4369 = load i64, i64* %.50.i4368, align 8, !noalias !71
  %.11623.not.i4370 = icmp eq i64 %.41.i4352, 1
  br i1 %.11623.not.i4370, label %B302.endif.endif.endif.endif, label %B24.preheader.i4373

B24.preheader.i4373:                              ; preds = %B0.endif.endif.endif.i4371
  %236 = add nsw i64 %.41.i4352, -1
  %min.iters.check.i4372 = icmp ult i64 %236, 16
  br i1 %min.iters.check.i4372, label %B24.i4364.preheader, label %vector.ph.i4381

B24.i4364.preheader:                              ; preds = %middle.block.i4418, %B24.preheader.i4373
  %return_val.2.025.i4354.ph = phi i64 [ %254, %middle.block.i4418 ], [ %.52.i4369, %B24.preheader.i4373 ]
  %.14.024.i4355.ph = phi i64 [ %ind.end.i4378, %middle.block.i4418 ], [ 1, %B24.preheader.i4373 ]
  br label %B24.i4364

vector.ph.i4381:                                  ; preds = %B24.preheader.i4373
  %n.vec.i4377 = and i64 %236, -16
  %minmax.ident.splatinsert.i4379 = insertelement <4 x i64> undef, i64 %.52.i4369, i32 0
  %minmax.ident.splat.i4380 = shufflevector <4 x i64> %minmax.ident.splatinsert.i4379, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %vector.body.i4404

vector.body.i4404:                                ; preds = %vector.body.i4404, %vector.ph.i4381
  %index.i4382 = phi i64 [ 0, %vector.ph.i4381 ], [ %index.next.i4403, %vector.body.i4404 ]
  %vec.phi.i4383 = phi <4 x i64> [ %minmax.ident.splat.i4380, %vector.ph.i4381 ], [ %249, %vector.body.i4404 ]
  %vec.phi26.i4384 = phi <4 x i64> [ %minmax.ident.splat.i4380, %vector.ph.i4381 ], [ %250, %vector.body.i4404 ]
  %vec.phi27.i4385 = phi <4 x i64> [ %minmax.ident.splat.i4380, %vector.ph.i4381 ], [ %251, %vector.body.i4404 ]
  %vec.phi28.i4386 = phi <4 x i64> [ %minmax.ident.splat.i4380, %vector.ph.i4381 ], [ %252, %vector.body.i4404 ]
  %sunkaddr10472 = mul i64 %index.i4382, 8
  %237 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4350 to i8*
  %sunkaddr10473 = getelementptr i8, i8* %237, i64 %sunkaddr10472
  %sunkaddr10474 = getelementptr i8, i8* %sunkaddr10473, i64 32
  %238 = bitcast i8* %sunkaddr10474 to <4 x i64>*
  %wide.load.i4390 = load <4 x i64>, <4 x i64>* %238, align 8, !noalias !71
  %sunkaddr10475 = mul i64 %index.i4382, 8
  %239 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4350 to i8*
  %sunkaddr10476 = getelementptr i8, i8* %239, i64 %sunkaddr10475
  %sunkaddr10477 = getelementptr i8, i8* %sunkaddr10476, i64 64
  %240 = bitcast i8* %sunkaddr10477 to <4 x i64>*
  %wide.load29.i4394 = load <4 x i64>, <4 x i64>* %240, align 8, !noalias !71
  %sunkaddr10478 = mul i64 %index.i4382, 8
  %241 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4350 to i8*
  %sunkaddr10479 = getelementptr i8, i8* %241, i64 %sunkaddr10478
  %sunkaddr10480 = getelementptr i8, i8* %sunkaddr10479, i64 96
  %242 = bitcast i8* %sunkaddr10480 to <4 x i64>*
  %wide.load30.i4398 = load <4 x i64>, <4 x i64>* %242, align 8, !noalias !71
  %sunkaddr10481 = mul i64 %index.i4382, 8
  %243 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4350 to i8*
  %sunkaddr10482 = getelementptr i8, i8* %243, i64 %sunkaddr10481
  %sunkaddr10483 = getelementptr i8, i8* %sunkaddr10482, i64 128
  %244 = bitcast i8* %sunkaddr10483 to <4 x i64>*
  %wide.load31.i4402 = load <4 x i64>, <4 x i64>* %244, align 8, !noalias !71
  %245 = icmp slt <4 x i64> %wide.load.i4390, %vec.phi.i4383
  %246 = icmp slt <4 x i64> %wide.load29.i4394, %vec.phi26.i4384
  %247 = icmp slt <4 x i64> %wide.load30.i4398, %vec.phi27.i4385
  %248 = icmp slt <4 x i64> %wide.load31.i4402, %vec.phi28.i4386
  %249 = select <4 x i1> %245, <4 x i64> %wide.load.i4390, <4 x i64> %vec.phi.i4383
  %250 = select <4 x i1> %246, <4 x i64> %wide.load29.i4394, <4 x i64> %vec.phi26.i4384
  %251 = select <4 x i1> %247, <4 x i64> %wide.load30.i4398, <4 x i64> %vec.phi27.i4385
  %252 = select <4 x i1> %248, <4 x i64> %wide.load31.i4402, <4 x i64> %vec.phi28.i4386
  %index.next.i4403 = add i64 %index.i4382, 16
  %253 = icmp eq i64 %n.vec.i4377, %index.next.i4403
  br i1 %253, label %middle.block.i4418, label %vector.body.i4404, !llvm.loop !47

middle.block.i4418:                               ; preds = %vector.body.i4404
  %ind.end.i4378 = or i64 %n.vec.i4377, 1
  %rdx.minmax.cmp.i4405 = icmp slt <4 x i64> %249, %250
  %rdx.minmax.select.i4406 = select <4 x i1> %rdx.minmax.cmp.i4405, <4 x i64> %249, <4 x i64> %250
  %rdx.minmax.cmp32.i4407 = icmp slt <4 x i64> %rdx.minmax.select.i4406, %251
  %rdx.minmax.select33.i4408 = select <4 x i1> %rdx.minmax.cmp32.i4407, <4 x i64> %rdx.minmax.select.i4406, <4 x i64> %251
  %rdx.minmax.cmp34.i4409 = icmp slt <4 x i64> %rdx.minmax.select33.i4408, %252
  %rdx.minmax.select35.i4410 = select <4 x i1> %rdx.minmax.cmp34.i4409, <4 x i64> %rdx.minmax.select33.i4408, <4 x i64> %252
  %rdx.shuf.i4411 = shufflevector <4 x i64> %rdx.minmax.select35.i4410, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp56.i4412 = icmp slt <4 x i64> %rdx.minmax.select35.i4410, %rdx.shuf.i4411
  %rdx.minmax.select57.i4413 = select <4 x i1> %rdx.minmax.cmp56.i4412, <4 x i64> %rdx.minmax.select35.i4410, <4 x i64> %rdx.shuf.i4411
  %rdx.shuf58.i4414 = shufflevector <4 x i64> %rdx.minmax.select57.i4413, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp59.i4415 = icmp slt <4 x i64> %rdx.minmax.select57.i4413, %rdx.shuf58.i4414
  %rdx.minmax.select60.i4416 = select <4 x i1> %rdx.minmax.cmp59.i4415, <4 x i64> %rdx.minmax.select57.i4413, <4 x i64> %rdx.shuf58.i4414
  %254 = extractelement <4 x i64> %rdx.minmax.select60.i4416, i32 0
  %cmp.n.i4417 = icmp eq i64 %236, %n.vec.i4377
  br i1 %cmp.n.i4417, label %B302.endif.endif.endif.endif, label %B24.i4364.preheader

B302.endif.endif.endif.endif:                     ; preds = %B24.i4364, %middle.block.i4418, %B0.endif.endif.endif.i4371
  %.1585.0.ph = phi i64 [ %254, %middle.block.i4418 ], [ %.52.i4369, %B0.endif.endif.endif.i4371 ], [ %return_val.3.1.i4362, %B24.i4364 ]
  tail call void @NRT_decref(i8* nonnull %.1503)
  %.1631 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 32, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.1632 = icmp eq i8* %.1631, null
  br i1 %.1632, label %B302.endif.endif.endif.endif.endif.endif.if, label %B302.endif.endif.endif.endif.endif.endif.endif, !prof !3

B302.endif.endif.endif.endif.endif.endif.if:      ; preds = %B302.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B302.endif.endif.endif.endif.endif.endif.endif:   ; preds = %B302.endif.endif.endif.endif
  %.5.i4345 = getelementptr i8, i8* %.1631, i64 24
  %255 = bitcast i8* %.5.i4345 to { i64, i64, i8, i64 }**
  %.6.i43465215 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %255, align 8
  %.1644 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i43465215, i64 0, i32 1
  store i64 1, i64* %.1644, align 8
  %.6.i43445216 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %255, align 8
  %.165010484 = bitcast { i64, i64, i8, i64 }* %.6.i43445216 to i64*
  store i64 0, i64* %.165010484, align 8
  %.6.i43425217 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %255, align 8
  %.1656 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i43425217, i64 0, i32 2
  store i8 0, i8* %.1656, align 1
  %.6.i43385218 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %255, align 8
  %.1669 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i43385218, i64 0, i32 3
  store i64 0, i64* %.1669, align 1
  %.6.i43345220 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %255, align 8
  %.169610485 = bitcast { i64, i64, i8, i64 }* %.6.i43345220 to i64*
  store i64 1, i64* %.169610485, align 8
  %.6.i43305221 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %255, align 8
  %.1709 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i43305221, i64 0, i32 3
  store i64 %.1585.0.ph, i64* %.1709, align 8
  %.6.i11.i4258 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %255, align 8, !noalias !75
  %.4061.i425910486 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4258 to i64*
  %.41.i4260 = load i64, i64* %.4061.i425910486, align 8, !noalias !75
  %.42.i4261 = icmp sgt i64 %.41.i4260, 0
  br i1 %.42.i4261, label %B0.endif.endif.endif.i4279, label %B0.endif.endif.endif.if.if, !prof !45

B24.i4272:                                        ; preds = %B24.i4272.preheader, %B24.i4272
  %return_val.2.025.i4262 = phi i64 [ %return_val.3.1.i4270, %B24.i4272 ], [ %return_val.2.025.i4262.ph, %B24.i4272.preheader ]
  %.14.024.i4263 = phi i64 [ %.129.i4268, %B24.i4272 ], [ %.14.024.i4263.ph, %B24.i4272.preheader ]
  %sunkaddr10487 = mul i64 %.14.024.i4263, 8
  %256 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4258 to i8*
  %sunkaddr10488 = getelementptr i8, i8* %256, i64 %sunkaddr10487
  %sunkaddr10489 = getelementptr i8, i8* %sunkaddr10488, i64 24
  %257 = bitcast i8* %sunkaddr10489 to i64*
  %.126.i4267 = load i64, i64* %257, align 8, !noalias !75
  %.129.i4268 = add nuw nsw i64 %.14.024.i4263, 1
  %.6.i7.not.i4269 = icmp sgt i64 %.126.i4267, %return_val.2.025.i4262
  %return_val.3.1.i4270 = select i1 %.6.i7.not.i4269, i64 %.126.i4267, i64 %return_val.2.025.i4262
  %exitcond.not.i4271 = icmp eq i64 %.41.i4260, %.129.i4268
  br i1 %exitcond.not.i4271, label %B302.endif.endif.endif.endif.endif.endif.endif.endif, label %B24.i4272, !llvm.loop !58

B0.endif.endif.endif.i4279:                       ; preds = %B302.endif.endif.endif.endif.endif.endif.endif
  %.50.i4276 = getelementptr { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11.i4258, i64 0, i32 3
  %.52.i4277 = load i64, i64* %.50.i4276, align 8, !noalias !75
  %.11623.not.i4278 = icmp eq i64 %.41.i4260, 1
  br i1 %.11623.not.i4278, label %B302.endif.endif.endif.endif.endif.endif.endif.endif, label %B24.preheader.i4281

B24.preheader.i4281:                              ; preds = %B0.endif.endif.endif.i4279
  %258 = add nsw i64 %.41.i4260, -1
  %min.iters.check.i4280 = icmp ult i64 %258, 16
  br i1 %min.iters.check.i4280, label %B24.i4272.preheader, label %vector.ph.i4289

B24.i4272.preheader:                              ; preds = %middle.block.i4326, %B24.preheader.i4281
  %return_val.2.025.i4262.ph = phi i64 [ %276, %middle.block.i4326 ], [ %.52.i4277, %B24.preheader.i4281 ]
  %.14.024.i4263.ph = phi i64 [ %ind.end.i4286, %middle.block.i4326 ], [ 1, %B24.preheader.i4281 ]
  br label %B24.i4272

vector.ph.i4289:                                  ; preds = %B24.preheader.i4281
  %n.vec.i4285 = and i64 %258, -16
  %minmax.ident.splatinsert.i4287 = insertelement <4 x i64> undef, i64 %.52.i4277, i32 0
  %minmax.ident.splat.i4288 = shufflevector <4 x i64> %minmax.ident.splatinsert.i4287, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %vector.body.i4312

vector.body.i4312:                                ; preds = %vector.body.i4312, %vector.ph.i4289
  %index.i4290 = phi i64 [ 0, %vector.ph.i4289 ], [ %index.next.i4311, %vector.body.i4312 ]
  %vec.phi.i4291 = phi <4 x i64> [ %minmax.ident.splat.i4288, %vector.ph.i4289 ], [ %271, %vector.body.i4312 ]
  %vec.phi26.i4292 = phi <4 x i64> [ %minmax.ident.splat.i4288, %vector.ph.i4289 ], [ %272, %vector.body.i4312 ]
  %vec.phi27.i4293 = phi <4 x i64> [ %minmax.ident.splat.i4288, %vector.ph.i4289 ], [ %273, %vector.body.i4312 ]
  %vec.phi28.i4294 = phi <4 x i64> [ %minmax.ident.splat.i4288, %vector.ph.i4289 ], [ %274, %vector.body.i4312 ]
  %sunkaddr10490 = mul i64 %index.i4290, 8
  %259 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4258 to i8*
  %sunkaddr10491 = getelementptr i8, i8* %259, i64 %sunkaddr10490
  %sunkaddr10492 = getelementptr i8, i8* %sunkaddr10491, i64 32
  %260 = bitcast i8* %sunkaddr10492 to <4 x i64>*
  %wide.load.i4298 = load <4 x i64>, <4 x i64>* %260, align 8, !noalias !75
  %sunkaddr10493 = mul i64 %index.i4290, 8
  %261 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4258 to i8*
  %sunkaddr10494 = getelementptr i8, i8* %261, i64 %sunkaddr10493
  %sunkaddr10495 = getelementptr i8, i8* %sunkaddr10494, i64 64
  %262 = bitcast i8* %sunkaddr10495 to <4 x i64>*
  %wide.load29.i4302 = load <4 x i64>, <4 x i64>* %262, align 8, !noalias !75
  %sunkaddr10496 = mul i64 %index.i4290, 8
  %263 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4258 to i8*
  %sunkaddr10497 = getelementptr i8, i8* %263, i64 %sunkaddr10496
  %sunkaddr10498 = getelementptr i8, i8* %sunkaddr10497, i64 96
  %264 = bitcast i8* %sunkaddr10498 to <4 x i64>*
  %wide.load30.i4306 = load <4 x i64>, <4 x i64>* %264, align 8, !noalias !75
  %sunkaddr10499 = mul i64 %index.i4290, 8
  %265 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4258 to i8*
  %sunkaddr10500 = getelementptr i8, i8* %265, i64 %sunkaddr10499
  %sunkaddr10501 = getelementptr i8, i8* %sunkaddr10500, i64 128
  %266 = bitcast i8* %sunkaddr10501 to <4 x i64>*
  %wide.load31.i4310 = load <4 x i64>, <4 x i64>* %266, align 8, !noalias !75
  %267 = icmp sgt <4 x i64> %wide.load.i4298, %vec.phi.i4291
  %268 = icmp sgt <4 x i64> %wide.load29.i4302, %vec.phi26.i4292
  %269 = icmp sgt <4 x i64> %wide.load30.i4306, %vec.phi27.i4293
  %270 = icmp sgt <4 x i64> %wide.load31.i4310, %vec.phi28.i4294
  %271 = select <4 x i1> %267, <4 x i64> %wide.load.i4298, <4 x i64> %vec.phi.i4291
  %272 = select <4 x i1> %268, <4 x i64> %wide.load29.i4302, <4 x i64> %vec.phi26.i4292
  %273 = select <4 x i1> %269, <4 x i64> %wide.load30.i4306, <4 x i64> %vec.phi27.i4293
  %274 = select <4 x i1> %270, <4 x i64> %wide.load31.i4310, <4 x i64> %vec.phi28.i4294
  %index.next.i4311 = add i64 %index.i4290, 16
  %275 = icmp eq i64 %n.vec.i4285, %index.next.i4311
  br i1 %275, label %middle.block.i4326, label %vector.body.i4312, !llvm.loop !59

middle.block.i4326:                               ; preds = %vector.body.i4312
  %ind.end.i4286 = or i64 %n.vec.i4285, 1
  %rdx.minmax.cmp.i4313 = icmp sgt <4 x i64> %271, %272
  %rdx.minmax.select.i4314 = select <4 x i1> %rdx.minmax.cmp.i4313, <4 x i64> %271, <4 x i64> %272
  %rdx.minmax.cmp32.i4315 = icmp sgt <4 x i64> %rdx.minmax.select.i4314, %273
  %rdx.minmax.select33.i4316 = select <4 x i1> %rdx.minmax.cmp32.i4315, <4 x i64> %rdx.minmax.select.i4314, <4 x i64> %273
  %rdx.minmax.cmp34.i4317 = icmp sgt <4 x i64> %rdx.minmax.select33.i4316, %274
  %rdx.minmax.select35.i4318 = select <4 x i1> %rdx.minmax.cmp34.i4317, <4 x i64> %rdx.minmax.select33.i4316, <4 x i64> %274
  %rdx.shuf.i4319 = shufflevector <4 x i64> %rdx.minmax.select35.i4318, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp56.i4320 = icmp sgt <4 x i64> %rdx.minmax.select35.i4318, %rdx.shuf.i4319
  %rdx.minmax.select57.i4321 = select <4 x i1> %rdx.minmax.cmp56.i4320, <4 x i64> %rdx.minmax.select35.i4318, <4 x i64> %rdx.shuf.i4319
  %rdx.shuf58.i4322 = shufflevector <4 x i64> %rdx.minmax.select57.i4321, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp59.i4323 = icmp sgt <4 x i64> %rdx.minmax.select57.i4321, %rdx.shuf58.i4322
  %rdx.minmax.select60.i4324 = select <4 x i1> %rdx.minmax.cmp59.i4323, <4 x i64> %rdx.minmax.select57.i4321, <4 x i64> %rdx.shuf58.i4322
  %276 = extractelement <4 x i64> %rdx.minmax.select60.i4324, i32 0
  %cmp.n.i4325 = icmp eq i64 %258, %n.vec.i4285
  br i1 %cmp.n.i4325, label %B302.endif.endif.endif.endif.endif.endif.endif.endif, label %B24.i4272.preheader

B302.endif.endif.endif.endif.endif.endif.endif.endif: ; preds = %B24.i4272, %middle.block.i4326, %B0.endif.endif.endif.i4279
  %.1713.0.ph = phi i64 [ %276, %middle.block.i4326 ], [ %.52.i4277, %B0.endif.endif.endif.i4279 ], [ %return_val.3.1.i4270, %B24.i4272 ]
  tail call void @NRT_decref(i8* nonnull %.1631)
  %.1759 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 32, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.1760 = icmp eq i8* %.1759, null
  br i1 %.1760, label %B302.endif.endif.endif.en...endif.endif.if, label %B302.endif.endif.endif.en...endif.endif.endif, !prof !3

B302.endif.endif.endif.en...endif.endif.if:       ; preds = %B302.endif.endif.endif.endif.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B302.endif.endif.endif.en...endif.endif.endif:    ; preds = %B302.endif.endif.endif.endif.endif.endif.endif.endif
  %.5.i4253 = getelementptr i8, i8* %.1759, i64 24
  %277 = bitcast i8* %.5.i4253 to { i64, i64, i8, i64 }**
  %.6.i42545222 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %277, align 8
  %.1772 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i42545222, i64 0, i32 1
  store i64 1, i64* %.1772, align 8
  %.6.i42525223 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %277, align 8
  %.177810502 = bitcast { i64, i64, i8, i64 }* %.6.i42525223 to i64*
  store i64 0, i64* %.177810502, align 8
  %.6.i42505224 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %277, align 8
  %.1784 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i42505224, i64 0, i32 2
  store i8 0, i8* %.1784, align 1
  %.6.i42465225 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %277, align 8
  %.1797 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i42465225, i64 0, i32 3
  store i64 0, i64* %.1797, align 1
  %.6.i42425227 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %277, align 8
  %.182410503 = bitcast { i64, i64, i8, i64 }* %.6.i42425227 to i64*
  store i64 1, i64* %.182410503, align 8
  %.6.i42385228 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %277, align 8
  %.1837 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i42385228, i64 0, i32 3
  store i64 %.1713.0.ph, i64* %.1837, align 8
  %.6.i11.i4166 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %277, align 8, !noalias !79
  %.4061.i416710504 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4166 to i64*
  %.41.i4168 = load i64, i64* %.4061.i416710504, align 8, !noalias !79
  %.42.i4169 = icmp sgt i64 %.41.i4168, 0
  br i1 %.42.i4169, label %B0.endif.endif.endif.i4187, label %B0.endif.endif.endif.if.if, !prof !45

B24.i4180:                                        ; preds = %B24.i4180.preheader, %B24.i4180
  %return_val.2.025.i4170 = phi i64 [ %return_val.3.1.i4178, %B24.i4180 ], [ %return_val.2.025.i4170.ph, %B24.i4180.preheader ]
  %.14.024.i4171 = phi i64 [ %.129.i4176, %B24.i4180 ], [ %.14.024.i4171.ph, %B24.i4180.preheader ]
  %sunkaddr10505 = mul i64 %.14.024.i4171, 8
  %278 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4166 to i8*
  %sunkaddr10506 = getelementptr i8, i8* %278, i64 %sunkaddr10505
  %sunkaddr10507 = getelementptr i8, i8* %sunkaddr10506, i64 24
  %279 = bitcast i8* %sunkaddr10507 to i64*
  %.126.i4175 = load i64, i64* %279, align 8, !noalias !79
  %.129.i4176 = add nuw nsw i64 %.14.024.i4171, 1
  %.6.i7.not.i4177 = icmp sgt i64 %.126.i4175, %return_val.2.025.i4170
  %return_val.3.1.i4178 = select i1 %.6.i7.not.i4177, i64 %.126.i4175, i64 %return_val.2.025.i4170
  %exitcond.not.i4179 = icmp eq i64 %.41.i4168, %.129.i4176
  br i1 %exitcond.not.i4179, label %B302.endif.endif.endif.en...endif.endif.endif.endif, label %B24.i4180, !llvm.loop !58

B0.endif.endif.endif.i4187:                       ; preds = %B302.endif.endif.endif.en...endif.endif.endif
  %.50.i4184 = getelementptr { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11.i4166, i64 0, i32 3
  %.52.i4185 = load i64, i64* %.50.i4184, align 8, !noalias !79
  %.11623.not.i4186 = icmp eq i64 %.41.i4168, 1
  br i1 %.11623.not.i4186, label %B302.endif.endif.endif.en...endif.endif.endif.endif, label %B24.preheader.i4189

B24.preheader.i4189:                              ; preds = %B0.endif.endif.endif.i4187
  %280 = add nsw i64 %.41.i4168, -1
  %min.iters.check.i4188 = icmp ult i64 %280, 16
  br i1 %min.iters.check.i4188, label %B24.i4180.preheader, label %vector.ph.i4197

B24.i4180.preheader:                              ; preds = %middle.block.i4234, %B24.preheader.i4189
  %return_val.2.025.i4170.ph = phi i64 [ %298, %middle.block.i4234 ], [ %.52.i4185, %B24.preheader.i4189 ]
  %.14.024.i4171.ph = phi i64 [ %ind.end.i4194, %middle.block.i4234 ], [ 1, %B24.preheader.i4189 ]
  br label %B24.i4180

vector.ph.i4197:                                  ; preds = %B24.preheader.i4189
  %n.vec.i4193 = and i64 %280, -16
  %minmax.ident.splatinsert.i4195 = insertelement <4 x i64> undef, i64 %.52.i4185, i32 0
  %minmax.ident.splat.i4196 = shufflevector <4 x i64> %minmax.ident.splatinsert.i4195, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %vector.body.i4220

vector.body.i4220:                                ; preds = %vector.body.i4220, %vector.ph.i4197
  %index.i4198 = phi i64 [ 0, %vector.ph.i4197 ], [ %index.next.i4219, %vector.body.i4220 ]
  %vec.phi.i4199 = phi <4 x i64> [ %minmax.ident.splat.i4196, %vector.ph.i4197 ], [ %293, %vector.body.i4220 ]
  %vec.phi26.i4200 = phi <4 x i64> [ %minmax.ident.splat.i4196, %vector.ph.i4197 ], [ %294, %vector.body.i4220 ]
  %vec.phi27.i4201 = phi <4 x i64> [ %minmax.ident.splat.i4196, %vector.ph.i4197 ], [ %295, %vector.body.i4220 ]
  %vec.phi28.i4202 = phi <4 x i64> [ %minmax.ident.splat.i4196, %vector.ph.i4197 ], [ %296, %vector.body.i4220 ]
  %sunkaddr10508 = mul i64 %index.i4198, 8
  %281 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4166 to i8*
  %sunkaddr10509 = getelementptr i8, i8* %281, i64 %sunkaddr10508
  %sunkaddr10510 = getelementptr i8, i8* %sunkaddr10509, i64 32
  %282 = bitcast i8* %sunkaddr10510 to <4 x i64>*
  %wide.load.i4206 = load <4 x i64>, <4 x i64>* %282, align 8, !noalias !79
  %sunkaddr10511 = mul i64 %index.i4198, 8
  %283 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4166 to i8*
  %sunkaddr10512 = getelementptr i8, i8* %283, i64 %sunkaddr10511
  %sunkaddr10513 = getelementptr i8, i8* %sunkaddr10512, i64 64
  %284 = bitcast i8* %sunkaddr10513 to <4 x i64>*
  %wide.load29.i4210 = load <4 x i64>, <4 x i64>* %284, align 8, !noalias !79
  %sunkaddr10514 = mul i64 %index.i4198, 8
  %285 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4166 to i8*
  %sunkaddr10515 = getelementptr i8, i8* %285, i64 %sunkaddr10514
  %sunkaddr10516 = getelementptr i8, i8* %sunkaddr10515, i64 96
  %286 = bitcast i8* %sunkaddr10516 to <4 x i64>*
  %wide.load30.i4214 = load <4 x i64>, <4 x i64>* %286, align 8, !noalias !79
  %sunkaddr10517 = mul i64 %index.i4198, 8
  %287 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4166 to i8*
  %sunkaddr10518 = getelementptr i8, i8* %287, i64 %sunkaddr10517
  %sunkaddr10519 = getelementptr i8, i8* %sunkaddr10518, i64 128
  %288 = bitcast i8* %sunkaddr10519 to <4 x i64>*
  %wide.load31.i4218 = load <4 x i64>, <4 x i64>* %288, align 8, !noalias !79
  %289 = icmp sgt <4 x i64> %wide.load.i4206, %vec.phi.i4199
  %290 = icmp sgt <4 x i64> %wide.load29.i4210, %vec.phi26.i4200
  %291 = icmp sgt <4 x i64> %wide.load30.i4214, %vec.phi27.i4201
  %292 = icmp sgt <4 x i64> %wide.load31.i4218, %vec.phi28.i4202
  %293 = select <4 x i1> %289, <4 x i64> %wide.load.i4206, <4 x i64> %vec.phi.i4199
  %294 = select <4 x i1> %290, <4 x i64> %wide.load29.i4210, <4 x i64> %vec.phi26.i4200
  %295 = select <4 x i1> %291, <4 x i64> %wide.load30.i4214, <4 x i64> %vec.phi27.i4201
  %296 = select <4 x i1> %292, <4 x i64> %wide.load31.i4218, <4 x i64> %vec.phi28.i4202
  %index.next.i4219 = add i64 %index.i4198, 16
  %297 = icmp eq i64 %n.vec.i4193, %index.next.i4219
  br i1 %297, label %middle.block.i4234, label %vector.body.i4220, !llvm.loop !59

middle.block.i4234:                               ; preds = %vector.body.i4220
  %ind.end.i4194 = or i64 %n.vec.i4193, 1
  %rdx.minmax.cmp.i4221 = icmp sgt <4 x i64> %293, %294
  %rdx.minmax.select.i4222 = select <4 x i1> %rdx.minmax.cmp.i4221, <4 x i64> %293, <4 x i64> %294
  %rdx.minmax.cmp32.i4223 = icmp sgt <4 x i64> %rdx.minmax.select.i4222, %295
  %rdx.minmax.select33.i4224 = select <4 x i1> %rdx.minmax.cmp32.i4223, <4 x i64> %rdx.minmax.select.i4222, <4 x i64> %295
  %rdx.minmax.cmp34.i4225 = icmp sgt <4 x i64> %rdx.minmax.select33.i4224, %296
  %rdx.minmax.select35.i4226 = select <4 x i1> %rdx.minmax.cmp34.i4225, <4 x i64> %rdx.minmax.select33.i4224, <4 x i64> %296
  %rdx.shuf.i4227 = shufflevector <4 x i64> %rdx.minmax.select35.i4226, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp56.i4228 = icmp sgt <4 x i64> %rdx.minmax.select35.i4226, %rdx.shuf.i4227
  %rdx.minmax.select57.i4229 = select <4 x i1> %rdx.minmax.cmp56.i4228, <4 x i64> %rdx.minmax.select35.i4226, <4 x i64> %rdx.shuf.i4227
  %rdx.shuf58.i4230 = shufflevector <4 x i64> %rdx.minmax.select57.i4229, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp59.i4231 = icmp sgt <4 x i64> %rdx.minmax.select57.i4229, %rdx.shuf58.i4230
  %rdx.minmax.select60.i4232 = select <4 x i1> %rdx.minmax.cmp59.i4231, <4 x i64> %rdx.minmax.select57.i4229, <4 x i64> %rdx.shuf58.i4230
  %298 = extractelement <4 x i64> %rdx.minmax.select60.i4232, i32 0
  %cmp.n.i4233 = icmp eq i64 %280, %n.vec.i4193
  br i1 %cmp.n.i4233, label %B302.endif.endif.endif.en...endif.endif.endif.endif, label %B24.i4180.preheader

B302.endif.endif.endif.en...endif.endif.endif.endif: ; preds = %B24.i4180, %middle.block.i4234, %B0.endif.endif.endif.i4187
  %.1841.0.ph = phi i64 [ %298, %middle.block.i4234 ], [ %.52.i4185, %B0.endif.endif.endif.i4187 ], [ %return_val.3.1.i4178, %B24.i4180 ]
  tail call void @NRT_decref(i8* nonnull %.1759)
  %.1887 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 32, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.1888 = icmp eq i8* %.1887, null
  br i1 %.1888, label %B302.endif.endif.endif.en...endif.1.endif.if, label %B302.endif.endif.endif.en...endif.1.endif.endif, !prof !3

B302.endif.endif.endif.en...endif.1.endif.if:     ; preds = %B302.endif.endif.endif.en...endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B302.endif.endif.endif.en...endif.1.endif.endif:  ; preds = %B302.endif.endif.endif.en...endif.endif.endif.endif
  %.5.i4161 = getelementptr i8, i8* %.1887, i64 24
  %299 = bitcast i8* %.5.i4161 to { i64, i64, i8, i64 }**
  %.6.i41625229 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %299, align 8
  %.1900 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i41625229, i64 0, i32 1
  store i64 1, i64* %.1900, align 8
  %.6.i41605230 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %299, align 8
  %.190610520 = bitcast { i64, i64, i8, i64 }* %.6.i41605230 to i64*
  store i64 0, i64* %.190610520, align 8
  %.6.i41585231 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %299, align 8
  %.1912 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i41585231, i64 0, i32 2
  store i8 0, i8* %.1912, align 1
  %.6.i41545232 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %299, align 8
  %.1925 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i41545232, i64 0, i32 3
  store i64 0, i64* %.1925, align 1
  %.6.i41505234 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %299, align 8
  %.195210521 = bitcast { i64, i64, i8, i64 }* %.6.i41505234 to i64*
  store i64 1, i64* %.195210521, align 8
  %.6.i41465235 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %299, align 8
  %.1965 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i41465235, i64 0, i32 3
  store i64 %.1841.0.ph, i64* %.1965, align 8
  %.6.i11.i4074 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %299, align 8, !noalias !83
  %.4061.i407510522 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4074 to i64*
  %.41.i4076 = load i64, i64* %.4061.i407510522, align 8, !noalias !83
  %.42.i4077 = icmp sgt i64 %.41.i4076, 0
  br i1 %.42.i4077, label %B0.endif.endif.endif.i4095, label %B0.endif.endif.endif.if.if, !prof !45

B24.i4088:                                        ; preds = %B24.i4088.preheader, %B24.i4088
  %return_val.2.025.i4078 = phi i64 [ %return_val.3.1.i4086, %B24.i4088 ], [ %return_val.2.025.i4078.ph, %B24.i4088.preheader ]
  %.14.024.i4079 = phi i64 [ %.129.i4084, %B24.i4088 ], [ %.14.024.i4079.ph, %B24.i4088.preheader ]
  %sunkaddr10523 = mul i64 %.14.024.i4079, 8
  %300 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4074 to i8*
  %sunkaddr10524 = getelementptr i8, i8* %300, i64 %sunkaddr10523
  %sunkaddr10525 = getelementptr i8, i8* %sunkaddr10524, i64 24
  %301 = bitcast i8* %sunkaddr10525 to i64*
  %.126.i4083 = load i64, i64* %301, align 8, !noalias !83
  %.129.i4084 = add nuw nsw i64 %.14.024.i4079, 1
  %.6.i7.not.i4085 = icmp sgt i64 %.126.i4083, %return_val.2.025.i4078
  %return_val.3.1.i4086 = select i1 %.6.i7.not.i4085, i64 %.126.i4083, i64 %return_val.2.025.i4078
  %exitcond.not.i4087 = icmp eq i64 %.41.i4076, %.129.i4084
  br i1 %exitcond.not.i4087, label %B302.endif.endif.endif.en...endif.1.endif.endif.endif, label %B24.i4088, !llvm.loop !58

B0.endif.endif.endif.i4095:                       ; preds = %B302.endif.endif.endif.en...endif.1.endif.endif
  %.50.i4092 = getelementptr { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11.i4074, i64 0, i32 3
  %.52.i4093 = load i64, i64* %.50.i4092, align 8, !noalias !83
  %.11623.not.i4094 = icmp eq i64 %.41.i4076, 1
  br i1 %.11623.not.i4094, label %B302.endif.endif.endif.en...endif.1.endif.endif.endif, label %B24.preheader.i4097

B24.preheader.i4097:                              ; preds = %B0.endif.endif.endif.i4095
  %302 = add nsw i64 %.41.i4076, -1
  %min.iters.check.i4096 = icmp ult i64 %302, 16
  br i1 %min.iters.check.i4096, label %B24.i4088.preheader, label %vector.ph.i4105

B24.i4088.preheader:                              ; preds = %middle.block.i4142, %B24.preheader.i4097
  %return_val.2.025.i4078.ph = phi i64 [ %320, %middle.block.i4142 ], [ %.52.i4093, %B24.preheader.i4097 ]
  %.14.024.i4079.ph = phi i64 [ %ind.end.i4102, %middle.block.i4142 ], [ 1, %B24.preheader.i4097 ]
  br label %B24.i4088

vector.ph.i4105:                                  ; preds = %B24.preheader.i4097
  %n.vec.i4101 = and i64 %302, -16
  %minmax.ident.splatinsert.i4103 = insertelement <4 x i64> undef, i64 %.52.i4093, i32 0
  %minmax.ident.splat.i4104 = shufflevector <4 x i64> %minmax.ident.splatinsert.i4103, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %vector.body.i4128

vector.body.i4128:                                ; preds = %vector.body.i4128, %vector.ph.i4105
  %index.i4106 = phi i64 [ 0, %vector.ph.i4105 ], [ %index.next.i4127, %vector.body.i4128 ]
  %vec.phi.i4107 = phi <4 x i64> [ %minmax.ident.splat.i4104, %vector.ph.i4105 ], [ %315, %vector.body.i4128 ]
  %vec.phi26.i4108 = phi <4 x i64> [ %minmax.ident.splat.i4104, %vector.ph.i4105 ], [ %316, %vector.body.i4128 ]
  %vec.phi27.i4109 = phi <4 x i64> [ %minmax.ident.splat.i4104, %vector.ph.i4105 ], [ %317, %vector.body.i4128 ]
  %vec.phi28.i4110 = phi <4 x i64> [ %minmax.ident.splat.i4104, %vector.ph.i4105 ], [ %318, %vector.body.i4128 ]
  %sunkaddr10526 = mul i64 %index.i4106, 8
  %303 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4074 to i8*
  %sunkaddr10527 = getelementptr i8, i8* %303, i64 %sunkaddr10526
  %sunkaddr10528 = getelementptr i8, i8* %sunkaddr10527, i64 32
  %304 = bitcast i8* %sunkaddr10528 to <4 x i64>*
  %wide.load.i4114 = load <4 x i64>, <4 x i64>* %304, align 8, !noalias !83
  %sunkaddr10529 = mul i64 %index.i4106, 8
  %305 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4074 to i8*
  %sunkaddr10530 = getelementptr i8, i8* %305, i64 %sunkaddr10529
  %sunkaddr10531 = getelementptr i8, i8* %sunkaddr10530, i64 64
  %306 = bitcast i8* %sunkaddr10531 to <4 x i64>*
  %wide.load29.i4118 = load <4 x i64>, <4 x i64>* %306, align 8, !noalias !83
  %sunkaddr10532 = mul i64 %index.i4106, 8
  %307 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4074 to i8*
  %sunkaddr10533 = getelementptr i8, i8* %307, i64 %sunkaddr10532
  %sunkaddr10534 = getelementptr i8, i8* %sunkaddr10533, i64 96
  %308 = bitcast i8* %sunkaddr10534 to <4 x i64>*
  %wide.load30.i4122 = load <4 x i64>, <4 x i64>* %308, align 8, !noalias !83
  %sunkaddr10535 = mul i64 %index.i4106, 8
  %309 = bitcast { i64, i64, i8, i64 }* %.6.i11.i4074 to i8*
  %sunkaddr10536 = getelementptr i8, i8* %309, i64 %sunkaddr10535
  %sunkaddr10537 = getelementptr i8, i8* %sunkaddr10536, i64 128
  %310 = bitcast i8* %sunkaddr10537 to <4 x i64>*
  %wide.load31.i4126 = load <4 x i64>, <4 x i64>* %310, align 8, !noalias !83
  %311 = icmp sgt <4 x i64> %wide.load.i4114, %vec.phi.i4107
  %312 = icmp sgt <4 x i64> %wide.load29.i4118, %vec.phi26.i4108
  %313 = icmp sgt <4 x i64> %wide.load30.i4122, %vec.phi27.i4109
  %314 = icmp sgt <4 x i64> %wide.load31.i4126, %vec.phi28.i4110
  %315 = select <4 x i1> %311, <4 x i64> %wide.load.i4114, <4 x i64> %vec.phi.i4107
  %316 = select <4 x i1> %312, <4 x i64> %wide.load29.i4118, <4 x i64> %vec.phi26.i4108
  %317 = select <4 x i1> %313, <4 x i64> %wide.load30.i4122, <4 x i64> %vec.phi27.i4109
  %318 = select <4 x i1> %314, <4 x i64> %wide.load31.i4126, <4 x i64> %vec.phi28.i4110
  %index.next.i4127 = add i64 %index.i4106, 16
  %319 = icmp eq i64 %n.vec.i4101, %index.next.i4127
  br i1 %319, label %middle.block.i4142, label %vector.body.i4128, !llvm.loop !59

middle.block.i4142:                               ; preds = %vector.body.i4128
  %ind.end.i4102 = or i64 %n.vec.i4101, 1
  %rdx.minmax.cmp.i4129 = icmp sgt <4 x i64> %315, %316
  %rdx.minmax.select.i4130 = select <4 x i1> %rdx.minmax.cmp.i4129, <4 x i64> %315, <4 x i64> %316
  %rdx.minmax.cmp32.i4131 = icmp sgt <4 x i64> %rdx.minmax.select.i4130, %317
  %rdx.minmax.select33.i4132 = select <4 x i1> %rdx.minmax.cmp32.i4131, <4 x i64> %rdx.minmax.select.i4130, <4 x i64> %317
  %rdx.minmax.cmp34.i4133 = icmp sgt <4 x i64> %rdx.minmax.select33.i4132, %318
  %rdx.minmax.select35.i4134 = select <4 x i1> %rdx.minmax.cmp34.i4133, <4 x i64> %rdx.minmax.select33.i4132, <4 x i64> %318
  %rdx.shuf.i4135 = shufflevector <4 x i64> %rdx.minmax.select35.i4134, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp56.i4136 = icmp sgt <4 x i64> %rdx.minmax.select35.i4134, %rdx.shuf.i4135
  %rdx.minmax.select57.i4137 = select <4 x i1> %rdx.minmax.cmp56.i4136, <4 x i64> %rdx.minmax.select35.i4134, <4 x i64> %rdx.shuf.i4135
  %rdx.shuf58.i4138 = shufflevector <4 x i64> %rdx.minmax.select57.i4137, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp59.i4139 = icmp sgt <4 x i64> %rdx.minmax.select57.i4137, %rdx.shuf58.i4138
  %rdx.minmax.select60.i4140 = select <4 x i1> %rdx.minmax.cmp59.i4139, <4 x i64> %rdx.minmax.select57.i4137, <4 x i64> %rdx.shuf58.i4138
  %320 = extractelement <4 x i64> %rdx.minmax.select60.i4140, i32 0
  %cmp.n.i4141 = icmp eq i64 %302, %n.vec.i4101
  br i1 %cmp.n.i4141, label %B302.endif.endif.endif.en...endif.1.endif.endif.endif, label %B24.i4088.preheader

B302.endif.endif.endif.en...endif.1.endif.endif.endif: ; preds = %B24.i4088, %middle.block.i4142, %B0.endif.endif.endif.i4095
  %.1969.0.ph = phi i64 [ %320, %middle.block.i4142 ], [ %.52.i4093, %B0.endif.endif.endif.i4095 ], [ %return_val.3.1.i4086, %B24.i4088 ]
  tail call void @NRT_decref(i8* nonnull %.1887)
  %.2015 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 32, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.2016 = icmp eq i8* %.2015, null
  br i1 %.2016, label %B302.endif.endif.endif.en...endif.2.endif.if, label %B302.endif.endif.endif.en...endif.2.endif.endif, !prof !3

B302.endif.endif.endif.en...endif.2.endif.if:     ; preds = %B302.endif.endif.endif.en...endif.1.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B302.endif.endif.endif.en...endif.2.endif.endif:  ; preds = %B302.endif.endif.endif.en...endif.1.endif.endif.endif
  %.5.i4069 = getelementptr i8, i8* %.2015, i64 24
  %321 = bitcast i8* %.5.i4069 to { i64, i64, i8, i64 }**
  %.6.i40705236 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %321, align 8
  %.2028 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i40705236, i64 0, i32 1
  store i64 1, i64* %.2028, align 8
  %.6.i40685237 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %321, align 8
  %.203410538 = bitcast { i64, i64, i8, i64 }* %.6.i40685237 to i64*
  store i64 0, i64* %.203410538, align 8
  %.6.i40665238 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %321, align 8
  %.2040 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i40665238, i64 0, i32 2
  store i8 0, i8* %.2040, align 1
  %.6.i40625239 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %321, align 8
  %.2053 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i40625239, i64 0, i32 3
  store i64 0, i64* %.2053, align 1
  %.6.i40585241 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %321, align 8
  %.208010539 = bitcast { i64, i64, i8, i64 }* %.6.i40585241 to i64*
  store i64 1, i64* %.208010539, align 8
  %.6.i40545242 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %321, align 8
  %.2093 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i40545242, i64 0, i32 3
  store i64 %.1969.0.ph, i64* %.2093, align 8
  %.6.i53052436959 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %321, align 8
  %.2143696010540 = bitcast { i64, i64, i8, i64 }* %.6.i53052436959 to i64*
  %.21446961 = load i64, i64* %.2143696010540, align 8
  %.21456962 = icmp sgt i64 %.21446961, 0
  br i1 %.21456962, label %B340.lr.ph, label %B342

B340.lr.ph:                                       ; preds = %B302.endif.endif.endif.en...endif.2.endif.endif
  %min.iters.check7682 = icmp ult i64 %.21446961, 16
  br i1 %min.iters.check7682, label %B340.preheader, label %vector.ph7683

B340.preheader:                                   ; preds = %middle.block7679, %B340.lr.ph
  %temp.2.611.2.06964.ph = phi i64 [ 1, %B340.lr.ph ], [ %335, %middle.block7679 ]
  %.2109.06963.ph = phi i64 [ 0, %B340.lr.ph ], [ %n.vec7685, %middle.block7679 ]
  br label %B340

vector.ph7683:                                    ; preds = %B340.lr.ph
  %n.vec7685 = and i64 %.21446961, -16
  br label %vector.body7681

vector.body7681:                                  ; preds = %vector.body7681, %vector.ph7683
  %index7686 = phi i64 [ 0, %vector.ph7683 ], [ %index.next7687, %vector.body7681 ]
  %vec.phi7690 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7683 ], [ %330, %vector.body7681 ]
  %vec.phi7691 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7683 ], [ %331, %vector.body7681 ]
  %vec.phi7692 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7683 ], [ %332, %vector.body7681 ]
  %vec.phi7693 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7683 ], [ %333, %vector.body7681 ]
  %sunkaddr10541 = mul i64 %index7686, 8
  %322 = bitcast { i64, i64, i8, i64 }* %.6.i53052436959 to i8*
  %sunkaddr10542 = getelementptr i8, i8* %322, i64 %sunkaddr10541
  %sunkaddr10543 = getelementptr i8, i8* %sunkaddr10542, i64 24
  %323 = bitcast i8* %sunkaddr10543 to <4 x i64>*
  %wide.load7694 = load <4 x i64>, <4 x i64>* %323, align 8
  %sunkaddr10544 = mul i64 %index7686, 8
  %324 = bitcast { i64, i64, i8, i64 }* %.6.i53052436959 to i8*
  %sunkaddr10545 = getelementptr i8, i8* %324, i64 %sunkaddr10544
  %sunkaddr10546 = getelementptr i8, i8* %sunkaddr10545, i64 56
  %325 = bitcast i8* %sunkaddr10546 to <4 x i64>*
  %wide.load7695 = load <4 x i64>, <4 x i64>* %325, align 8
  %sunkaddr10547 = mul i64 %index7686, 8
  %326 = bitcast { i64, i64, i8, i64 }* %.6.i53052436959 to i8*
  %sunkaddr10548 = getelementptr i8, i8* %326, i64 %sunkaddr10547
  %sunkaddr10549 = getelementptr i8, i8* %sunkaddr10548, i64 88
  %327 = bitcast i8* %sunkaddr10549 to <4 x i64>*
  %wide.load7696 = load <4 x i64>, <4 x i64>* %327, align 8
  %sunkaddr10550 = mul i64 %index7686, 8
  %328 = bitcast { i64, i64, i8, i64 }* %.6.i53052436959 to i8*
  %sunkaddr10551 = getelementptr i8, i8* %328, i64 %sunkaddr10550
  %sunkaddr10552 = getelementptr i8, i8* %sunkaddr10551, i64 120
  %329 = bitcast i8* %sunkaddr10552 to <4 x i64>*
  %wide.load7697 = load <4 x i64>, <4 x i64>* %329, align 8
  %330 = mul <4 x i64> %wide.load7694, %vec.phi7690
  %331 = mul <4 x i64> %wide.load7695, %vec.phi7691
  %332 = mul <4 x i64> %wide.load7696, %vec.phi7692
  %333 = mul <4 x i64> %wide.load7697, %vec.phi7693
  %index.next7687 = add i64 %index7686, 16
  %334 = icmp eq i64 %n.vec7685, %index.next7687
  br i1 %334, label %middle.block7679, label %vector.body7681, !llvm.loop !87

middle.block7679:                                 ; preds = %vector.body7681
  %bin.rdx7698 = mul <4 x i64> %331, %330
  %bin.rdx7699 = mul <4 x i64> %332, %bin.rdx7698
  %bin.rdx7700 = mul <4 x i64> %333, %bin.rdx7699
  %rdx.shuf10095 = shufflevector <4 x i64> %bin.rdx7700, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10096 = mul <4 x i64> %bin.rdx7700, %rdx.shuf10095
  %rdx.shuf10097 = shufflevector <4 x i64> %bin.rdx10096, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10098 = mul <4 x i64> %bin.rdx10096, %rdx.shuf10097
  %335 = extractelement <4 x i64> %bin.rdx10098, i32 0
  %cmp.n7689 = icmp eq i64 %.21446961, %n.vec7685
  br i1 %cmp.n7689, label %B342, label %B340.preheader

B342.endif.endif.if:                              ; preds = %B342
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B342.endif.endif.endif:                           ; preds = %B342
  %.5.i4049 = getelementptr i8, i8* %.2215, i64 24
  %336 = bitcast i8* %.5.i4049 to { i64, i64, i8, i64 }**
  %.6.i40505244 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %336, align 8
  %.2228 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i40505244, i64 0, i32 1
  store i64 1, i64* %.2228, align 8
  %.6.i40485245 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %336, align 8
  %.223410553 = bitcast { i64, i64, i8, i64 }* %.6.i40485245 to i64*
  store i64 0, i64* %.223410553, align 8
  %.6.i40465246 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %336, align 8
  %.2240 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i40465246, i64 0, i32 2
  store i8 0, i8* %.2240, align 1
  %.6.i40425247 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %336, align 8
  %.2253 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i40425247, i64 0, i32 3
  store i64 0, i64* %.2253, align 1
  %.6.i40385249 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %336, align 8
  %.228010554 = bitcast { i64, i64, i8, i64 }* %.6.i40385249 to i64*
  store i64 1, i64* %.228010554, align 8
  %.6.i40345250 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %336, align 8
  %.2293 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i40345250, i64 0, i32 3
  store i64 %temp.2.611.2.0.lcssa, i64* %.2293, align 8
  %.6.i11.i3962 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %336, align 8, !noalias !88
  %.4061.i396310555 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3962 to i64*
  %.41.i3964 = load i64, i64* %.4061.i396310555, align 8, !noalias !88
  %.42.i3965 = icmp sgt i64 %.41.i3964, 0
  br i1 %.42.i3965, label %B0.endif.endif.endif.i3983, label %B0.endif.endif.endif.if.if, !prof !45

B24.i3976:                                        ; preds = %B24.i3976.preheader, %B24.i3976
  %return_val.2.025.i3966 = phi i64 [ %return_val.3.1.i3974, %B24.i3976 ], [ %return_val.2.025.i3966.ph, %B24.i3976.preheader ]
  %.14.024.i3967 = phi i64 [ %.129.i3972, %B24.i3976 ], [ %.14.024.i3967.ph, %B24.i3976.preheader ]
  %sunkaddr10556 = mul i64 %.14.024.i3967, 8
  %337 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3962 to i8*
  %sunkaddr10557 = getelementptr i8, i8* %337, i64 %sunkaddr10556
  %sunkaddr10558 = getelementptr i8, i8* %sunkaddr10557, i64 24
  %338 = bitcast i8* %sunkaddr10558 to i64*
  %.126.i3971 = load i64, i64* %338, align 8, !noalias !88
  %.129.i3972 = add nuw nsw i64 %.14.024.i3967, 1
  %.6.i7.not.i3973 = icmp slt i64 %.126.i3971, %return_val.2.025.i3966
  %return_val.3.1.i3974 = select i1 %.6.i7.not.i3973, i64 %.126.i3971, i64 %return_val.2.025.i3966
  %exitcond.not.i3975 = icmp eq i64 %.41.i3964, %.129.i3972
  br i1 %exitcond.not.i3975, label %B342.endif.endif.endif.endif, label %B24.i3976, !llvm.loop !46

B0.endif.endif.endif.i3983:                       ; preds = %B342.endif.endif.endif
  %.50.i3980 = getelementptr { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11.i3962, i64 0, i32 3
  %.52.i3981 = load i64, i64* %.50.i3980, align 8, !noalias !88
  %.11623.not.i3982 = icmp eq i64 %.41.i3964, 1
  br i1 %.11623.not.i3982, label %B342.endif.endif.endif.endif, label %B24.preheader.i3985

B24.preheader.i3985:                              ; preds = %B0.endif.endif.endif.i3983
  %339 = add nsw i64 %.41.i3964, -1
  %min.iters.check.i3984 = icmp ult i64 %339, 16
  br i1 %min.iters.check.i3984, label %B24.i3976.preheader, label %vector.ph.i3993

B24.i3976.preheader:                              ; preds = %middle.block.i4030, %B24.preheader.i3985
  %return_val.2.025.i3966.ph = phi i64 [ %357, %middle.block.i4030 ], [ %.52.i3981, %B24.preheader.i3985 ]
  %.14.024.i3967.ph = phi i64 [ %ind.end.i3990, %middle.block.i4030 ], [ 1, %B24.preheader.i3985 ]
  br label %B24.i3976

vector.ph.i3993:                                  ; preds = %B24.preheader.i3985
  %n.vec.i3989 = and i64 %339, -16
  %minmax.ident.splatinsert.i3991 = insertelement <4 x i64> undef, i64 %.52.i3981, i32 0
  %minmax.ident.splat.i3992 = shufflevector <4 x i64> %minmax.ident.splatinsert.i3991, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %vector.body.i4016

vector.body.i4016:                                ; preds = %vector.body.i4016, %vector.ph.i3993
  %index.i3994 = phi i64 [ 0, %vector.ph.i3993 ], [ %index.next.i4015, %vector.body.i4016 ]
  %vec.phi.i3995 = phi <4 x i64> [ %minmax.ident.splat.i3992, %vector.ph.i3993 ], [ %352, %vector.body.i4016 ]
  %vec.phi26.i3996 = phi <4 x i64> [ %minmax.ident.splat.i3992, %vector.ph.i3993 ], [ %353, %vector.body.i4016 ]
  %vec.phi27.i3997 = phi <4 x i64> [ %minmax.ident.splat.i3992, %vector.ph.i3993 ], [ %354, %vector.body.i4016 ]
  %vec.phi28.i3998 = phi <4 x i64> [ %minmax.ident.splat.i3992, %vector.ph.i3993 ], [ %355, %vector.body.i4016 ]
  %sunkaddr10559 = mul i64 %index.i3994, 8
  %340 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3962 to i8*
  %sunkaddr10560 = getelementptr i8, i8* %340, i64 %sunkaddr10559
  %sunkaddr10561 = getelementptr i8, i8* %sunkaddr10560, i64 32
  %341 = bitcast i8* %sunkaddr10561 to <4 x i64>*
  %wide.load.i4002 = load <4 x i64>, <4 x i64>* %341, align 8, !noalias !88
  %sunkaddr10562 = mul i64 %index.i3994, 8
  %342 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3962 to i8*
  %sunkaddr10563 = getelementptr i8, i8* %342, i64 %sunkaddr10562
  %sunkaddr10564 = getelementptr i8, i8* %sunkaddr10563, i64 64
  %343 = bitcast i8* %sunkaddr10564 to <4 x i64>*
  %wide.load29.i4006 = load <4 x i64>, <4 x i64>* %343, align 8, !noalias !88
  %sunkaddr10565 = mul i64 %index.i3994, 8
  %344 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3962 to i8*
  %sunkaddr10566 = getelementptr i8, i8* %344, i64 %sunkaddr10565
  %sunkaddr10567 = getelementptr i8, i8* %sunkaddr10566, i64 96
  %345 = bitcast i8* %sunkaddr10567 to <4 x i64>*
  %wide.load30.i4010 = load <4 x i64>, <4 x i64>* %345, align 8, !noalias !88
  %sunkaddr10568 = mul i64 %index.i3994, 8
  %346 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3962 to i8*
  %sunkaddr10569 = getelementptr i8, i8* %346, i64 %sunkaddr10568
  %sunkaddr10570 = getelementptr i8, i8* %sunkaddr10569, i64 128
  %347 = bitcast i8* %sunkaddr10570 to <4 x i64>*
  %wide.load31.i4014 = load <4 x i64>, <4 x i64>* %347, align 8, !noalias !88
  %348 = icmp slt <4 x i64> %wide.load.i4002, %vec.phi.i3995
  %349 = icmp slt <4 x i64> %wide.load29.i4006, %vec.phi26.i3996
  %350 = icmp slt <4 x i64> %wide.load30.i4010, %vec.phi27.i3997
  %351 = icmp slt <4 x i64> %wide.load31.i4014, %vec.phi28.i3998
  %352 = select <4 x i1> %348, <4 x i64> %wide.load.i4002, <4 x i64> %vec.phi.i3995
  %353 = select <4 x i1> %349, <4 x i64> %wide.load29.i4006, <4 x i64> %vec.phi26.i3996
  %354 = select <4 x i1> %350, <4 x i64> %wide.load30.i4010, <4 x i64> %vec.phi27.i3997
  %355 = select <4 x i1> %351, <4 x i64> %wide.load31.i4014, <4 x i64> %vec.phi28.i3998
  %index.next.i4015 = add i64 %index.i3994, 16
  %356 = icmp eq i64 %n.vec.i3989, %index.next.i4015
  br i1 %356, label %middle.block.i4030, label %vector.body.i4016, !llvm.loop !47

middle.block.i4030:                               ; preds = %vector.body.i4016
  %ind.end.i3990 = or i64 %n.vec.i3989, 1
  %rdx.minmax.cmp.i4017 = icmp slt <4 x i64> %352, %353
  %rdx.minmax.select.i4018 = select <4 x i1> %rdx.minmax.cmp.i4017, <4 x i64> %352, <4 x i64> %353
  %rdx.minmax.cmp32.i4019 = icmp slt <4 x i64> %rdx.minmax.select.i4018, %354
  %rdx.minmax.select33.i4020 = select <4 x i1> %rdx.minmax.cmp32.i4019, <4 x i64> %rdx.minmax.select.i4018, <4 x i64> %354
  %rdx.minmax.cmp34.i4021 = icmp slt <4 x i64> %rdx.minmax.select33.i4020, %355
  %rdx.minmax.select35.i4022 = select <4 x i1> %rdx.minmax.cmp34.i4021, <4 x i64> %rdx.minmax.select33.i4020, <4 x i64> %355
  %rdx.shuf.i4023 = shufflevector <4 x i64> %rdx.minmax.select35.i4022, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp56.i4024 = icmp slt <4 x i64> %rdx.minmax.select35.i4022, %rdx.shuf.i4023
  %rdx.minmax.select57.i4025 = select <4 x i1> %rdx.minmax.cmp56.i4024, <4 x i64> %rdx.minmax.select35.i4022, <4 x i64> %rdx.shuf.i4023
  %rdx.shuf58.i4026 = shufflevector <4 x i64> %rdx.minmax.select57.i4025, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp59.i4027 = icmp slt <4 x i64> %rdx.minmax.select57.i4025, %rdx.shuf58.i4026
  %rdx.minmax.select60.i4028 = select <4 x i1> %rdx.minmax.cmp59.i4027, <4 x i64> %rdx.minmax.select57.i4025, <4 x i64> %rdx.shuf58.i4026
  %357 = extractelement <4 x i64> %rdx.minmax.select60.i4028, i32 0
  %cmp.n.i4029 = icmp eq i64 %339, %n.vec.i3989
  br i1 %cmp.n.i4029, label %B342.endif.endif.endif.endif, label %B24.i3976.preheader

B342.endif.endif.endif.endif:                     ; preds = %B24.i3976, %middle.block.i4030, %B0.endif.endif.endif.i3983
  %.2297.0.ph = phi i64 [ %357, %middle.block.i4030 ], [ %.52.i3981, %B0.endif.endif.endif.i3983 ], [ %return_val.3.1.i3974, %B24.i3976 ]
  tail call void @NRT_decref(i8* nonnull %.2215)
  %.2343 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 32, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.2344 = icmp eq i8* %.2343, null
  br i1 %.2344, label %B342.endif.endif.endif.endif.endif.endif.if, label %B342.endif.endif.endif.endif.endif.endif.endif, !prof !3

B342.endif.endif.endif.endif.endif.endif.if:      ; preds = %B342.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B342.endif.endif.endif.endif.endif.endif.endif:   ; preds = %B342.endif.endif.endif.endif
  %.5.i3957 = getelementptr i8, i8* %.2343, i64 24
  %358 = bitcast i8* %.5.i3957 to { i64, i64, i8, i64 }**
  %.6.i39585251 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %358, align 8
  %.2356 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i39585251, i64 0, i32 1
  store i64 1, i64* %.2356, align 8
  %.6.i39565252 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %358, align 8
  %.236210571 = bitcast { i64, i64, i8, i64 }* %.6.i39565252 to i64*
  store i64 0, i64* %.236210571, align 8
  %.6.i39545253 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %358, align 8
  %.2368 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i39545253, i64 0, i32 2
  store i8 0, i8* %.2368, align 1
  %.6.i39505254 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %358, align 8
  %.2381 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i39505254, i64 0, i32 3
  store i64 0, i64* %.2381, align 1
  %.6.i39465256 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %358, align 8
  %.240810572 = bitcast { i64, i64, i8, i64 }* %.6.i39465256 to i64*
  store i64 1, i64* %.240810572, align 8
  %.6.i39425257 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %358, align 8
  %.2421 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i39425257, i64 0, i32 3
  store i64 %.2297.0.ph, i64* %.2421, align 8
  %.6.i11.i3870 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %358, align 8, !noalias !92
  %.4061.i387110573 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3870 to i64*
  %.41.i3872 = load i64, i64* %.4061.i387110573, align 8, !noalias !92
  %.42.i3873 = icmp sgt i64 %.41.i3872, 0
  br i1 %.42.i3873, label %B0.endif.endif.endif.i3891, label %B0.endif.endif.endif.if.if, !prof !45

B24.i3884:                                        ; preds = %B24.i3884.preheader, %B24.i3884
  %return_val.2.025.i3874 = phi i64 [ %return_val.3.1.i3882, %B24.i3884 ], [ %return_val.2.025.i3874.ph, %B24.i3884.preheader ]
  %.14.024.i3875 = phi i64 [ %.129.i3880, %B24.i3884 ], [ %.14.024.i3875.ph, %B24.i3884.preheader ]
  %sunkaddr10574 = mul i64 %.14.024.i3875, 8
  %359 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3870 to i8*
  %sunkaddr10575 = getelementptr i8, i8* %359, i64 %sunkaddr10574
  %sunkaddr10576 = getelementptr i8, i8* %sunkaddr10575, i64 24
  %360 = bitcast i8* %sunkaddr10576 to i64*
  %.126.i3879 = load i64, i64* %360, align 8, !noalias !92
  %.129.i3880 = add nuw nsw i64 %.14.024.i3875, 1
  %.6.i7.not.i3881 = icmp slt i64 %.126.i3879, %return_val.2.025.i3874
  %return_val.3.1.i3882 = select i1 %.6.i7.not.i3881, i64 %.126.i3879, i64 %return_val.2.025.i3874
  %exitcond.not.i3883 = icmp eq i64 %.41.i3872, %.129.i3880
  br i1 %exitcond.not.i3883, label %B342.endif.endif.endif.endif.endif.endif.endif.endif, label %B24.i3884, !llvm.loop !46

B0.endif.endif.endif.i3891:                       ; preds = %B342.endif.endif.endif.endif.endif.endif.endif
  %.50.i3888 = getelementptr { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11.i3870, i64 0, i32 3
  %.52.i3889 = load i64, i64* %.50.i3888, align 8, !noalias !92
  %.11623.not.i3890 = icmp eq i64 %.41.i3872, 1
  br i1 %.11623.not.i3890, label %B342.endif.endif.endif.endif.endif.endif.endif.endif, label %B24.preheader.i3893

B24.preheader.i3893:                              ; preds = %B0.endif.endif.endif.i3891
  %361 = add nsw i64 %.41.i3872, -1
  %min.iters.check.i3892 = icmp ult i64 %361, 16
  br i1 %min.iters.check.i3892, label %B24.i3884.preheader, label %vector.ph.i3901

B24.i3884.preheader:                              ; preds = %middle.block.i3938, %B24.preheader.i3893
  %return_val.2.025.i3874.ph = phi i64 [ %379, %middle.block.i3938 ], [ %.52.i3889, %B24.preheader.i3893 ]
  %.14.024.i3875.ph = phi i64 [ %ind.end.i3898, %middle.block.i3938 ], [ 1, %B24.preheader.i3893 ]
  br label %B24.i3884

vector.ph.i3901:                                  ; preds = %B24.preheader.i3893
  %n.vec.i3897 = and i64 %361, -16
  %minmax.ident.splatinsert.i3899 = insertelement <4 x i64> undef, i64 %.52.i3889, i32 0
  %minmax.ident.splat.i3900 = shufflevector <4 x i64> %minmax.ident.splatinsert.i3899, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %vector.body.i3924

vector.body.i3924:                                ; preds = %vector.body.i3924, %vector.ph.i3901
  %index.i3902 = phi i64 [ 0, %vector.ph.i3901 ], [ %index.next.i3923, %vector.body.i3924 ]
  %vec.phi.i3903 = phi <4 x i64> [ %minmax.ident.splat.i3900, %vector.ph.i3901 ], [ %374, %vector.body.i3924 ]
  %vec.phi26.i3904 = phi <4 x i64> [ %minmax.ident.splat.i3900, %vector.ph.i3901 ], [ %375, %vector.body.i3924 ]
  %vec.phi27.i3905 = phi <4 x i64> [ %minmax.ident.splat.i3900, %vector.ph.i3901 ], [ %376, %vector.body.i3924 ]
  %vec.phi28.i3906 = phi <4 x i64> [ %minmax.ident.splat.i3900, %vector.ph.i3901 ], [ %377, %vector.body.i3924 ]
  %sunkaddr10577 = mul i64 %index.i3902, 8
  %362 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3870 to i8*
  %sunkaddr10578 = getelementptr i8, i8* %362, i64 %sunkaddr10577
  %sunkaddr10579 = getelementptr i8, i8* %sunkaddr10578, i64 32
  %363 = bitcast i8* %sunkaddr10579 to <4 x i64>*
  %wide.load.i3910 = load <4 x i64>, <4 x i64>* %363, align 8, !noalias !92
  %sunkaddr10580 = mul i64 %index.i3902, 8
  %364 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3870 to i8*
  %sunkaddr10581 = getelementptr i8, i8* %364, i64 %sunkaddr10580
  %sunkaddr10582 = getelementptr i8, i8* %sunkaddr10581, i64 64
  %365 = bitcast i8* %sunkaddr10582 to <4 x i64>*
  %wide.load29.i3914 = load <4 x i64>, <4 x i64>* %365, align 8, !noalias !92
  %sunkaddr10583 = mul i64 %index.i3902, 8
  %366 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3870 to i8*
  %sunkaddr10584 = getelementptr i8, i8* %366, i64 %sunkaddr10583
  %sunkaddr10585 = getelementptr i8, i8* %sunkaddr10584, i64 96
  %367 = bitcast i8* %sunkaddr10585 to <4 x i64>*
  %wide.load30.i3918 = load <4 x i64>, <4 x i64>* %367, align 8, !noalias !92
  %sunkaddr10586 = mul i64 %index.i3902, 8
  %368 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3870 to i8*
  %sunkaddr10587 = getelementptr i8, i8* %368, i64 %sunkaddr10586
  %sunkaddr10588 = getelementptr i8, i8* %sunkaddr10587, i64 128
  %369 = bitcast i8* %sunkaddr10588 to <4 x i64>*
  %wide.load31.i3922 = load <4 x i64>, <4 x i64>* %369, align 8, !noalias !92
  %370 = icmp slt <4 x i64> %wide.load.i3910, %vec.phi.i3903
  %371 = icmp slt <4 x i64> %wide.load29.i3914, %vec.phi26.i3904
  %372 = icmp slt <4 x i64> %wide.load30.i3918, %vec.phi27.i3905
  %373 = icmp slt <4 x i64> %wide.load31.i3922, %vec.phi28.i3906
  %374 = select <4 x i1> %370, <4 x i64> %wide.load.i3910, <4 x i64> %vec.phi.i3903
  %375 = select <4 x i1> %371, <4 x i64> %wide.load29.i3914, <4 x i64> %vec.phi26.i3904
  %376 = select <4 x i1> %372, <4 x i64> %wide.load30.i3918, <4 x i64> %vec.phi27.i3905
  %377 = select <4 x i1> %373, <4 x i64> %wide.load31.i3922, <4 x i64> %vec.phi28.i3906
  %index.next.i3923 = add i64 %index.i3902, 16
  %378 = icmp eq i64 %n.vec.i3897, %index.next.i3923
  br i1 %378, label %middle.block.i3938, label %vector.body.i3924, !llvm.loop !47

middle.block.i3938:                               ; preds = %vector.body.i3924
  %ind.end.i3898 = or i64 %n.vec.i3897, 1
  %rdx.minmax.cmp.i3925 = icmp slt <4 x i64> %374, %375
  %rdx.minmax.select.i3926 = select <4 x i1> %rdx.minmax.cmp.i3925, <4 x i64> %374, <4 x i64> %375
  %rdx.minmax.cmp32.i3927 = icmp slt <4 x i64> %rdx.minmax.select.i3926, %376
  %rdx.minmax.select33.i3928 = select <4 x i1> %rdx.minmax.cmp32.i3927, <4 x i64> %rdx.minmax.select.i3926, <4 x i64> %376
  %rdx.minmax.cmp34.i3929 = icmp slt <4 x i64> %rdx.minmax.select33.i3928, %377
  %rdx.minmax.select35.i3930 = select <4 x i1> %rdx.minmax.cmp34.i3929, <4 x i64> %rdx.minmax.select33.i3928, <4 x i64> %377
  %rdx.shuf.i3931 = shufflevector <4 x i64> %rdx.minmax.select35.i3930, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp56.i3932 = icmp slt <4 x i64> %rdx.minmax.select35.i3930, %rdx.shuf.i3931
  %rdx.minmax.select57.i3933 = select <4 x i1> %rdx.minmax.cmp56.i3932, <4 x i64> %rdx.minmax.select35.i3930, <4 x i64> %rdx.shuf.i3931
  %rdx.shuf58.i3934 = shufflevector <4 x i64> %rdx.minmax.select57.i3933, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp59.i3935 = icmp slt <4 x i64> %rdx.minmax.select57.i3933, %rdx.shuf58.i3934
  %rdx.minmax.select60.i3936 = select <4 x i1> %rdx.minmax.cmp59.i3935, <4 x i64> %rdx.minmax.select57.i3933, <4 x i64> %rdx.shuf58.i3934
  %379 = extractelement <4 x i64> %rdx.minmax.select60.i3936, i32 0
  %cmp.n.i3937 = icmp eq i64 %361, %n.vec.i3897
  br i1 %cmp.n.i3937, label %B342.endif.endif.endif.endif.endif.endif.endif.endif, label %B24.i3884.preheader

B342.endif.endif.endif.endif.endif.endif.endif.endif: ; preds = %B24.i3884, %middle.block.i3938, %B0.endif.endif.endif.i3891
  %.2425.0.ph = phi i64 [ %379, %middle.block.i3938 ], [ %.52.i3889, %B0.endif.endif.endif.i3891 ], [ %return_val.3.1.i3882, %B24.i3884 ]
  tail call void @NRT_decref(i8* nonnull %.2343)
  %.2471 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 32, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.2472 = icmp eq i8* %.2471, null
  br i1 %.2472, label %B342.endif.endif.endif.en...endif.endif.if, label %B342.endif.endif.endif.en...endif.endif.endif, !prof !3

B342.endif.endif.endif.en...endif.endif.if:       ; preds = %B342.endif.endif.endif.endif.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B342.endif.endif.endif.en...endif.endif.endif:    ; preds = %B342.endif.endif.endif.endif.endif.endif.endif.endif
  %.5.i3865 = getelementptr i8, i8* %.2471, i64 24
  %380 = bitcast i8* %.5.i3865 to { i64, i64, i8, i64 }**
  %.6.i38665258 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %380, align 8
  %.2484 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i38665258, i64 0, i32 1
  store i64 1, i64* %.2484, align 8
  %.6.i38645259 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %380, align 8
  %.249010589 = bitcast { i64, i64, i8, i64 }* %.6.i38645259 to i64*
  store i64 0, i64* %.249010589, align 8
  %.6.i38625260 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %380, align 8
  %.2496 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i38625260, i64 0, i32 2
  store i8 0, i8* %.2496, align 1
  %.6.i38585261 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %380, align 8
  %.2509 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i38585261, i64 0, i32 3
  store i64 0, i64* %.2509, align 1
  %.6.i38545263 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %380, align 8
  %.253610590 = bitcast { i64, i64, i8, i64 }* %.6.i38545263 to i64*
  store i64 1, i64* %.253610590, align 8
  %.6.i38505264 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %380, align 8
  %.2549 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i38505264, i64 0, i32 3
  store i64 %.2425.0.ph, i64* %.2549, align 8
  %.6.i11.i3778 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %380, align 8, !noalias !96
  %.4061.i377910591 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3778 to i64*
  %.41.i3780 = load i64, i64* %.4061.i377910591, align 8, !noalias !96
  %.42.i3781 = icmp sgt i64 %.41.i3780, 0
  br i1 %.42.i3781, label %B0.endif.endif.endif.i3799, label %B0.endif.endif.endif.if.if, !prof !45

B24.i3792:                                        ; preds = %B24.i3792.preheader, %B24.i3792
  %return_val.2.025.i3782 = phi i64 [ %return_val.3.1.i3790, %B24.i3792 ], [ %return_val.2.025.i3782.ph, %B24.i3792.preheader ]
  %.14.024.i3783 = phi i64 [ %.129.i3788, %B24.i3792 ], [ %.14.024.i3783.ph, %B24.i3792.preheader ]
  %sunkaddr10592 = mul i64 %.14.024.i3783, 8
  %381 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3778 to i8*
  %sunkaddr10593 = getelementptr i8, i8* %381, i64 %sunkaddr10592
  %sunkaddr10594 = getelementptr i8, i8* %sunkaddr10593, i64 24
  %382 = bitcast i8* %sunkaddr10594 to i64*
  %.126.i3787 = load i64, i64* %382, align 8, !noalias !96
  %.129.i3788 = add nuw nsw i64 %.14.024.i3783, 1
  %.6.i7.not.i3789 = icmp slt i64 %.126.i3787, %return_val.2.025.i3782
  %return_val.3.1.i3790 = select i1 %.6.i7.not.i3789, i64 %.126.i3787, i64 %return_val.2.025.i3782
  %exitcond.not.i3791 = icmp eq i64 %.41.i3780, %.129.i3788
  br i1 %exitcond.not.i3791, label %B342.endif.endif.endif.en...endif.endif.endif.endif, label %B24.i3792, !llvm.loop !46

B0.endif.endif.endif.i3799:                       ; preds = %B342.endif.endif.endif.en...endif.endif.endif
  %.50.i3796 = getelementptr { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11.i3778, i64 0, i32 3
  %.52.i3797 = load i64, i64* %.50.i3796, align 8, !noalias !96
  %.11623.not.i3798 = icmp eq i64 %.41.i3780, 1
  br i1 %.11623.not.i3798, label %B342.endif.endif.endif.en...endif.endif.endif.endif, label %B24.preheader.i3801

B24.preheader.i3801:                              ; preds = %B0.endif.endif.endif.i3799
  %383 = add nsw i64 %.41.i3780, -1
  %min.iters.check.i3800 = icmp ult i64 %383, 16
  br i1 %min.iters.check.i3800, label %B24.i3792.preheader, label %vector.ph.i3809

B24.i3792.preheader:                              ; preds = %middle.block.i3846, %B24.preheader.i3801
  %return_val.2.025.i3782.ph = phi i64 [ %401, %middle.block.i3846 ], [ %.52.i3797, %B24.preheader.i3801 ]
  %.14.024.i3783.ph = phi i64 [ %ind.end.i3806, %middle.block.i3846 ], [ 1, %B24.preheader.i3801 ]
  br label %B24.i3792

vector.ph.i3809:                                  ; preds = %B24.preheader.i3801
  %n.vec.i3805 = and i64 %383, -16
  %minmax.ident.splatinsert.i3807 = insertelement <4 x i64> undef, i64 %.52.i3797, i32 0
  %minmax.ident.splat.i3808 = shufflevector <4 x i64> %minmax.ident.splatinsert.i3807, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %vector.body.i3832

vector.body.i3832:                                ; preds = %vector.body.i3832, %vector.ph.i3809
  %index.i3810 = phi i64 [ 0, %vector.ph.i3809 ], [ %index.next.i3831, %vector.body.i3832 ]
  %vec.phi.i3811 = phi <4 x i64> [ %minmax.ident.splat.i3808, %vector.ph.i3809 ], [ %396, %vector.body.i3832 ]
  %vec.phi26.i3812 = phi <4 x i64> [ %minmax.ident.splat.i3808, %vector.ph.i3809 ], [ %397, %vector.body.i3832 ]
  %vec.phi27.i3813 = phi <4 x i64> [ %minmax.ident.splat.i3808, %vector.ph.i3809 ], [ %398, %vector.body.i3832 ]
  %vec.phi28.i3814 = phi <4 x i64> [ %minmax.ident.splat.i3808, %vector.ph.i3809 ], [ %399, %vector.body.i3832 ]
  %sunkaddr10595 = mul i64 %index.i3810, 8
  %384 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3778 to i8*
  %sunkaddr10596 = getelementptr i8, i8* %384, i64 %sunkaddr10595
  %sunkaddr10597 = getelementptr i8, i8* %sunkaddr10596, i64 32
  %385 = bitcast i8* %sunkaddr10597 to <4 x i64>*
  %wide.load.i3818 = load <4 x i64>, <4 x i64>* %385, align 8, !noalias !96
  %sunkaddr10598 = mul i64 %index.i3810, 8
  %386 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3778 to i8*
  %sunkaddr10599 = getelementptr i8, i8* %386, i64 %sunkaddr10598
  %sunkaddr10600 = getelementptr i8, i8* %sunkaddr10599, i64 64
  %387 = bitcast i8* %sunkaddr10600 to <4 x i64>*
  %wide.load29.i3822 = load <4 x i64>, <4 x i64>* %387, align 8, !noalias !96
  %sunkaddr10601 = mul i64 %index.i3810, 8
  %388 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3778 to i8*
  %sunkaddr10602 = getelementptr i8, i8* %388, i64 %sunkaddr10601
  %sunkaddr10603 = getelementptr i8, i8* %sunkaddr10602, i64 96
  %389 = bitcast i8* %sunkaddr10603 to <4 x i64>*
  %wide.load30.i3826 = load <4 x i64>, <4 x i64>* %389, align 8, !noalias !96
  %sunkaddr10604 = mul i64 %index.i3810, 8
  %390 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3778 to i8*
  %sunkaddr10605 = getelementptr i8, i8* %390, i64 %sunkaddr10604
  %sunkaddr10606 = getelementptr i8, i8* %sunkaddr10605, i64 128
  %391 = bitcast i8* %sunkaddr10606 to <4 x i64>*
  %wide.load31.i3830 = load <4 x i64>, <4 x i64>* %391, align 8, !noalias !96
  %392 = icmp slt <4 x i64> %wide.load.i3818, %vec.phi.i3811
  %393 = icmp slt <4 x i64> %wide.load29.i3822, %vec.phi26.i3812
  %394 = icmp slt <4 x i64> %wide.load30.i3826, %vec.phi27.i3813
  %395 = icmp slt <4 x i64> %wide.load31.i3830, %vec.phi28.i3814
  %396 = select <4 x i1> %392, <4 x i64> %wide.load.i3818, <4 x i64> %vec.phi.i3811
  %397 = select <4 x i1> %393, <4 x i64> %wide.load29.i3822, <4 x i64> %vec.phi26.i3812
  %398 = select <4 x i1> %394, <4 x i64> %wide.load30.i3826, <4 x i64> %vec.phi27.i3813
  %399 = select <4 x i1> %395, <4 x i64> %wide.load31.i3830, <4 x i64> %vec.phi28.i3814
  %index.next.i3831 = add i64 %index.i3810, 16
  %400 = icmp eq i64 %n.vec.i3805, %index.next.i3831
  br i1 %400, label %middle.block.i3846, label %vector.body.i3832, !llvm.loop !47

middle.block.i3846:                               ; preds = %vector.body.i3832
  %ind.end.i3806 = or i64 %n.vec.i3805, 1
  %rdx.minmax.cmp.i3833 = icmp slt <4 x i64> %396, %397
  %rdx.minmax.select.i3834 = select <4 x i1> %rdx.minmax.cmp.i3833, <4 x i64> %396, <4 x i64> %397
  %rdx.minmax.cmp32.i3835 = icmp slt <4 x i64> %rdx.minmax.select.i3834, %398
  %rdx.minmax.select33.i3836 = select <4 x i1> %rdx.minmax.cmp32.i3835, <4 x i64> %rdx.minmax.select.i3834, <4 x i64> %398
  %rdx.minmax.cmp34.i3837 = icmp slt <4 x i64> %rdx.minmax.select33.i3836, %399
  %rdx.minmax.select35.i3838 = select <4 x i1> %rdx.minmax.cmp34.i3837, <4 x i64> %rdx.minmax.select33.i3836, <4 x i64> %399
  %rdx.shuf.i3839 = shufflevector <4 x i64> %rdx.minmax.select35.i3838, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp56.i3840 = icmp slt <4 x i64> %rdx.minmax.select35.i3838, %rdx.shuf.i3839
  %rdx.minmax.select57.i3841 = select <4 x i1> %rdx.minmax.cmp56.i3840, <4 x i64> %rdx.minmax.select35.i3838, <4 x i64> %rdx.shuf.i3839
  %rdx.shuf58.i3842 = shufflevector <4 x i64> %rdx.minmax.select57.i3841, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp59.i3843 = icmp slt <4 x i64> %rdx.minmax.select57.i3841, %rdx.shuf58.i3842
  %rdx.minmax.select60.i3844 = select <4 x i1> %rdx.minmax.cmp59.i3843, <4 x i64> %rdx.minmax.select57.i3841, <4 x i64> %rdx.shuf58.i3842
  %401 = extractelement <4 x i64> %rdx.minmax.select60.i3844, i32 0
  %cmp.n.i3845 = icmp eq i64 %383, %n.vec.i3805
  br i1 %cmp.n.i3845, label %B342.endif.endif.endif.en...endif.endif.endif.endif, label %B24.i3792.preheader

B342.endif.endif.endif.en...endif.endif.endif.endif: ; preds = %B24.i3792, %middle.block.i3846, %B0.endif.endif.endif.i3799
  %.2553.0.ph = phi i64 [ %401, %middle.block.i3846 ], [ %.52.i3797, %B0.endif.endif.endif.i3799 ], [ %return_val.3.1.i3790, %B24.i3792 ]
  tail call void @NRT_decref(i8* nonnull %.2471)
  %.2599 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 32, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.2600 = icmp eq i8* %.2599, null
  br i1 %.2600, label %B342.endif.endif.endif.en...endif.1.endif.if, label %B342.endif.endif.endif.en...endif.1.endif.endif, !prof !3

B342.endif.endif.endif.en...endif.1.endif.if:     ; preds = %B342.endif.endif.endif.en...endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B342.endif.endif.endif.en...endif.1.endif.endif:  ; preds = %B342.endif.endif.endif.en...endif.endif.endif.endif
  %.5.i3773 = getelementptr i8, i8* %.2599, i64 24
  %402 = bitcast i8* %.5.i3773 to { i64, i64, i8, i64 }**
  %.6.i37745265 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %402, align 8
  %.2612 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i37745265, i64 0, i32 1
  store i64 1, i64* %.2612, align 8
  %.6.i37725266 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %402, align 8
  %.261810607 = bitcast { i64, i64, i8, i64 }* %.6.i37725266 to i64*
  store i64 0, i64* %.261810607, align 8
  %.6.i37705267 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %402, align 8
  %.2624 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i37705267, i64 0, i32 2
  store i8 0, i8* %.2624, align 1
  %.6.i37665268 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %402, align 8
  %.2637 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i37665268, i64 0, i32 3
  store i64 0, i64* %.2637, align 1
  %.6.i37625270 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %402, align 8
  %.266410608 = bitcast { i64, i64, i8, i64 }* %.6.i37625270 to i64*
  store i64 1, i64* %.266410608, align 8
  %.6.i37585271 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %402, align 8
  %.2677 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i37585271, i64 0, i32 3
  store i64 %.2553.0.ph, i64* %.2677, align 8
  %.6.i11.i3686 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %402, align 8, !noalias !100
  %.4061.i368710609 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3686 to i64*
  %.41.i3688 = load i64, i64* %.4061.i368710609, align 8, !noalias !100
  %.42.i3689 = icmp sgt i64 %.41.i3688, 0
  br i1 %.42.i3689, label %B0.endif.endif.endif.i3707, label %B0.endif.endif.endif.if.if, !prof !45

B24.i3700:                                        ; preds = %B24.i3700.preheader, %B24.i3700
  %return_val.2.025.i3690 = phi i64 [ %return_val.3.1.i3698, %B24.i3700 ], [ %return_val.2.025.i3690.ph, %B24.i3700.preheader ]
  %.14.024.i3691 = phi i64 [ %.129.i3696, %B24.i3700 ], [ %.14.024.i3691.ph, %B24.i3700.preheader ]
  %sunkaddr10610 = mul i64 %.14.024.i3691, 8
  %403 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3686 to i8*
  %sunkaddr10611 = getelementptr i8, i8* %403, i64 %sunkaddr10610
  %sunkaddr10612 = getelementptr i8, i8* %sunkaddr10611, i64 24
  %404 = bitcast i8* %sunkaddr10612 to i64*
  %.126.i3695 = load i64, i64* %404, align 8, !noalias !100
  %.129.i3696 = add nuw nsw i64 %.14.024.i3691, 1
  %.6.i7.not.i3697 = icmp slt i64 %.126.i3695, %return_val.2.025.i3690
  %return_val.3.1.i3698 = select i1 %.6.i7.not.i3697, i64 %.126.i3695, i64 %return_val.2.025.i3690
  %exitcond.not.i3699 = icmp eq i64 %.41.i3688, %.129.i3696
  br i1 %exitcond.not.i3699, label %B342.endif.endif.endif.en...endif.1.endif.endif.endif, label %B24.i3700, !llvm.loop !46

B0.endif.endif.endif.i3707:                       ; preds = %B342.endif.endif.endif.en...endif.1.endif.endif
  %.50.i3704 = getelementptr { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11.i3686, i64 0, i32 3
  %.52.i3705 = load i64, i64* %.50.i3704, align 8, !noalias !100
  %.11623.not.i3706 = icmp eq i64 %.41.i3688, 1
  br i1 %.11623.not.i3706, label %B342.endif.endif.endif.en...endif.1.endif.endif.endif, label %B24.preheader.i3709

B24.preheader.i3709:                              ; preds = %B0.endif.endif.endif.i3707
  %405 = add nsw i64 %.41.i3688, -1
  %min.iters.check.i3708 = icmp ult i64 %405, 16
  br i1 %min.iters.check.i3708, label %B24.i3700.preheader, label %vector.ph.i3717

B24.i3700.preheader:                              ; preds = %middle.block.i3754, %B24.preheader.i3709
  %return_val.2.025.i3690.ph = phi i64 [ %423, %middle.block.i3754 ], [ %.52.i3705, %B24.preheader.i3709 ]
  %.14.024.i3691.ph = phi i64 [ %ind.end.i3714, %middle.block.i3754 ], [ 1, %B24.preheader.i3709 ]
  br label %B24.i3700

vector.ph.i3717:                                  ; preds = %B24.preheader.i3709
  %n.vec.i3713 = and i64 %405, -16
  %minmax.ident.splatinsert.i3715 = insertelement <4 x i64> undef, i64 %.52.i3705, i32 0
  %minmax.ident.splat.i3716 = shufflevector <4 x i64> %minmax.ident.splatinsert.i3715, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %vector.body.i3740

vector.body.i3740:                                ; preds = %vector.body.i3740, %vector.ph.i3717
  %index.i3718 = phi i64 [ 0, %vector.ph.i3717 ], [ %index.next.i3739, %vector.body.i3740 ]
  %vec.phi.i3719 = phi <4 x i64> [ %minmax.ident.splat.i3716, %vector.ph.i3717 ], [ %418, %vector.body.i3740 ]
  %vec.phi26.i3720 = phi <4 x i64> [ %minmax.ident.splat.i3716, %vector.ph.i3717 ], [ %419, %vector.body.i3740 ]
  %vec.phi27.i3721 = phi <4 x i64> [ %minmax.ident.splat.i3716, %vector.ph.i3717 ], [ %420, %vector.body.i3740 ]
  %vec.phi28.i3722 = phi <4 x i64> [ %minmax.ident.splat.i3716, %vector.ph.i3717 ], [ %421, %vector.body.i3740 ]
  %sunkaddr10613 = mul i64 %index.i3718, 8
  %406 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3686 to i8*
  %sunkaddr10614 = getelementptr i8, i8* %406, i64 %sunkaddr10613
  %sunkaddr10615 = getelementptr i8, i8* %sunkaddr10614, i64 32
  %407 = bitcast i8* %sunkaddr10615 to <4 x i64>*
  %wide.load.i3726 = load <4 x i64>, <4 x i64>* %407, align 8, !noalias !100
  %sunkaddr10616 = mul i64 %index.i3718, 8
  %408 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3686 to i8*
  %sunkaddr10617 = getelementptr i8, i8* %408, i64 %sunkaddr10616
  %sunkaddr10618 = getelementptr i8, i8* %sunkaddr10617, i64 64
  %409 = bitcast i8* %sunkaddr10618 to <4 x i64>*
  %wide.load29.i3730 = load <4 x i64>, <4 x i64>* %409, align 8, !noalias !100
  %sunkaddr10619 = mul i64 %index.i3718, 8
  %410 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3686 to i8*
  %sunkaddr10620 = getelementptr i8, i8* %410, i64 %sunkaddr10619
  %sunkaddr10621 = getelementptr i8, i8* %sunkaddr10620, i64 96
  %411 = bitcast i8* %sunkaddr10621 to <4 x i64>*
  %wide.load30.i3734 = load <4 x i64>, <4 x i64>* %411, align 8, !noalias !100
  %sunkaddr10622 = mul i64 %index.i3718, 8
  %412 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3686 to i8*
  %sunkaddr10623 = getelementptr i8, i8* %412, i64 %sunkaddr10622
  %sunkaddr10624 = getelementptr i8, i8* %sunkaddr10623, i64 128
  %413 = bitcast i8* %sunkaddr10624 to <4 x i64>*
  %wide.load31.i3738 = load <4 x i64>, <4 x i64>* %413, align 8, !noalias !100
  %414 = icmp slt <4 x i64> %wide.load.i3726, %vec.phi.i3719
  %415 = icmp slt <4 x i64> %wide.load29.i3730, %vec.phi26.i3720
  %416 = icmp slt <4 x i64> %wide.load30.i3734, %vec.phi27.i3721
  %417 = icmp slt <4 x i64> %wide.load31.i3738, %vec.phi28.i3722
  %418 = select <4 x i1> %414, <4 x i64> %wide.load.i3726, <4 x i64> %vec.phi.i3719
  %419 = select <4 x i1> %415, <4 x i64> %wide.load29.i3730, <4 x i64> %vec.phi26.i3720
  %420 = select <4 x i1> %416, <4 x i64> %wide.load30.i3734, <4 x i64> %vec.phi27.i3721
  %421 = select <4 x i1> %417, <4 x i64> %wide.load31.i3738, <4 x i64> %vec.phi28.i3722
  %index.next.i3739 = add i64 %index.i3718, 16
  %422 = icmp eq i64 %n.vec.i3713, %index.next.i3739
  br i1 %422, label %middle.block.i3754, label %vector.body.i3740, !llvm.loop !47

middle.block.i3754:                               ; preds = %vector.body.i3740
  %ind.end.i3714 = or i64 %n.vec.i3713, 1
  %rdx.minmax.cmp.i3741 = icmp slt <4 x i64> %418, %419
  %rdx.minmax.select.i3742 = select <4 x i1> %rdx.minmax.cmp.i3741, <4 x i64> %418, <4 x i64> %419
  %rdx.minmax.cmp32.i3743 = icmp slt <4 x i64> %rdx.minmax.select.i3742, %420
  %rdx.minmax.select33.i3744 = select <4 x i1> %rdx.minmax.cmp32.i3743, <4 x i64> %rdx.minmax.select.i3742, <4 x i64> %420
  %rdx.minmax.cmp34.i3745 = icmp slt <4 x i64> %rdx.minmax.select33.i3744, %421
  %rdx.minmax.select35.i3746 = select <4 x i1> %rdx.minmax.cmp34.i3745, <4 x i64> %rdx.minmax.select33.i3744, <4 x i64> %421
  %rdx.shuf.i3747 = shufflevector <4 x i64> %rdx.minmax.select35.i3746, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp56.i3748 = icmp slt <4 x i64> %rdx.minmax.select35.i3746, %rdx.shuf.i3747
  %rdx.minmax.select57.i3749 = select <4 x i1> %rdx.minmax.cmp56.i3748, <4 x i64> %rdx.minmax.select35.i3746, <4 x i64> %rdx.shuf.i3747
  %rdx.shuf58.i3750 = shufflevector <4 x i64> %rdx.minmax.select57.i3749, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp59.i3751 = icmp slt <4 x i64> %rdx.minmax.select57.i3749, %rdx.shuf58.i3750
  %rdx.minmax.select60.i3752 = select <4 x i1> %rdx.minmax.cmp59.i3751, <4 x i64> %rdx.minmax.select57.i3749, <4 x i64> %rdx.shuf58.i3750
  %423 = extractelement <4 x i64> %rdx.minmax.select60.i3752, i32 0
  %cmp.n.i3753 = icmp eq i64 %405, %n.vec.i3713
  br i1 %cmp.n.i3753, label %B342.endif.endif.endif.en...endif.1.endif.endif.endif, label %B24.i3700.preheader

B342.endif.endif.endif.en...endif.1.endif.endif.endif: ; preds = %B24.i3700, %middle.block.i3754, %B0.endif.endif.endif.i3707
  %.2681.0.ph = phi i64 [ %423, %middle.block.i3754 ], [ %.52.i3705, %B0.endif.endif.endif.i3707 ], [ %return_val.3.1.i3698, %B24.i3700 ]
  tail call void @NRT_decref(i8* nonnull %.2599)
  %.2727 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 32, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.2728 = icmp eq i8* %.2727, null
  br i1 %.2728, label %B342.endif.endif.endif.en...endif.2.endif.if, label %B342.endif.endif.endif.en...endif.2.endif.endif, !prof !3

B342.endif.endif.endif.en...endif.2.endif.if:     ; preds = %B342.endif.endif.endif.en...endif.1.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B342.endif.endif.endif.en...endif.2.endif.endif:  ; preds = %B342.endif.endif.endif.en...endif.1.endif.endif.endif
  %.5.i3681 = getelementptr i8, i8* %.2727, i64 24
  %424 = bitcast i8* %.5.i3681 to { i64, i64, i8, i64 }**
  %.6.i36825272 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %424, align 8
  %.2740 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i36825272, i64 0, i32 1
  store i64 1, i64* %.2740, align 8
  %.6.i36805273 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %424, align 8
  %.274610625 = bitcast { i64, i64, i8, i64 }* %.6.i36805273 to i64*
  store i64 0, i64* %.274610625, align 8
  %.6.i36785274 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %424, align 8
  %.2752 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i36785274, i64 0, i32 2
  store i8 0, i8* %.2752, align 1
  %.6.i36745275 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %424, align 8
  %.2765 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i36745275, i64 0, i32 3
  store i64 0, i64* %.2765, align 1
  %.6.i36705277 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %424, align 8
  %.279210626 = bitcast { i64, i64, i8, i64 }* %.6.i36705277 to i64*
  store i64 1, i64* %.279210626, align 8
  %.6.i36665278 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %424, align 8
  %.2805 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i36665278, i64 0, i32 3
  store i64 %.2681.0.ph, i64* %.2805, align 8
  %.6.i11.i3594 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %424, align 8, !noalias !104
  %.4061.i359510627 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3594 to i64*
  %.41.i3596 = load i64, i64* %.4061.i359510627, align 8, !noalias !104
  %.42.i3597 = icmp sgt i64 %.41.i3596, 0
  br i1 %.42.i3597, label %B0.endif.endif.endif.i3615, label %B0.endif.endif.endif.if.if, !prof !45

B24.i3608:                                        ; preds = %B24.i3608.preheader, %B24.i3608
  %return_val.2.025.i3598 = phi i64 [ %return_val.3.1.i3606, %B24.i3608 ], [ %return_val.2.025.i3598.ph, %B24.i3608.preheader ]
  %.14.024.i3599 = phi i64 [ %.129.i3604, %B24.i3608 ], [ %.14.024.i3599.ph, %B24.i3608.preheader ]
  %sunkaddr10628 = mul i64 %.14.024.i3599, 8
  %425 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3594 to i8*
  %sunkaddr10629 = getelementptr i8, i8* %425, i64 %sunkaddr10628
  %sunkaddr10630 = getelementptr i8, i8* %sunkaddr10629, i64 24
  %426 = bitcast i8* %sunkaddr10630 to i64*
  %.126.i3603 = load i64, i64* %426, align 8, !noalias !104
  %.129.i3604 = add nuw nsw i64 %.14.024.i3599, 1
  %.6.i7.not.i3605 = icmp sgt i64 %.126.i3603, %return_val.2.025.i3598
  %return_val.3.1.i3606 = select i1 %.6.i7.not.i3605, i64 %.126.i3603, i64 %return_val.2.025.i3598
  %exitcond.not.i3607 = icmp eq i64 %.41.i3596, %.129.i3604
  br i1 %exitcond.not.i3607, label %B342.endif.endif.endif.en...endif.2.endif.endif.endif, label %B24.i3608, !llvm.loop !58

B0.endif.endif.endif.i3615:                       ; preds = %B342.endif.endif.endif.en...endif.2.endif.endif
  %.50.i3612 = getelementptr { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11.i3594, i64 0, i32 3
  %.52.i3613 = load i64, i64* %.50.i3612, align 8, !noalias !104
  %.11623.not.i3614 = icmp eq i64 %.41.i3596, 1
  br i1 %.11623.not.i3614, label %B342.endif.endif.endif.en...endif.2.endif.endif.endif, label %B24.preheader.i3617

B24.preheader.i3617:                              ; preds = %B0.endif.endif.endif.i3615
  %427 = add nsw i64 %.41.i3596, -1
  %min.iters.check.i3616 = icmp ult i64 %427, 16
  br i1 %min.iters.check.i3616, label %B24.i3608.preheader, label %vector.ph.i3625

B24.i3608.preheader:                              ; preds = %middle.block.i3662, %B24.preheader.i3617
  %return_val.2.025.i3598.ph = phi i64 [ %445, %middle.block.i3662 ], [ %.52.i3613, %B24.preheader.i3617 ]
  %.14.024.i3599.ph = phi i64 [ %ind.end.i3622, %middle.block.i3662 ], [ 1, %B24.preheader.i3617 ]
  br label %B24.i3608

vector.ph.i3625:                                  ; preds = %B24.preheader.i3617
  %n.vec.i3621 = and i64 %427, -16
  %minmax.ident.splatinsert.i3623 = insertelement <4 x i64> undef, i64 %.52.i3613, i32 0
  %minmax.ident.splat.i3624 = shufflevector <4 x i64> %minmax.ident.splatinsert.i3623, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %vector.body.i3648

vector.body.i3648:                                ; preds = %vector.body.i3648, %vector.ph.i3625
  %index.i3626 = phi i64 [ 0, %vector.ph.i3625 ], [ %index.next.i3647, %vector.body.i3648 ]
  %vec.phi.i3627 = phi <4 x i64> [ %minmax.ident.splat.i3624, %vector.ph.i3625 ], [ %440, %vector.body.i3648 ]
  %vec.phi26.i3628 = phi <4 x i64> [ %minmax.ident.splat.i3624, %vector.ph.i3625 ], [ %441, %vector.body.i3648 ]
  %vec.phi27.i3629 = phi <4 x i64> [ %minmax.ident.splat.i3624, %vector.ph.i3625 ], [ %442, %vector.body.i3648 ]
  %vec.phi28.i3630 = phi <4 x i64> [ %minmax.ident.splat.i3624, %vector.ph.i3625 ], [ %443, %vector.body.i3648 ]
  %sunkaddr10631 = mul i64 %index.i3626, 8
  %428 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3594 to i8*
  %sunkaddr10632 = getelementptr i8, i8* %428, i64 %sunkaddr10631
  %sunkaddr10633 = getelementptr i8, i8* %sunkaddr10632, i64 32
  %429 = bitcast i8* %sunkaddr10633 to <4 x i64>*
  %wide.load.i3634 = load <4 x i64>, <4 x i64>* %429, align 8, !noalias !104
  %sunkaddr10634 = mul i64 %index.i3626, 8
  %430 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3594 to i8*
  %sunkaddr10635 = getelementptr i8, i8* %430, i64 %sunkaddr10634
  %sunkaddr10636 = getelementptr i8, i8* %sunkaddr10635, i64 64
  %431 = bitcast i8* %sunkaddr10636 to <4 x i64>*
  %wide.load29.i3638 = load <4 x i64>, <4 x i64>* %431, align 8, !noalias !104
  %sunkaddr10637 = mul i64 %index.i3626, 8
  %432 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3594 to i8*
  %sunkaddr10638 = getelementptr i8, i8* %432, i64 %sunkaddr10637
  %sunkaddr10639 = getelementptr i8, i8* %sunkaddr10638, i64 96
  %433 = bitcast i8* %sunkaddr10639 to <4 x i64>*
  %wide.load30.i3642 = load <4 x i64>, <4 x i64>* %433, align 8, !noalias !104
  %sunkaddr10640 = mul i64 %index.i3626, 8
  %434 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3594 to i8*
  %sunkaddr10641 = getelementptr i8, i8* %434, i64 %sunkaddr10640
  %sunkaddr10642 = getelementptr i8, i8* %sunkaddr10641, i64 128
  %435 = bitcast i8* %sunkaddr10642 to <4 x i64>*
  %wide.load31.i3646 = load <4 x i64>, <4 x i64>* %435, align 8, !noalias !104
  %436 = icmp sgt <4 x i64> %wide.load.i3634, %vec.phi.i3627
  %437 = icmp sgt <4 x i64> %wide.load29.i3638, %vec.phi26.i3628
  %438 = icmp sgt <4 x i64> %wide.load30.i3642, %vec.phi27.i3629
  %439 = icmp sgt <4 x i64> %wide.load31.i3646, %vec.phi28.i3630
  %440 = select <4 x i1> %436, <4 x i64> %wide.load.i3634, <4 x i64> %vec.phi.i3627
  %441 = select <4 x i1> %437, <4 x i64> %wide.load29.i3638, <4 x i64> %vec.phi26.i3628
  %442 = select <4 x i1> %438, <4 x i64> %wide.load30.i3642, <4 x i64> %vec.phi27.i3629
  %443 = select <4 x i1> %439, <4 x i64> %wide.load31.i3646, <4 x i64> %vec.phi28.i3630
  %index.next.i3647 = add i64 %index.i3626, 16
  %444 = icmp eq i64 %n.vec.i3621, %index.next.i3647
  br i1 %444, label %middle.block.i3662, label %vector.body.i3648, !llvm.loop !59

middle.block.i3662:                               ; preds = %vector.body.i3648
  %ind.end.i3622 = or i64 %n.vec.i3621, 1
  %rdx.minmax.cmp.i3649 = icmp sgt <4 x i64> %440, %441
  %rdx.minmax.select.i3650 = select <4 x i1> %rdx.minmax.cmp.i3649, <4 x i64> %440, <4 x i64> %441
  %rdx.minmax.cmp32.i3651 = icmp sgt <4 x i64> %rdx.minmax.select.i3650, %442
  %rdx.minmax.select33.i3652 = select <4 x i1> %rdx.minmax.cmp32.i3651, <4 x i64> %rdx.minmax.select.i3650, <4 x i64> %442
  %rdx.minmax.cmp34.i3653 = icmp sgt <4 x i64> %rdx.minmax.select33.i3652, %443
  %rdx.minmax.select35.i3654 = select <4 x i1> %rdx.minmax.cmp34.i3653, <4 x i64> %rdx.minmax.select33.i3652, <4 x i64> %443
  %rdx.shuf.i3655 = shufflevector <4 x i64> %rdx.minmax.select35.i3654, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp56.i3656 = icmp sgt <4 x i64> %rdx.minmax.select35.i3654, %rdx.shuf.i3655
  %rdx.minmax.select57.i3657 = select <4 x i1> %rdx.minmax.cmp56.i3656, <4 x i64> %rdx.minmax.select35.i3654, <4 x i64> %rdx.shuf.i3655
  %rdx.shuf58.i3658 = shufflevector <4 x i64> %rdx.minmax.select57.i3657, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp59.i3659 = icmp sgt <4 x i64> %rdx.minmax.select57.i3657, %rdx.shuf58.i3658
  %rdx.minmax.select60.i3660 = select <4 x i1> %rdx.minmax.cmp59.i3659, <4 x i64> %rdx.minmax.select57.i3657, <4 x i64> %rdx.shuf58.i3658
  %445 = extractelement <4 x i64> %rdx.minmax.select60.i3660, i32 0
  %cmp.n.i3661 = icmp eq i64 %427, %n.vec.i3621
  br i1 %cmp.n.i3661, label %B342.endif.endif.endif.en...endif.2.endif.endif.endif, label %B24.i3608.preheader

B342.endif.endif.endif.en...endif.2.endif.endif.endif: ; preds = %B24.i3608, %middle.block.i3662, %B0.endif.endif.endif.i3615
  %.2809.0.ph = phi i64 [ %445, %middle.block.i3662 ], [ %.52.i3613, %B0.endif.endif.endif.i3615 ], [ %return_val.3.1.i3606, %B24.i3608 ]
  tail call void @NRT_decref(i8* nonnull %.2727)
  %.2855 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 32, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.2856 = icmp eq i8* %.2855, null
  br i1 %.2856, label %B342.endif.endif.endif.en...endif.3.endif.if, label %B342.endif.endif.endif.en...endif.3.endif.endif, !prof !3

B342.endif.endif.endif.en...endif.3.endif.if:     ; preds = %B342.endif.endif.endif.en...endif.2.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B342.endif.endif.endif.en...endif.3.endif.endif:  ; preds = %B342.endif.endif.endif.en...endif.2.endif.endif.endif
  %.5.i3589 = getelementptr i8, i8* %.2855, i64 24
  %446 = bitcast i8* %.5.i3589 to { i64, i64, i8, i64 }**
  %.6.i35905279 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %446, align 8
  %.2868 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i35905279, i64 0, i32 1
  store i64 1, i64* %.2868, align 8
  %.6.i35885280 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %446, align 8
  %.287410643 = bitcast { i64, i64, i8, i64 }* %.6.i35885280 to i64*
  store i64 0, i64* %.287410643, align 8
  %.6.i35865281 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %446, align 8
  %.2880 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i35865281, i64 0, i32 2
  store i8 0, i8* %.2880, align 1
  %.6.i35825282 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %446, align 8
  %.2893 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i35825282, i64 0, i32 3
  store i64 0, i64* %.2893, align 1
  %.6.i35785284 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %446, align 8
  %.292010644 = bitcast { i64, i64, i8, i64 }* %.6.i35785284 to i64*
  store i64 1, i64* %.292010644, align 8
  %.6.i35745285 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %446, align 8
  %.2933 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i35745285, i64 0, i32 3
  store i64 %.2809.0.ph, i64* %.2933, align 8
  %.6.i11.i3502 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %446, align 8, !noalias !108
  %.4061.i350310645 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3502 to i64*
  %.41.i3504 = load i64, i64* %.4061.i350310645, align 8, !noalias !108
  %.42.i3505 = icmp sgt i64 %.41.i3504, 0
  br i1 %.42.i3505, label %B0.endif.endif.endif.i3523, label %B0.endif.endif.endif.if.if, !prof !45

B24.i3516:                                        ; preds = %B24.i3516.preheader, %B24.i3516
  %return_val.2.025.i3506 = phi i64 [ %return_val.3.1.i3514, %B24.i3516 ], [ %return_val.2.025.i3506.ph, %B24.i3516.preheader ]
  %.14.024.i3507 = phi i64 [ %.129.i3512, %B24.i3516 ], [ %.14.024.i3507.ph, %B24.i3516.preheader ]
  %sunkaddr10646 = mul i64 %.14.024.i3507, 8
  %447 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3502 to i8*
  %sunkaddr10647 = getelementptr i8, i8* %447, i64 %sunkaddr10646
  %sunkaddr10648 = getelementptr i8, i8* %sunkaddr10647, i64 24
  %448 = bitcast i8* %sunkaddr10648 to i64*
  %.126.i3511 = load i64, i64* %448, align 8, !noalias !108
  %.129.i3512 = add nuw nsw i64 %.14.024.i3507, 1
  %.6.i7.not.i3513 = icmp slt i64 %.126.i3511, %return_val.2.025.i3506
  %return_val.3.1.i3514 = select i1 %.6.i7.not.i3513, i64 %.126.i3511, i64 %return_val.2.025.i3506
  %exitcond.not.i3515 = icmp eq i64 %.41.i3504, %.129.i3512
  br i1 %exitcond.not.i3515, label %B342.endif.endif.endif.en...endif.3.endif.endif.endif, label %B24.i3516, !llvm.loop !46

B0.endif.endif.endif.i3523:                       ; preds = %B342.endif.endif.endif.en...endif.3.endif.endif
  %.50.i3520 = getelementptr { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11.i3502, i64 0, i32 3
  %.52.i3521 = load i64, i64* %.50.i3520, align 8, !noalias !108
  %.11623.not.i3522 = icmp eq i64 %.41.i3504, 1
  br i1 %.11623.not.i3522, label %B342.endif.endif.endif.en...endif.3.endif.endif.endif, label %B24.preheader.i3525

B24.preheader.i3525:                              ; preds = %B0.endif.endif.endif.i3523
  %449 = add nsw i64 %.41.i3504, -1
  %min.iters.check.i3524 = icmp ult i64 %449, 16
  br i1 %min.iters.check.i3524, label %B24.i3516.preheader, label %vector.ph.i3533

B24.i3516.preheader:                              ; preds = %middle.block.i3570, %B24.preheader.i3525
  %return_val.2.025.i3506.ph = phi i64 [ %467, %middle.block.i3570 ], [ %.52.i3521, %B24.preheader.i3525 ]
  %.14.024.i3507.ph = phi i64 [ %ind.end.i3530, %middle.block.i3570 ], [ 1, %B24.preheader.i3525 ]
  br label %B24.i3516

vector.ph.i3533:                                  ; preds = %B24.preheader.i3525
  %n.vec.i3529 = and i64 %449, -16
  %minmax.ident.splatinsert.i3531 = insertelement <4 x i64> undef, i64 %.52.i3521, i32 0
  %minmax.ident.splat.i3532 = shufflevector <4 x i64> %minmax.ident.splatinsert.i3531, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %vector.body.i3556

vector.body.i3556:                                ; preds = %vector.body.i3556, %vector.ph.i3533
  %index.i3534 = phi i64 [ 0, %vector.ph.i3533 ], [ %index.next.i3555, %vector.body.i3556 ]
  %vec.phi.i3535 = phi <4 x i64> [ %minmax.ident.splat.i3532, %vector.ph.i3533 ], [ %462, %vector.body.i3556 ]
  %vec.phi26.i3536 = phi <4 x i64> [ %minmax.ident.splat.i3532, %vector.ph.i3533 ], [ %463, %vector.body.i3556 ]
  %vec.phi27.i3537 = phi <4 x i64> [ %minmax.ident.splat.i3532, %vector.ph.i3533 ], [ %464, %vector.body.i3556 ]
  %vec.phi28.i3538 = phi <4 x i64> [ %minmax.ident.splat.i3532, %vector.ph.i3533 ], [ %465, %vector.body.i3556 ]
  %sunkaddr10649 = mul i64 %index.i3534, 8
  %450 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3502 to i8*
  %sunkaddr10650 = getelementptr i8, i8* %450, i64 %sunkaddr10649
  %sunkaddr10651 = getelementptr i8, i8* %sunkaddr10650, i64 32
  %451 = bitcast i8* %sunkaddr10651 to <4 x i64>*
  %wide.load.i3542 = load <4 x i64>, <4 x i64>* %451, align 8, !noalias !108
  %sunkaddr10652 = mul i64 %index.i3534, 8
  %452 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3502 to i8*
  %sunkaddr10653 = getelementptr i8, i8* %452, i64 %sunkaddr10652
  %sunkaddr10654 = getelementptr i8, i8* %sunkaddr10653, i64 64
  %453 = bitcast i8* %sunkaddr10654 to <4 x i64>*
  %wide.load29.i3546 = load <4 x i64>, <4 x i64>* %453, align 8, !noalias !108
  %sunkaddr10655 = mul i64 %index.i3534, 8
  %454 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3502 to i8*
  %sunkaddr10656 = getelementptr i8, i8* %454, i64 %sunkaddr10655
  %sunkaddr10657 = getelementptr i8, i8* %sunkaddr10656, i64 96
  %455 = bitcast i8* %sunkaddr10657 to <4 x i64>*
  %wide.load30.i3550 = load <4 x i64>, <4 x i64>* %455, align 8, !noalias !108
  %sunkaddr10658 = mul i64 %index.i3534, 8
  %456 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3502 to i8*
  %sunkaddr10659 = getelementptr i8, i8* %456, i64 %sunkaddr10658
  %sunkaddr10660 = getelementptr i8, i8* %sunkaddr10659, i64 128
  %457 = bitcast i8* %sunkaddr10660 to <4 x i64>*
  %wide.load31.i3554 = load <4 x i64>, <4 x i64>* %457, align 8, !noalias !108
  %458 = icmp slt <4 x i64> %wide.load.i3542, %vec.phi.i3535
  %459 = icmp slt <4 x i64> %wide.load29.i3546, %vec.phi26.i3536
  %460 = icmp slt <4 x i64> %wide.load30.i3550, %vec.phi27.i3537
  %461 = icmp slt <4 x i64> %wide.load31.i3554, %vec.phi28.i3538
  %462 = select <4 x i1> %458, <4 x i64> %wide.load.i3542, <4 x i64> %vec.phi.i3535
  %463 = select <4 x i1> %459, <4 x i64> %wide.load29.i3546, <4 x i64> %vec.phi26.i3536
  %464 = select <4 x i1> %460, <4 x i64> %wide.load30.i3550, <4 x i64> %vec.phi27.i3537
  %465 = select <4 x i1> %461, <4 x i64> %wide.load31.i3554, <4 x i64> %vec.phi28.i3538
  %index.next.i3555 = add i64 %index.i3534, 16
  %466 = icmp eq i64 %n.vec.i3529, %index.next.i3555
  br i1 %466, label %middle.block.i3570, label %vector.body.i3556, !llvm.loop !47

middle.block.i3570:                               ; preds = %vector.body.i3556
  %ind.end.i3530 = or i64 %n.vec.i3529, 1
  %rdx.minmax.cmp.i3557 = icmp slt <4 x i64> %462, %463
  %rdx.minmax.select.i3558 = select <4 x i1> %rdx.minmax.cmp.i3557, <4 x i64> %462, <4 x i64> %463
  %rdx.minmax.cmp32.i3559 = icmp slt <4 x i64> %rdx.minmax.select.i3558, %464
  %rdx.minmax.select33.i3560 = select <4 x i1> %rdx.minmax.cmp32.i3559, <4 x i64> %rdx.minmax.select.i3558, <4 x i64> %464
  %rdx.minmax.cmp34.i3561 = icmp slt <4 x i64> %rdx.minmax.select33.i3560, %465
  %rdx.minmax.select35.i3562 = select <4 x i1> %rdx.minmax.cmp34.i3561, <4 x i64> %rdx.minmax.select33.i3560, <4 x i64> %465
  %rdx.shuf.i3563 = shufflevector <4 x i64> %rdx.minmax.select35.i3562, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp56.i3564 = icmp slt <4 x i64> %rdx.minmax.select35.i3562, %rdx.shuf.i3563
  %rdx.minmax.select57.i3565 = select <4 x i1> %rdx.minmax.cmp56.i3564, <4 x i64> %rdx.minmax.select35.i3562, <4 x i64> %rdx.shuf.i3563
  %rdx.shuf58.i3566 = shufflevector <4 x i64> %rdx.minmax.select57.i3565, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp59.i3567 = icmp slt <4 x i64> %rdx.minmax.select57.i3565, %rdx.shuf58.i3566
  %rdx.minmax.select60.i3568 = select <4 x i1> %rdx.minmax.cmp59.i3567, <4 x i64> %rdx.minmax.select57.i3565, <4 x i64> %rdx.shuf58.i3566
  %467 = extractelement <4 x i64> %rdx.minmax.select60.i3568, i32 0
  %cmp.n.i3569 = icmp eq i64 %449, %n.vec.i3529
  br i1 %cmp.n.i3569, label %B342.endif.endif.endif.en...endif.3.endif.endif.endif, label %B24.i3516.preheader

B342.endif.endif.endif.en...endif.3.endif.endif.endif: ; preds = %B24.i3516, %middle.block.i3570, %B0.endif.endif.endif.i3523
  %.2937.0.ph = phi i64 [ %467, %middle.block.i3570 ], [ %.52.i3521, %B0.endif.endif.endif.i3523 ], [ %return_val.3.1.i3514, %B24.i3516 ]
  tail call void @NRT_decref(i8* nonnull %.2855)
  %.2983 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 32, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.2984 = icmp eq i8* %.2983, null
  br i1 %.2984, label %B342.endif.endif.endif.en...endif.4.endif.if, label %B342.endif.endif.endif.en...endif.4.endif.endif, !prof !3

B342.endif.endif.endif.en...endif.4.endif.if:     ; preds = %B342.endif.endif.endif.en...endif.3.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B342.endif.endif.endif.en...endif.4.endif.endif:  ; preds = %B342.endif.endif.endif.en...endif.3.endif.endif.endif
  %.5.i3497 = getelementptr i8, i8* %.2983, i64 24
  %468 = bitcast i8* %.5.i3497 to { i64, i64, i8, i64 }**
  %.6.i34985286 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %468, align 8
  %.2996 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i34985286, i64 0, i32 1
  store i64 1, i64* %.2996, align 8
  %.6.i34965287 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %468, align 8
  %.300210661 = bitcast { i64, i64, i8, i64 }* %.6.i34965287 to i64*
  store i64 0, i64* %.300210661, align 8
  %.6.i34945288 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %468, align 8
  %.3008 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i34945288, i64 0, i32 2
  store i8 0, i8* %.3008, align 1
  %.6.i34905289 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %468, align 8
  %.3021 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i34905289, i64 0, i32 3
  store i64 0, i64* %.3021, align 1
  %.6.i34865291 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %468, align 8
  %.304810662 = bitcast { i64, i64, i8, i64 }* %.6.i34865291 to i64*
  store i64 1, i64* %.304810662, align 8
  %.6.i34825292 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %468, align 8
  %.3061 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i34825292, i64 0, i32 3
  store i64 522179, i64* %.3061, align 8
  %.6.i11.i3410 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %468, align 8, !noalias !112
  %.4061.i341110663 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3410 to i64*
  %.41.i3412 = load i64, i64* %.4061.i341110663, align 8, !noalias !112
  %.42.i3413 = icmp sgt i64 %.41.i3412, 0
  br i1 %.42.i3413, label %B0.endif.endif.endif.i3431, label %B0.endif.endif.endif.if.if, !prof !45

B24.i3424:                                        ; preds = %B24.i3424.preheader, %B24.i3424
  %return_val.2.025.i3414 = phi i64 [ %return_val.3.1.i3422, %B24.i3424 ], [ %return_val.2.025.i3414.ph, %B24.i3424.preheader ]
  %.14.024.i3415 = phi i64 [ %.129.i3420, %B24.i3424 ], [ %.14.024.i3415.ph, %B24.i3424.preheader ]
  %sunkaddr10664 = mul i64 %.14.024.i3415, 8
  %469 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3410 to i8*
  %sunkaddr10665 = getelementptr i8, i8* %469, i64 %sunkaddr10664
  %sunkaddr10666 = getelementptr i8, i8* %sunkaddr10665, i64 24
  %470 = bitcast i8* %sunkaddr10666 to i64*
  %.126.i3419 = load i64, i64* %470, align 8, !noalias !112
  %.129.i3420 = add nuw nsw i64 %.14.024.i3415, 1
  %.6.i7.not.i3421 = icmp sgt i64 %.126.i3419, %return_val.2.025.i3414
  %return_val.3.1.i3422 = select i1 %.6.i7.not.i3421, i64 %.126.i3419, i64 %return_val.2.025.i3414
  %exitcond.not.i3423 = icmp eq i64 %.41.i3412, %.129.i3420
  br i1 %exitcond.not.i3423, label %B342.endif.endif.endif.en...endif.4.endif.endif.endif, label %B24.i3424, !llvm.loop !58

B0.endif.endif.endif.i3431:                       ; preds = %B342.endif.endif.endif.en...endif.4.endif.endif
  %.50.i3428 = getelementptr { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11.i3410, i64 0, i32 3
  %.52.i3429 = load i64, i64* %.50.i3428, align 8, !noalias !112
  %.11623.not.i3430 = icmp eq i64 %.41.i3412, 1
  br i1 %.11623.not.i3430, label %B342.endif.endif.endif.en...endif.4.endif.endif.endif, label %B24.preheader.i3433

B24.preheader.i3433:                              ; preds = %B0.endif.endif.endif.i3431
  %471 = add nsw i64 %.41.i3412, -1
  %min.iters.check.i3432 = icmp ult i64 %471, 16
  br i1 %min.iters.check.i3432, label %B24.i3424.preheader, label %vector.ph.i3441

B24.i3424.preheader:                              ; preds = %middle.block.i3478, %B24.preheader.i3433
  %return_val.2.025.i3414.ph = phi i64 [ %489, %middle.block.i3478 ], [ %.52.i3429, %B24.preheader.i3433 ]
  %.14.024.i3415.ph = phi i64 [ %ind.end.i3438, %middle.block.i3478 ], [ 1, %B24.preheader.i3433 ]
  br label %B24.i3424

vector.ph.i3441:                                  ; preds = %B24.preheader.i3433
  %n.vec.i3437 = and i64 %471, -16
  %minmax.ident.splatinsert.i3439 = insertelement <4 x i64> undef, i64 %.52.i3429, i32 0
  %minmax.ident.splat.i3440 = shufflevector <4 x i64> %minmax.ident.splatinsert.i3439, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %vector.body.i3464

vector.body.i3464:                                ; preds = %vector.body.i3464, %vector.ph.i3441
  %index.i3442 = phi i64 [ 0, %vector.ph.i3441 ], [ %index.next.i3463, %vector.body.i3464 ]
  %vec.phi.i3443 = phi <4 x i64> [ %minmax.ident.splat.i3440, %vector.ph.i3441 ], [ %484, %vector.body.i3464 ]
  %vec.phi26.i3444 = phi <4 x i64> [ %minmax.ident.splat.i3440, %vector.ph.i3441 ], [ %485, %vector.body.i3464 ]
  %vec.phi27.i3445 = phi <4 x i64> [ %minmax.ident.splat.i3440, %vector.ph.i3441 ], [ %486, %vector.body.i3464 ]
  %vec.phi28.i3446 = phi <4 x i64> [ %minmax.ident.splat.i3440, %vector.ph.i3441 ], [ %487, %vector.body.i3464 ]
  %sunkaddr10667 = mul i64 %index.i3442, 8
  %472 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3410 to i8*
  %sunkaddr10668 = getelementptr i8, i8* %472, i64 %sunkaddr10667
  %sunkaddr10669 = getelementptr i8, i8* %sunkaddr10668, i64 32
  %473 = bitcast i8* %sunkaddr10669 to <4 x i64>*
  %wide.load.i3450 = load <4 x i64>, <4 x i64>* %473, align 8, !noalias !112
  %sunkaddr10670 = mul i64 %index.i3442, 8
  %474 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3410 to i8*
  %sunkaddr10671 = getelementptr i8, i8* %474, i64 %sunkaddr10670
  %sunkaddr10672 = getelementptr i8, i8* %sunkaddr10671, i64 64
  %475 = bitcast i8* %sunkaddr10672 to <4 x i64>*
  %wide.load29.i3454 = load <4 x i64>, <4 x i64>* %475, align 8, !noalias !112
  %sunkaddr10673 = mul i64 %index.i3442, 8
  %476 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3410 to i8*
  %sunkaddr10674 = getelementptr i8, i8* %476, i64 %sunkaddr10673
  %sunkaddr10675 = getelementptr i8, i8* %sunkaddr10674, i64 96
  %477 = bitcast i8* %sunkaddr10675 to <4 x i64>*
  %wide.load30.i3458 = load <4 x i64>, <4 x i64>* %477, align 8, !noalias !112
  %sunkaddr10676 = mul i64 %index.i3442, 8
  %478 = bitcast { i64, i64, i8, i64 }* %.6.i11.i3410 to i8*
  %sunkaddr10677 = getelementptr i8, i8* %478, i64 %sunkaddr10676
  %sunkaddr10678 = getelementptr i8, i8* %sunkaddr10677, i64 128
  %479 = bitcast i8* %sunkaddr10678 to <4 x i64>*
  %wide.load31.i3462 = load <4 x i64>, <4 x i64>* %479, align 8, !noalias !112
  %480 = icmp sgt <4 x i64> %wide.load.i3450, %vec.phi.i3443
  %481 = icmp sgt <4 x i64> %wide.load29.i3454, %vec.phi26.i3444
  %482 = icmp sgt <4 x i64> %wide.load30.i3458, %vec.phi27.i3445
  %483 = icmp sgt <4 x i64> %wide.load31.i3462, %vec.phi28.i3446
  %484 = select <4 x i1> %480, <4 x i64> %wide.load.i3450, <4 x i64> %vec.phi.i3443
  %485 = select <4 x i1> %481, <4 x i64> %wide.load29.i3454, <4 x i64> %vec.phi26.i3444
  %486 = select <4 x i1> %482, <4 x i64> %wide.load30.i3458, <4 x i64> %vec.phi27.i3445
  %487 = select <4 x i1> %483, <4 x i64> %wide.load31.i3462, <4 x i64> %vec.phi28.i3446
  %index.next.i3463 = add i64 %index.i3442, 16
  %488 = icmp eq i64 %n.vec.i3437, %index.next.i3463
  br i1 %488, label %middle.block.i3478, label %vector.body.i3464, !llvm.loop !59

middle.block.i3478:                               ; preds = %vector.body.i3464
  %ind.end.i3438 = or i64 %n.vec.i3437, 1
  %rdx.minmax.cmp.i3465 = icmp sgt <4 x i64> %484, %485
  %rdx.minmax.select.i3466 = select <4 x i1> %rdx.minmax.cmp.i3465, <4 x i64> %484, <4 x i64> %485
  %rdx.minmax.cmp32.i3467 = icmp sgt <4 x i64> %rdx.minmax.select.i3466, %486
  %rdx.minmax.select33.i3468 = select <4 x i1> %rdx.minmax.cmp32.i3467, <4 x i64> %rdx.minmax.select.i3466, <4 x i64> %486
  %rdx.minmax.cmp34.i3469 = icmp sgt <4 x i64> %rdx.minmax.select33.i3468, %487
  %rdx.minmax.select35.i3470 = select <4 x i1> %rdx.minmax.cmp34.i3469, <4 x i64> %rdx.minmax.select33.i3468, <4 x i64> %487
  %rdx.shuf.i3471 = shufflevector <4 x i64> %rdx.minmax.select35.i3470, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp56.i3472 = icmp sgt <4 x i64> %rdx.minmax.select35.i3470, %rdx.shuf.i3471
  %rdx.minmax.select57.i3473 = select <4 x i1> %rdx.minmax.cmp56.i3472, <4 x i64> %rdx.minmax.select35.i3470, <4 x i64> %rdx.shuf.i3471
  %rdx.shuf58.i3474 = shufflevector <4 x i64> %rdx.minmax.select57.i3473, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp59.i3475 = icmp sgt <4 x i64> %rdx.minmax.select57.i3473, %rdx.shuf58.i3474
  %rdx.minmax.select60.i3476 = select <4 x i1> %rdx.minmax.cmp59.i3475, <4 x i64> %rdx.minmax.select57.i3473, <4 x i64> %rdx.shuf58.i3474
  %489 = extractelement <4 x i64> %rdx.minmax.select60.i3476, i32 0
  %cmp.n.i3477 = icmp eq i64 %471, %n.vec.i3437
  br i1 %cmp.n.i3477, label %B342.endif.endif.endif.en...endif.4.endif.endif.endif, label %B24.i3424.preheader

B342.endif.endif.endif.en...endif.4.endif.endif.endif: ; preds = %B24.i3424, %middle.block.i3478, %B0.endif.endif.endif.i3431
  %.3065.0.ph = phi i64 [ %489, %middle.block.i3478 ], [ %.52.i3429, %B0.endif.endif.endif.i3431 ], [ %return_val.3.1.i3422, %B24.i3424 ]
  tail call void @NRT_decref(i8* nonnull %.2983)
  %.3135 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 40, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.3136 = icmp eq i8* %.3135, null
  br i1 %.3136, label %B376.endif.endif.if, label %B376.endif.endif.endif, !prof !3

B376.endif.endif.if:                              ; preds = %B342.endif.endif.endif.en...endif.4.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B376.endif.endif.endif:                           ; preds = %B342.endif.endif.endif.en...endif.4.endif.endif.endif
  %.5.i3405 = getelementptr i8, i8* %.3135, i64 24
  %490 = bitcast i8* %.5.i3405 to { i64, i64, i8, i64 }**
  %.6.i34065293 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %490, align 8
  %.3148 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i34065293, i64 0, i32 1
  store i64 2, i64* %.3148, align 8
  %.6.i34045294 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %490, align 8
  %.315410679 = bitcast { i64, i64, i8, i64 }* %.6.i34045294 to i64*
  store i64 0, i64* %.315410679, align 8
  %.6.i34025295 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %490, align 8
  %.3160 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i34025295, i64 0, i32 2
  store i8 0, i8* %.3160, align 1
  %.6.i33985296 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %490, align 8
  %.3173 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i33985296, i64 0, i32 3
  %.3184 = bitcast i64* %.3173 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %.3184, i8 0, i64 16, i1 false)
  %.6.i33945298 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %490, align 8
  %.320010680 = bitcast { i64, i64, i8, i64 }* %.6.i33945298 to i64*
  store i64 2, i64* %.320010680, align 8
  %.6.i33905299 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %490, align 8
  %.3213 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i33905299, i64 0, i32 3
  store i64 19219, i64* %.3213, align 8
  %.6.i33865300 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %490, align 8
  %.3227 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i33865300, i64 0, i32 3
  %.3228 = getelementptr i64, i64* %.3227, i64 1
  store i64 1, i64* %.3228, align 8
  %.6.i60553016951 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %490, align 8
  %.3281695210681 = bitcast { i64, i64, i8, i64 }* %.6.i60553016951 to i64*
  %.32826953 = load i64, i64* %.3281695210681, align 8
  %.32836954 = icmp sgt i64 %.32826953, 0
  br i1 %.32836954, label %B414.lr.ph, label %B416

B414.lr.ph:                                       ; preds = %B376.endif.endif.endif
  %min.iters.check7705 = icmp ult i64 %.32826953, 16
  br i1 %min.iters.check7705, label %B414.preheader, label %vector.ph7706

B414.preheader:                                   ; preds = %middle.block7702, %B414.lr.ph
  %temp.2.467.2.06956.ph = phi i64 [ 1, %B414.lr.ph ], [ %504, %middle.block7702 ]
  %.3247.06955.ph = phi i64 [ 0, %B414.lr.ph ], [ %n.vec7708, %middle.block7702 ]
  br label %B414

vector.ph7706:                                    ; preds = %B414.lr.ph
  %n.vec7708 = and i64 %.32826953, -16
  br label %vector.body7704

vector.body7704:                                  ; preds = %vector.body7704, %vector.ph7706
  %index7709 = phi i64 [ 0, %vector.ph7706 ], [ %index.next7710, %vector.body7704 ]
  %vec.phi7713 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7706 ], [ %499, %vector.body7704 ]
  %vec.phi7714 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7706 ], [ %500, %vector.body7704 ]
  %vec.phi7715 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7706 ], [ %501, %vector.body7704 ]
  %vec.phi7716 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7706 ], [ %502, %vector.body7704 ]
  %sunkaddr10682 = mul i64 %index7709, 8
  %491 = bitcast { i64, i64, i8, i64 }* %.6.i60553016951 to i8*
  %sunkaddr10683 = getelementptr i8, i8* %491, i64 %sunkaddr10682
  %sunkaddr10684 = getelementptr i8, i8* %sunkaddr10683, i64 24
  %492 = bitcast i8* %sunkaddr10684 to <4 x i64>*
  %wide.load7717 = load <4 x i64>, <4 x i64>* %492, align 8
  %sunkaddr10685 = mul i64 %index7709, 8
  %493 = bitcast { i64, i64, i8, i64 }* %.6.i60553016951 to i8*
  %sunkaddr10686 = getelementptr i8, i8* %493, i64 %sunkaddr10685
  %sunkaddr10687 = getelementptr i8, i8* %sunkaddr10686, i64 56
  %494 = bitcast i8* %sunkaddr10687 to <4 x i64>*
  %wide.load7718 = load <4 x i64>, <4 x i64>* %494, align 8
  %sunkaddr10688 = mul i64 %index7709, 8
  %495 = bitcast { i64, i64, i8, i64 }* %.6.i60553016951 to i8*
  %sunkaddr10689 = getelementptr i8, i8* %495, i64 %sunkaddr10688
  %sunkaddr10690 = getelementptr i8, i8* %sunkaddr10689, i64 88
  %496 = bitcast i8* %sunkaddr10690 to <4 x i64>*
  %wide.load7719 = load <4 x i64>, <4 x i64>* %496, align 8
  %sunkaddr10691 = mul i64 %index7709, 8
  %497 = bitcast { i64, i64, i8, i64 }* %.6.i60553016951 to i8*
  %sunkaddr10692 = getelementptr i8, i8* %497, i64 %sunkaddr10691
  %sunkaddr10693 = getelementptr i8, i8* %sunkaddr10692, i64 120
  %498 = bitcast i8* %sunkaddr10693 to <4 x i64>*
  %wide.load7720 = load <4 x i64>, <4 x i64>* %498, align 8
  %499 = mul <4 x i64> %wide.load7717, %vec.phi7713
  %500 = mul <4 x i64> %wide.load7718, %vec.phi7714
  %501 = mul <4 x i64> %wide.load7719, %vec.phi7715
  %502 = mul <4 x i64> %wide.load7720, %vec.phi7716
  %index.next7710 = add i64 %index7709, 16
  %503 = icmp eq i64 %n.vec7708, %index.next7710
  br i1 %503, label %middle.block7702, label %vector.body7704, !llvm.loop !116

middle.block7702:                                 ; preds = %vector.body7704
  %bin.rdx7721 = mul <4 x i64> %500, %499
  %bin.rdx7722 = mul <4 x i64> %501, %bin.rdx7721
  %bin.rdx7723 = mul <4 x i64> %502, %bin.rdx7722
  %rdx.shuf10099 = shufflevector <4 x i64> %bin.rdx7723, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10100 = mul <4 x i64> %bin.rdx7723, %rdx.shuf10099
  %rdx.shuf10101 = shufflevector <4 x i64> %bin.rdx10100, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10102 = mul <4 x i64> %bin.rdx10100, %rdx.shuf10101
  %504 = extractelement <4 x i64> %bin.rdx10102, i32 0
  %cmp.n7712 = icmp eq i64 %.32826953, %n.vec7708
  br i1 %cmp.n7712, label %B416, label %B414.preheader

B416.endif.endif.if:                              ; preds = %B416
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B416.endif.endif.endif:                           ; preds = %B416
  %.5.i3381 = getelementptr i8, i8* %.3359, i64 24
  %505 = bitcast i8* %.5.i3381 to { i64, i64, i8, i64 }**
  %.6.i33825302 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %505, align 8
  %.3372 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i33825302, i64 0, i32 1
  store i64 3, i64* %.3372, align 8
  %.6.i33805303 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %505, align 8
  %.337810694 = bitcast { i64, i64, i8, i64 }* %.6.i33805303 to i64*
  store i64 0, i64* %.337810694, align 8
  %.6.i33785304 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %505, align 8
  %.3384 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i33785304, i64 0, i32 2
  store i8 0, i8* %.3384, align 1
  %.6.i33745305 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %505, align 8
  %.3397 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i33745305, i64 0, i32 3
  %.3408 = bitcast i64* %.3397 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(24) %.3408, i8 0, i64 24, i1 false)
  %.6.i33705307 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %505, align 8
  %.342410695 = bitcast { i64, i64, i8, i64 }* %.6.i33705307 to i64*
  store i64 3, i64* %.342410695, align 8
  %.6.i33665308 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %505, align 8
  %.3437 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i33665308, i64 0, i32 3
  store i64 7, i64* %.3437, align 8
  %.6.i33625309 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %505, align 8
  %.3451 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i33625309, i64 0, i32 3
  %.3452 = getelementptr i64, i64* %.3451, i64 1
  store i64 8, i64* %.3452, align 8
  %.6.i33585310 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %505, align 8
  %.3465 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i33585310, i64 0, i32 3
  %.3466 = getelementptr i64, i64* %.3465, i64 2
  store i64 14, i64* %.3466, align 8
  %.6.i68953116943 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %505, align 8
  %.3515694410696 = bitcast { i64, i64, i8, i64 }* %.6.i68953116943 to i64*
  %.35166945 = load i64, i64* %.3515694410696, align 8
  %.35176946 = icmp sgt i64 %.35166945, 0
  br i1 %.35176946, label %B458.lr.ph, label %B460

B458.lr.ph:                                       ; preds = %B416.endif.endif.endif
  %min.iters.check7728 = icmp ult i64 %.35166945, 16
  br i1 %min.iters.check7728, label %B458.preheader, label %vector.ph7729

B458.preheader:                                   ; preds = %middle.block7725, %B458.lr.ph
  %temp.2.485.2.06948.ph = phi i64 [ 1, %B458.lr.ph ], [ %519, %middle.block7725 ]
  %.3481.06947.ph = phi i64 [ 0, %B458.lr.ph ], [ %n.vec7731, %middle.block7725 ]
  br label %B458

vector.ph7729:                                    ; preds = %B458.lr.ph
  %n.vec7731 = and i64 %.35166945, -16
  br label %vector.body7727

vector.body7727:                                  ; preds = %vector.body7727, %vector.ph7729
  %index7732 = phi i64 [ 0, %vector.ph7729 ], [ %index.next7733, %vector.body7727 ]
  %vec.phi7736 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7729 ], [ %514, %vector.body7727 ]
  %vec.phi7737 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7729 ], [ %515, %vector.body7727 ]
  %vec.phi7738 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7729 ], [ %516, %vector.body7727 ]
  %vec.phi7739 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7729 ], [ %517, %vector.body7727 ]
  %sunkaddr10697 = mul i64 %index7732, 8
  %506 = bitcast { i64, i64, i8, i64 }* %.6.i68953116943 to i8*
  %sunkaddr10698 = getelementptr i8, i8* %506, i64 %sunkaddr10697
  %sunkaddr10699 = getelementptr i8, i8* %sunkaddr10698, i64 24
  %507 = bitcast i8* %sunkaddr10699 to <4 x i64>*
  %wide.load7740 = load <4 x i64>, <4 x i64>* %507, align 8
  %sunkaddr10700 = mul i64 %index7732, 8
  %508 = bitcast { i64, i64, i8, i64 }* %.6.i68953116943 to i8*
  %sunkaddr10701 = getelementptr i8, i8* %508, i64 %sunkaddr10700
  %sunkaddr10702 = getelementptr i8, i8* %sunkaddr10701, i64 56
  %509 = bitcast i8* %sunkaddr10702 to <4 x i64>*
  %wide.load7741 = load <4 x i64>, <4 x i64>* %509, align 8
  %sunkaddr10703 = mul i64 %index7732, 8
  %510 = bitcast { i64, i64, i8, i64 }* %.6.i68953116943 to i8*
  %sunkaddr10704 = getelementptr i8, i8* %510, i64 %sunkaddr10703
  %sunkaddr10705 = getelementptr i8, i8* %sunkaddr10704, i64 88
  %511 = bitcast i8* %sunkaddr10705 to <4 x i64>*
  %wide.load7742 = load <4 x i64>, <4 x i64>* %511, align 8
  %sunkaddr10706 = mul i64 %index7732, 8
  %512 = bitcast { i64, i64, i8, i64 }* %.6.i68953116943 to i8*
  %sunkaddr10707 = getelementptr i8, i8* %512, i64 %sunkaddr10706
  %sunkaddr10708 = getelementptr i8, i8* %sunkaddr10707, i64 120
  %513 = bitcast i8* %sunkaddr10708 to <4 x i64>*
  %wide.load7743 = load <4 x i64>, <4 x i64>* %513, align 8
  %514 = mul <4 x i64> %wide.load7740, %vec.phi7736
  %515 = mul <4 x i64> %wide.load7741, %vec.phi7737
  %516 = mul <4 x i64> %wide.load7742, %vec.phi7738
  %517 = mul <4 x i64> %wide.load7743, %vec.phi7739
  %index.next7733 = add i64 %index7732, 16
  %518 = icmp eq i64 %n.vec7731, %index.next7733
  br i1 %518, label %middle.block7725, label %vector.body7727, !llvm.loop !117

middle.block7725:                                 ; preds = %vector.body7727
  %bin.rdx7744 = mul <4 x i64> %515, %514
  %bin.rdx7745 = mul <4 x i64> %516, %bin.rdx7744
  %bin.rdx7746 = mul <4 x i64> %517, %bin.rdx7745
  %rdx.shuf10103 = shufflevector <4 x i64> %bin.rdx7746, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10104 = mul <4 x i64> %bin.rdx7746, %rdx.shuf10103
  %rdx.shuf10105 = shufflevector <4 x i64> %bin.rdx10104, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10106 = mul <4 x i64> %bin.rdx10104, %rdx.shuf10105
  %519 = extractelement <4 x i64> %bin.rdx10106, i32 0
  %cmp.n7735 = icmp eq i64 %.35166945, %n.vec7731
  br i1 %cmp.n7735, label %B460, label %B458.preheader

B460.endif.endif.if:                              ; preds = %B460
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B460.endif.endif.endif:                           ; preds = %B460
  %.5.i3353 = getelementptr i8, i8* %.3590, i64 24
  %520 = bitcast i8* %.5.i3353 to { i64, i64, i8, i64 }**
  %.6.i33545312 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %520, align 8
  %.3603 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i33545312, i64 0, i32 1
  store i64 3, i64* %.3603, align 8
  %.6.i33525313 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %520, align 8
  %.360910709 = bitcast { i64, i64, i8, i64 }* %.6.i33525313 to i64*
  store i64 0, i64* %.360910709, align 8
  %.6.i33505314 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %520, align 8
  %.3615 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i33505314, i64 0, i32 2
  store i8 0, i8* %.3615, align 1
  %.6.i33465315 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %520, align 8
  %.3628 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i33465315, i64 0, i32 3
  %.3639 = bitcast i64* %.3628 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(24) %.3639, i8 0, i64 24, i1 false)
  %.6.i33425317 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %520, align 8
  %.365510710 = bitcast { i64, i64, i8, i64 }* %.6.i33425317 to i64*
  store i64 3, i64* %.365510710, align 8
  %.6.i33385318 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %520, align 8
  %.3668 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i33385318, i64 0, i32 3
  store i64 8, i64* %.3668, align 8
  %.6.i33345319 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %520, align 8
  %.3682 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i33345319, i64 0, i32 3
  %.3683 = getelementptr i64, i64* %.3682, i64 1
  store i64 2, i64* %.3683, align 8
  %.6.i33305320 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %520, align 8
  %.3696 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i33305320, i64 0, i32 3
  %.3697 = getelementptr i64, i64* %.3696, i64 2
  store i64 12, i64* %.3697, align 8
  %.6.i77353216935 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %520, align 8
  %.3746693610711 = bitcast { i64, i64, i8, i64 }* %.6.i77353216935 to i64*
  %.37476937 = load i64, i64* %.3746693610711, align 8
  %.37486938 = icmp sgt i64 %.37476937, 0
  br i1 %.37486938, label %B500.lr.ph, label %B502

B500.lr.ph:                                       ; preds = %B460.endif.endif.endif
  %min.iters.check7751 = icmp ult i64 %.37476937, 16
  br i1 %min.iters.check7751, label %B500.preheader, label %vector.ph7752

B500.preheader:                                   ; preds = %middle.block7748, %B500.lr.ph
  %temp.2.503.2.06940.ph = phi i64 [ 1, %B500.lr.ph ], [ %534, %middle.block7748 ]
  %.3712.06939.ph = phi i64 [ 0, %B500.lr.ph ], [ %n.vec7754, %middle.block7748 ]
  br label %B500

vector.ph7752:                                    ; preds = %B500.lr.ph
  %n.vec7754 = and i64 %.37476937, -16
  br label %vector.body7750

vector.body7750:                                  ; preds = %vector.body7750, %vector.ph7752
  %index7755 = phi i64 [ 0, %vector.ph7752 ], [ %index.next7756, %vector.body7750 ]
  %vec.phi7759 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7752 ], [ %529, %vector.body7750 ]
  %vec.phi7760 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7752 ], [ %530, %vector.body7750 ]
  %vec.phi7761 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7752 ], [ %531, %vector.body7750 ]
  %vec.phi7762 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7752 ], [ %532, %vector.body7750 ]
  %sunkaddr10712 = mul i64 %index7755, 8
  %521 = bitcast { i64, i64, i8, i64 }* %.6.i77353216935 to i8*
  %sunkaddr10713 = getelementptr i8, i8* %521, i64 %sunkaddr10712
  %sunkaddr10714 = getelementptr i8, i8* %sunkaddr10713, i64 24
  %522 = bitcast i8* %sunkaddr10714 to <4 x i64>*
  %wide.load7763 = load <4 x i64>, <4 x i64>* %522, align 8
  %sunkaddr10715 = mul i64 %index7755, 8
  %523 = bitcast { i64, i64, i8, i64 }* %.6.i77353216935 to i8*
  %sunkaddr10716 = getelementptr i8, i8* %523, i64 %sunkaddr10715
  %sunkaddr10717 = getelementptr i8, i8* %sunkaddr10716, i64 56
  %524 = bitcast i8* %sunkaddr10717 to <4 x i64>*
  %wide.load7764 = load <4 x i64>, <4 x i64>* %524, align 8
  %sunkaddr10718 = mul i64 %index7755, 8
  %525 = bitcast { i64, i64, i8, i64 }* %.6.i77353216935 to i8*
  %sunkaddr10719 = getelementptr i8, i8* %525, i64 %sunkaddr10718
  %sunkaddr10720 = getelementptr i8, i8* %sunkaddr10719, i64 88
  %526 = bitcast i8* %sunkaddr10720 to <4 x i64>*
  %wide.load7765 = load <4 x i64>, <4 x i64>* %526, align 8
  %sunkaddr10721 = mul i64 %index7755, 8
  %527 = bitcast { i64, i64, i8, i64 }* %.6.i77353216935 to i8*
  %sunkaddr10722 = getelementptr i8, i8* %527, i64 %sunkaddr10721
  %sunkaddr10723 = getelementptr i8, i8* %sunkaddr10722, i64 120
  %528 = bitcast i8* %sunkaddr10723 to <4 x i64>*
  %wide.load7766 = load <4 x i64>, <4 x i64>* %528, align 8
  %529 = mul <4 x i64> %wide.load7763, %vec.phi7759
  %530 = mul <4 x i64> %wide.load7764, %vec.phi7760
  %531 = mul <4 x i64> %wide.load7765, %vec.phi7761
  %532 = mul <4 x i64> %wide.load7766, %vec.phi7762
  %index.next7756 = add i64 %index7755, 16
  %533 = icmp eq i64 %n.vec7754, %index.next7756
  br i1 %533, label %middle.block7748, label %vector.body7750, !llvm.loop !118

middle.block7748:                                 ; preds = %vector.body7750
  %bin.rdx7767 = mul <4 x i64> %530, %529
  %bin.rdx7768 = mul <4 x i64> %531, %bin.rdx7767
  %bin.rdx7769 = mul <4 x i64> %532, %bin.rdx7768
  %rdx.shuf10107 = shufflevector <4 x i64> %bin.rdx7769, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10108 = mul <4 x i64> %bin.rdx7769, %rdx.shuf10107
  %rdx.shuf10109 = shufflevector <4 x i64> %bin.rdx10108, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10110 = mul <4 x i64> %bin.rdx10108, %rdx.shuf10109
  %534 = extractelement <4 x i64> %bin.rdx10110, i32 0
  %cmp.n7758 = icmp eq i64 %.37476937, %n.vec7754
  br i1 %cmp.n7758, label %B502, label %B500.preheader

B502.endif.endif.if:                              ; preds = %B502
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B502.endif.endif.endif:                           ; preds = %B502
  %.5.i3325 = getelementptr i8, i8* %.3821, i64 24
  %535 = bitcast i8* %.5.i3325 to { i64, i64, i8, i64 }**
  %.6.i33265322 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %535, align 8
  %.3834 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i33265322, i64 0, i32 1
  store i64 3, i64* %.3834, align 8
  %.6.i33245323 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %535, align 8
  %.384010724 = bitcast { i64, i64, i8, i64 }* %.6.i33245323 to i64*
  store i64 0, i64* %.384010724, align 8
  %.6.i33225324 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %535, align 8
  %.3846 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i33225324, i64 0, i32 2
  store i8 0, i8* %.3846, align 1
  %.6.i33185325 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %535, align 8
  %.3859 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i33185325, i64 0, i32 3
  %.3870 = bitcast i64* %.3859 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(24) %.3870, i8 0, i64 24, i1 false)
  %.6.i33145327 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %535, align 8
  %.388610725 = bitcast { i64, i64, i8, i64 }* %.6.i33145327 to i64*
  store i64 3, i64* %.388610725, align 8
  %.6.i33105328 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %535, align 8
  %.3899 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i33105328, i64 0, i32 3
  store i64 4, i64* %.3899, align 8
  %.6.i33065329 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %535, align 8
  %.3913 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i33065329, i64 0, i32 3
  %.3914 = getelementptr i64, i64* %.3913, i64 1
  store i64 10, i64* %.3914, align 8
  %.6.i33025330 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %535, align 8
  %.3927 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i33025330, i64 0, i32 3
  %.3928 = getelementptr i64, i64* %.3927, i64 2
  store i64 3, i64* %.3928, align 8
  %.6.i88053316927 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %535, align 8
  %.3977692810726 = bitcast { i64, i64, i8, i64 }* %.6.i88053316927 to i64*
  %.39786929 = load i64, i64* %.3977692810726, align 8
  %.39796930 = icmp sgt i64 %.39786929, 0
  br i1 %.39796930, label %B532.lr.ph, label %B534

B532.lr.ph:                                       ; preds = %B502.endif.endif.endif
  %min.iters.check7774 = icmp ult i64 %.39786929, 16
  br i1 %min.iters.check7774, label %B532.preheader, label %vector.ph7775

B532.preheader:                                   ; preds = %middle.block7771, %B532.lr.ph
  %temp.2.521.2.06932.ph = phi i64 [ 1, %B532.lr.ph ], [ %549, %middle.block7771 ]
  %.3943.06931.ph = phi i64 [ 0, %B532.lr.ph ], [ %n.vec7777, %middle.block7771 ]
  br label %B532

vector.ph7775:                                    ; preds = %B532.lr.ph
  %n.vec7777 = and i64 %.39786929, -16
  br label %vector.body7773

vector.body7773:                                  ; preds = %vector.body7773, %vector.ph7775
  %index7778 = phi i64 [ 0, %vector.ph7775 ], [ %index.next7779, %vector.body7773 ]
  %vec.phi7782 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7775 ], [ %544, %vector.body7773 ]
  %vec.phi7783 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7775 ], [ %545, %vector.body7773 ]
  %vec.phi7784 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7775 ], [ %546, %vector.body7773 ]
  %vec.phi7785 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7775 ], [ %547, %vector.body7773 ]
  %sunkaddr10727 = mul i64 %index7778, 8
  %536 = bitcast { i64, i64, i8, i64 }* %.6.i88053316927 to i8*
  %sunkaddr10728 = getelementptr i8, i8* %536, i64 %sunkaddr10727
  %sunkaddr10729 = getelementptr i8, i8* %sunkaddr10728, i64 24
  %537 = bitcast i8* %sunkaddr10729 to <4 x i64>*
  %wide.load7786 = load <4 x i64>, <4 x i64>* %537, align 8
  %sunkaddr10730 = mul i64 %index7778, 8
  %538 = bitcast { i64, i64, i8, i64 }* %.6.i88053316927 to i8*
  %sunkaddr10731 = getelementptr i8, i8* %538, i64 %sunkaddr10730
  %sunkaddr10732 = getelementptr i8, i8* %sunkaddr10731, i64 56
  %539 = bitcast i8* %sunkaddr10732 to <4 x i64>*
  %wide.load7787 = load <4 x i64>, <4 x i64>* %539, align 8
  %sunkaddr10733 = mul i64 %index7778, 8
  %540 = bitcast { i64, i64, i8, i64 }* %.6.i88053316927 to i8*
  %sunkaddr10734 = getelementptr i8, i8* %540, i64 %sunkaddr10733
  %sunkaddr10735 = getelementptr i8, i8* %sunkaddr10734, i64 88
  %541 = bitcast i8* %sunkaddr10735 to <4 x i64>*
  %wide.load7788 = load <4 x i64>, <4 x i64>* %541, align 8
  %sunkaddr10736 = mul i64 %index7778, 8
  %542 = bitcast { i64, i64, i8, i64 }* %.6.i88053316927 to i8*
  %sunkaddr10737 = getelementptr i8, i8* %542, i64 %sunkaddr10736
  %sunkaddr10738 = getelementptr i8, i8* %sunkaddr10737, i64 120
  %543 = bitcast i8* %sunkaddr10738 to <4 x i64>*
  %wide.load7789 = load <4 x i64>, <4 x i64>* %543, align 8
  %544 = mul <4 x i64> %wide.load7786, %vec.phi7782
  %545 = mul <4 x i64> %wide.load7787, %vec.phi7783
  %546 = mul <4 x i64> %wide.load7788, %vec.phi7784
  %547 = mul <4 x i64> %wide.load7789, %vec.phi7785
  %index.next7779 = add i64 %index7778, 16
  %548 = icmp eq i64 %n.vec7777, %index.next7779
  br i1 %548, label %middle.block7771, label %vector.body7773, !llvm.loop !119

middle.block7771:                                 ; preds = %vector.body7773
  %bin.rdx7790 = mul <4 x i64> %545, %544
  %bin.rdx7791 = mul <4 x i64> %546, %bin.rdx7790
  %bin.rdx7792 = mul <4 x i64> %547, %bin.rdx7791
  %rdx.shuf10111 = shufflevector <4 x i64> %bin.rdx7792, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10112 = mul <4 x i64> %bin.rdx7792, %rdx.shuf10111
  %rdx.shuf10113 = shufflevector <4 x i64> %bin.rdx10112, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10114 = mul <4 x i64> %bin.rdx10112, %rdx.shuf10113
  %549 = extractelement <4 x i64> %bin.rdx10114, i32 0
  %cmp.n7781 = icmp eq i64 %.39786929, %n.vec7777
  br i1 %cmp.n7781, label %B534, label %B532.preheader

B534.endif.endif.if:                              ; preds = %B534
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B534.endif.endif.endif:                           ; preds = %B534
  %.5.i3297 = getelementptr i8, i8* %.4051, i64 24
  %550 = bitcast i8* %.5.i3297 to { i64, i64, i8, i64 }**
  %.6.i32985332 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %550, align 8
  %.4064 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i32985332, i64 0, i32 1
  store i64 3, i64* %.4064, align 8
  %.6.i32965333 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %550, align 8
  %.407010739 = bitcast { i64, i64, i8, i64 }* %.6.i32965333 to i64*
  store i64 0, i64* %.407010739, align 8
  %.6.i32945334 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %550, align 8
  %.4076 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i32945334, i64 0, i32 2
  store i8 0, i8* %.4076, align 1
  %.6.i32905335 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %550, align 8
  %.4089 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i32905335, i64 0, i32 3
  %.4100 = bitcast i64* %.4089 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(24) %.4100, i8 0, i64 24, i1 false)
  %.6.i32865337 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %550, align 8
  %.411610740 = bitcast { i64, i64, i8, i64 }* %.6.i32865337 to i64*
  store i64 3, i64* %.411610740, align 8
  %.6.i32825338 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %550, align 8
  %.4129 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i32825338, i64 0, i32 3
  store i64 %temp.2.485.2.0.lcssa, i64* %.4129, align 8
  %.6.i32785339 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %550, align 8
  %.4143 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i32785339, i64 0, i32 3
  %.4144 = getelementptr i64, i64* %.4143, i64 1
  store i64 %temp.2.503.2.0.lcssa, i64* %.4144, align 8
  %.6.i32745340 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %550, align 8
  %.4157 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i32745340, i64 0, i32 3
  %.4158 = getelementptr i64, i64* %.4157, i64 2
  store i64 %temp.2.521.2.0.lcssa, i64* %.4158, align 8
  %.6.i3.i3218 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %550, align 8, !noalias !120
  %.5342.i321910741 = bitcast { i64, i64, i8, i64 }* %.6.i3.i3218 to i64*
  %.548.i3220 = load i64, i64* %.5342.i321910741, align 8, !noalias !120
  %.559.i3221 = icmp sgt i64 %.548.i3220, 0
  br i1 %.559.i3221, label %B14.endif.lr.ph.i3223, label %B534.endif.endif.endif.endif

B14.endif.lr.ph.i3223:                            ; preds = %B534.endif.endif.endif
  %min.iters.check.i3222 = icmp ult i64 %.548.i3220, 16
  br i1 %min.iters.check.i3222, label %B14.endif.preheader.i3226, label %vector.ph.i3228

B14.endif.preheader.i3226:                        ; preds = %middle.block.i3260, %B14.endif.lr.ph.i3223
  %acc.2.011.ph.i3224 = phi i64 [ 0, %B14.endif.lr.ph.i3223 ], [ %564, %middle.block.i3260 ]
  %.17.010.ph.i3225 = phi i64 [ 0, %B14.endif.lr.ph.i3223 ], [ %n.vec.i3227, %middle.block.i3260 ]
  br label %B14.endif.i3271

vector.ph.i3228:                                  ; preds = %B14.endif.lr.ph.i3223
  %n.vec.i3227 = and i64 %.548.i3220, -16
  br label %vector.body.i3251

vector.body.i3251:                                ; preds = %vector.body.i3251, %vector.ph.i3228
  %index.i3229 = phi i64 [ 0, %vector.ph.i3228 ], [ %index.next.i3250, %vector.body.i3251 ]
  %vec.phi.i3230 = phi <4 x i64> [ zeroinitializer, %vector.ph.i3228 ], [ %559, %vector.body.i3251 ]
  %vec.phi12.i3231 = phi <4 x i64> [ zeroinitializer, %vector.ph.i3228 ], [ %560, %vector.body.i3251 ]
  %vec.phi13.i3232 = phi <4 x i64> [ zeroinitializer, %vector.ph.i3228 ], [ %561, %vector.body.i3251 ]
  %vec.phi14.i3233 = phi <4 x i64> [ zeroinitializer, %vector.ph.i3228 ], [ %562, %vector.body.i3251 ]
  %sunkaddr10742 = mul i64 %index.i3229, 8
  %551 = bitcast { i64, i64, i8, i64 }* %.6.i3.i3218 to i8*
  %sunkaddr10743 = getelementptr i8, i8* %551, i64 %sunkaddr10742
  %sunkaddr10744 = getelementptr i8, i8* %sunkaddr10743, i64 24
  %552 = bitcast i8* %sunkaddr10744 to <4 x i64>*
  %wide.load.i3237 = load <4 x i64>, <4 x i64>* %552, align 8, !noalias !120
  %sunkaddr10745 = mul i64 %index.i3229, 8
  %553 = bitcast { i64, i64, i8, i64 }* %.6.i3.i3218 to i8*
  %sunkaddr10746 = getelementptr i8, i8* %553, i64 %sunkaddr10745
  %sunkaddr10747 = getelementptr i8, i8* %sunkaddr10746, i64 56
  %554 = bitcast i8* %sunkaddr10747 to <4 x i64>*
  %wide.load15.i3241 = load <4 x i64>, <4 x i64>* %554, align 8, !noalias !120
  %sunkaddr10748 = mul i64 %index.i3229, 8
  %555 = bitcast { i64, i64, i8, i64 }* %.6.i3.i3218 to i8*
  %sunkaddr10749 = getelementptr i8, i8* %555, i64 %sunkaddr10748
  %sunkaddr10750 = getelementptr i8, i8* %sunkaddr10749, i64 88
  %556 = bitcast i8* %sunkaddr10750 to <4 x i64>*
  %wide.load16.i3245 = load <4 x i64>, <4 x i64>* %556, align 8, !noalias !120
  %sunkaddr10751 = mul i64 %index.i3229, 8
  %557 = bitcast { i64, i64, i8, i64 }* %.6.i3.i3218 to i8*
  %sunkaddr10752 = getelementptr i8, i8* %557, i64 %sunkaddr10751
  %sunkaddr10753 = getelementptr i8, i8* %sunkaddr10752, i64 120
  %558 = bitcast i8* %sunkaddr10753 to <4 x i64>*
  %wide.load17.i3249 = load <4 x i64>, <4 x i64>* %558, align 8, !noalias !120
  %559 = add <4 x i64> %wide.load.i3237, %vec.phi.i3230
  %560 = add <4 x i64> %wide.load15.i3241, %vec.phi12.i3231
  %561 = add <4 x i64> %wide.load16.i3245, %vec.phi13.i3232
  %562 = add <4 x i64> %wide.load17.i3249, %vec.phi14.i3233
  %index.next.i3250 = add i64 %index.i3229, 16
  %563 = icmp eq i64 %n.vec.i3227, %index.next.i3250
  br i1 %563, label %middle.block.i3260, label %vector.body.i3251, !llvm.loop !51

middle.block.i3260:                               ; preds = %vector.body.i3251
  %bin.rdx.i3252 = add <4 x i64> %560, %559
  %bin.rdx18.i3253 = add <4 x i64> %bin.rdx.i3252, %561
  %bin.rdx19.i3254 = add <4 x i64> %bin.rdx18.i3253, %562
  %rdx.shuf.i3255 = shufflevector <4 x i64> %bin.rdx19.i3254, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx39.i3256 = add <4 x i64> %rdx.shuf.i3255, %bin.rdx19.i3254
  %rdx.shuf40.i3257 = shufflevector <4 x i64> %bin.rdx39.i3256, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx41.i3258 = add <4 x i64> %rdx.shuf40.i3257, %bin.rdx39.i3256
  %564 = extractelement <4 x i64> %bin.rdx41.i3258, i32 0
  %cmp.n.i3259 = icmp eq i64 %.548.i3220, %n.vec.i3227
  br i1 %cmp.n.i3259, label %B534.endif.endif.endif.endif, label %B14.endif.preheader.i3226

B14.endif.i3271:                                  ; preds = %B14.endif.i3271, %B14.endif.preheader.i3226
  %acc.2.011.i3262 = phi i64 [ %.94.i3269, %B14.endif.i3271 ], [ %acc.2.011.ph.i3224, %B14.endif.preheader.i3226 ]
  %.17.010.i3263 = phi i64 [ %.68.i3268, %B14.endif.i3271 ], [ %.17.010.ph.i3225, %B14.endif.preheader.i3226 ]
  %sunkaddr10754 = mul i64 %.17.010.i3263, 8
  %565 = bitcast { i64, i64, i8, i64 }* %.6.i3.i3218 to i8*
  %sunkaddr10755 = getelementptr i8, i8* %565, i64 %sunkaddr10754
  %sunkaddr10756 = getelementptr i8, i8* %sunkaddr10755, i64 24
  %566 = bitcast i8* %sunkaddr10756 to i64*
  %.65.i3267 = load i64, i64* %566, align 8, !noalias !120
  %.68.i3268 = add nuw nsw i64 %.17.010.i3263, 1
  %.94.i3269 = add nsw i64 %.65.i3267, %acc.2.011.i3262
  %exitcond.not.i3270 = icmp eq i64 %.548.i3220, %.68.i3268
  br i1 %exitcond.not.i3270, label %B534.endif.endif.endif.endif, label %B14.endif.i3271, !llvm.loop !52

B534.endif.endif.endif.endif:                     ; preds = %B14.endif.i3271, %middle.block.i3260, %B534.endif.endif.endif
  %acc.2.0.lcssa.i3261 = phi i64 [ 0, %B534.endif.endif.endif ], [ %564, %middle.block.i3260 ], [ %.94.i3269, %B14.endif.i3271 ]
  tail call void @NRT_decref(i8* nonnull %.4051)
  %.4230 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 40, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.4231 = icmp eq i8* %.4230, null
  br i1 %.4231, label %B568.endif.endif.if, label %B568.endif.endif.endif, !prof !3

B568.endif.endif.if:                              ; preds = %B534.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B568.endif.endif.endif:                           ; preds = %B534.endif.endif.endif.endif
  %.5.i3213 = getelementptr i8, i8* %.4230, i64 24
  %567 = bitcast i8* %.5.i3213 to { i64, i64, i8, i64 }**
  %.6.i32145341 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %567, align 8
  %.4243 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i32145341, i64 0, i32 1
  store i64 2, i64* %.4243, align 8
  %.6.i32125342 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %567, align 8
  %.424910757 = bitcast { i64, i64, i8, i64 }* %.6.i32125342 to i64*
  store i64 0, i64* %.424910757, align 8
  %.6.i32105343 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %567, align 8
  %.4255 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i32105343, i64 0, i32 2
  store i8 0, i8* %.4255, align 1
  %.6.i32065344 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %567, align 8
  %.4268 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i32065344, i64 0, i32 3
  %.4279 = bitcast i64* %.4268 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %.4279, i8 0, i64 16, i1 false)
  %.6.i32025346 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %567, align 8
  %.429510758 = bitcast { i64, i64, i8, i64 }* %.6.i32025346 to i64*
  store i64 2, i64* %.429510758, align 8
  %.6.i31985347 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %567, align 8
  %.4308 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i31985347, i64 0, i32 3
  store i64 0, i64* %.4308, align 8
  %.6.i31945348 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %567, align 8
  %.4322 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i31945348, i64 0, i32 3
  %.4323 = getelementptr i64, i64* %.4322, i64 1
  store i64 46058, i64* %.4323, align 8
  %.6.i97653496919 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %567, align 8
  %.4374692010759 = bitcast { i64, i64, i8, i64 }* %.6.i97653496919 to i64*
  %.43756921 = load i64, i64* %.4374692010759, align 8
  %.43766922 = icmp sgt i64 %.43756921, 0
  br i1 %.43766922, label %B616.lr.ph, label %B618

B616.lr.ph:                                       ; preds = %B568.endif.endif.endif
  %min.iters.check7797 = icmp ult i64 %.43756921, 16
  br i1 %min.iters.check7797, label %B616.preheader, label %vector.ph7798

B616.preheader:                                   ; preds = %middle.block7794, %B616.lr.ph
  %temp.2.449.2.06924.ph = phi i64 [ 1, %B616.lr.ph ], [ %581, %middle.block7794 ]
  %.4340.06923.ph = phi i64 [ 0, %B616.lr.ph ], [ %n.vec7800, %middle.block7794 ]
  br label %B616

vector.ph7798:                                    ; preds = %B616.lr.ph
  %n.vec7800 = and i64 %.43756921, -16
  br label %vector.body7796

vector.body7796:                                  ; preds = %vector.body7796, %vector.ph7798
  %index7801 = phi i64 [ 0, %vector.ph7798 ], [ %index.next7802, %vector.body7796 ]
  %vec.phi7805 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7798 ], [ %576, %vector.body7796 ]
  %vec.phi7806 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7798 ], [ %577, %vector.body7796 ]
  %vec.phi7807 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7798 ], [ %578, %vector.body7796 ]
  %vec.phi7808 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7798 ], [ %579, %vector.body7796 ]
  %sunkaddr10760 = mul i64 %index7801, 8
  %568 = bitcast { i64, i64, i8, i64 }* %.6.i97653496919 to i8*
  %sunkaddr10761 = getelementptr i8, i8* %568, i64 %sunkaddr10760
  %sunkaddr10762 = getelementptr i8, i8* %sunkaddr10761, i64 24
  %569 = bitcast i8* %sunkaddr10762 to <4 x i64>*
  %wide.load7809 = load <4 x i64>, <4 x i64>* %569, align 8
  %sunkaddr10763 = mul i64 %index7801, 8
  %570 = bitcast { i64, i64, i8, i64 }* %.6.i97653496919 to i8*
  %sunkaddr10764 = getelementptr i8, i8* %570, i64 %sunkaddr10763
  %sunkaddr10765 = getelementptr i8, i8* %sunkaddr10764, i64 56
  %571 = bitcast i8* %sunkaddr10765 to <4 x i64>*
  %wide.load7810 = load <4 x i64>, <4 x i64>* %571, align 8
  %sunkaddr10766 = mul i64 %index7801, 8
  %572 = bitcast { i64, i64, i8, i64 }* %.6.i97653496919 to i8*
  %sunkaddr10767 = getelementptr i8, i8* %572, i64 %sunkaddr10766
  %sunkaddr10768 = getelementptr i8, i8* %sunkaddr10767, i64 88
  %573 = bitcast i8* %sunkaddr10768 to <4 x i64>*
  %wide.load7811 = load <4 x i64>, <4 x i64>* %573, align 8
  %sunkaddr10769 = mul i64 %index7801, 8
  %574 = bitcast { i64, i64, i8, i64 }* %.6.i97653496919 to i8*
  %sunkaddr10770 = getelementptr i8, i8* %574, i64 %sunkaddr10769
  %sunkaddr10771 = getelementptr i8, i8* %sunkaddr10770, i64 120
  %575 = bitcast i8* %sunkaddr10771 to <4 x i64>*
  %wide.load7812 = load <4 x i64>, <4 x i64>* %575, align 8
  %576 = mul <4 x i64> %wide.load7809, %vec.phi7805
  %577 = mul <4 x i64> %wide.load7810, %vec.phi7806
  %578 = mul <4 x i64> %wide.load7811, %vec.phi7807
  %579 = mul <4 x i64> %wide.load7812, %vec.phi7808
  %index.next7802 = add i64 %index7801, 16
  %580 = icmp eq i64 %n.vec7800, %index.next7802
  br i1 %580, label %middle.block7794, label %vector.body7796, !llvm.loop !123

middle.block7794:                                 ; preds = %vector.body7796
  %bin.rdx7813 = mul <4 x i64> %577, %576
  %bin.rdx7814 = mul <4 x i64> %578, %bin.rdx7813
  %bin.rdx7815 = mul <4 x i64> %579, %bin.rdx7814
  %rdx.shuf10115 = shufflevector <4 x i64> %bin.rdx7815, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10116 = mul <4 x i64> %bin.rdx7815, %rdx.shuf10115
  %rdx.shuf10117 = shufflevector <4 x i64> %bin.rdx10116, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10118 = mul <4 x i64> %bin.rdx10116, %rdx.shuf10117
  %581 = extractelement <4 x i64> %bin.rdx10118, i32 0
  %cmp.n7804 = icmp eq i64 %.43756921, %n.vec7800
  br i1 %cmp.n7804, label %B618, label %B616.preheader

B618.endif.endif.if:                              ; preds = %B618
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B618.endif.endif.endif:                           ; preds = %B618
  %.5.i3189 = getelementptr i8, i8* %.4446, i64 24
  %582 = bitcast i8* %.5.i3189 to { i64, i64, i8, i64 }**
  %.6.i31905350 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %582, align 8
  %.4459 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i31905350, i64 0, i32 1
  store i64 1, i64* %.4459, align 8
  %.6.i31885351 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %582, align 8
  %.446510772 = bitcast { i64, i64, i8, i64 }* %.6.i31885351 to i64*
  store i64 0, i64* %.446510772, align 8
  %.6.i31865352 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %582, align 8
  %.4471 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i31865352, i64 0, i32 2
  store i8 0, i8* %.4471, align 1
  %.6.i31825353 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %582, align 8
  %.4484 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i31825353, i64 0, i32 3
  store i64 0, i64* %.4484, align 1
  %.6.i31785355 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %582, align 8
  %.451110773 = bitcast { i64, i64, i8, i64 }* %.6.i31785355 to i64*
  store i64 1, i64* %.451110773, align 8
  %.6.i31745356 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %582, align 8
  %.4524 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i31745356, i64 0, i32 3
  store i64 664609, i64* %.4524, align 8
  %.6.i3.i3118 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %582, align 8, !noalias !124
  %.5342.i311910774 = bitcast { i64, i64, i8, i64 }* %.6.i3.i3118 to i64*
  %.548.i3120 = load i64, i64* %.5342.i311910774, align 8, !noalias !124
  %.559.i3121 = icmp sgt i64 %.548.i3120, 0
  br i1 %.559.i3121, label %B14.endif.lr.ph.i3123, label %B618.endif.endif.endif.endif

B14.endif.lr.ph.i3123:                            ; preds = %B618.endif.endif.endif
  %min.iters.check.i3122 = icmp ult i64 %.548.i3120, 16
  br i1 %min.iters.check.i3122, label %B14.endif.preheader.i3126, label %vector.ph.i3128

B14.endif.preheader.i3126:                        ; preds = %middle.block.i3160, %B14.endif.lr.ph.i3123
  %acc.2.011.ph.i3124 = phi i64 [ 0, %B14.endif.lr.ph.i3123 ], [ %596, %middle.block.i3160 ]
  %.17.010.ph.i3125 = phi i64 [ 0, %B14.endif.lr.ph.i3123 ], [ %n.vec.i3127, %middle.block.i3160 ]
  br label %B14.endif.i3171

vector.ph.i3128:                                  ; preds = %B14.endif.lr.ph.i3123
  %n.vec.i3127 = and i64 %.548.i3120, -16
  br label %vector.body.i3151

vector.body.i3151:                                ; preds = %vector.body.i3151, %vector.ph.i3128
  %index.i3129 = phi i64 [ 0, %vector.ph.i3128 ], [ %index.next.i3150, %vector.body.i3151 ]
  %vec.phi.i3130 = phi <4 x i64> [ zeroinitializer, %vector.ph.i3128 ], [ %591, %vector.body.i3151 ]
  %vec.phi12.i3131 = phi <4 x i64> [ zeroinitializer, %vector.ph.i3128 ], [ %592, %vector.body.i3151 ]
  %vec.phi13.i3132 = phi <4 x i64> [ zeroinitializer, %vector.ph.i3128 ], [ %593, %vector.body.i3151 ]
  %vec.phi14.i3133 = phi <4 x i64> [ zeroinitializer, %vector.ph.i3128 ], [ %594, %vector.body.i3151 ]
  %sunkaddr10775 = mul i64 %index.i3129, 8
  %583 = bitcast { i64, i64, i8, i64 }* %.6.i3.i3118 to i8*
  %sunkaddr10776 = getelementptr i8, i8* %583, i64 %sunkaddr10775
  %sunkaddr10777 = getelementptr i8, i8* %sunkaddr10776, i64 24
  %584 = bitcast i8* %sunkaddr10777 to <4 x i64>*
  %wide.load.i3137 = load <4 x i64>, <4 x i64>* %584, align 8, !noalias !124
  %sunkaddr10778 = mul i64 %index.i3129, 8
  %585 = bitcast { i64, i64, i8, i64 }* %.6.i3.i3118 to i8*
  %sunkaddr10779 = getelementptr i8, i8* %585, i64 %sunkaddr10778
  %sunkaddr10780 = getelementptr i8, i8* %sunkaddr10779, i64 56
  %586 = bitcast i8* %sunkaddr10780 to <4 x i64>*
  %wide.load15.i3141 = load <4 x i64>, <4 x i64>* %586, align 8, !noalias !124
  %sunkaddr10781 = mul i64 %index.i3129, 8
  %587 = bitcast { i64, i64, i8, i64 }* %.6.i3.i3118 to i8*
  %sunkaddr10782 = getelementptr i8, i8* %587, i64 %sunkaddr10781
  %sunkaddr10783 = getelementptr i8, i8* %sunkaddr10782, i64 88
  %588 = bitcast i8* %sunkaddr10783 to <4 x i64>*
  %wide.load16.i3145 = load <4 x i64>, <4 x i64>* %588, align 8, !noalias !124
  %sunkaddr10784 = mul i64 %index.i3129, 8
  %589 = bitcast { i64, i64, i8, i64 }* %.6.i3.i3118 to i8*
  %sunkaddr10785 = getelementptr i8, i8* %589, i64 %sunkaddr10784
  %sunkaddr10786 = getelementptr i8, i8* %sunkaddr10785, i64 120
  %590 = bitcast i8* %sunkaddr10786 to <4 x i64>*
  %wide.load17.i3149 = load <4 x i64>, <4 x i64>* %590, align 8, !noalias !124
  %591 = add <4 x i64> %wide.load.i3137, %vec.phi.i3130
  %592 = add <4 x i64> %wide.load15.i3141, %vec.phi12.i3131
  %593 = add <4 x i64> %wide.load16.i3145, %vec.phi13.i3132
  %594 = add <4 x i64> %wide.load17.i3149, %vec.phi14.i3133
  %index.next.i3150 = add i64 %index.i3129, 16
  %595 = icmp eq i64 %n.vec.i3127, %index.next.i3150
  br i1 %595, label %middle.block.i3160, label %vector.body.i3151, !llvm.loop !51

middle.block.i3160:                               ; preds = %vector.body.i3151
  %bin.rdx.i3152 = add <4 x i64> %592, %591
  %bin.rdx18.i3153 = add <4 x i64> %bin.rdx.i3152, %593
  %bin.rdx19.i3154 = add <4 x i64> %bin.rdx18.i3153, %594
  %rdx.shuf.i3155 = shufflevector <4 x i64> %bin.rdx19.i3154, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx39.i3156 = add <4 x i64> %rdx.shuf.i3155, %bin.rdx19.i3154
  %rdx.shuf40.i3157 = shufflevector <4 x i64> %bin.rdx39.i3156, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx41.i3158 = add <4 x i64> %rdx.shuf40.i3157, %bin.rdx39.i3156
  %596 = extractelement <4 x i64> %bin.rdx41.i3158, i32 0
  %cmp.n.i3159 = icmp eq i64 %.548.i3120, %n.vec.i3127
  br i1 %cmp.n.i3159, label %B618.endif.endif.endif.endif, label %B14.endif.preheader.i3126

B14.endif.i3171:                                  ; preds = %B14.endif.i3171, %B14.endif.preheader.i3126
  %acc.2.011.i3162 = phi i64 [ %.94.i3169, %B14.endif.i3171 ], [ %acc.2.011.ph.i3124, %B14.endif.preheader.i3126 ]
  %.17.010.i3163 = phi i64 [ %.68.i3168, %B14.endif.i3171 ], [ %.17.010.ph.i3125, %B14.endif.preheader.i3126 ]
  %sunkaddr10787 = mul i64 %.17.010.i3163, 8
  %597 = bitcast { i64, i64, i8, i64 }* %.6.i3.i3118 to i8*
  %sunkaddr10788 = getelementptr i8, i8* %597, i64 %sunkaddr10787
  %sunkaddr10789 = getelementptr i8, i8* %sunkaddr10788, i64 24
  %598 = bitcast i8* %sunkaddr10789 to i64*
  %.65.i3167 = load i64, i64* %598, align 8, !noalias !124
  %.68.i3168 = add nuw nsw i64 %.17.010.i3163, 1
  %.94.i3169 = add nsw i64 %.65.i3167, %acc.2.011.i3162
  %exitcond.not.i3170 = icmp eq i64 %.548.i3120, %.68.i3168
  br i1 %exitcond.not.i3170, label %B618.endif.endif.endif.endif, label %B14.endif.i3171, !llvm.loop !52

B618.endif.endif.endif.endif:                     ; preds = %B14.endif.i3171, %middle.block.i3160, %B618.endif.endif.endif
  %acc.2.0.lcssa.i3161 = phi i64 [ 0, %B618.endif.endif.endif ], [ %596, %middle.block.i3160 ], [ %.94.i3169, %B14.endif.i3171 ]
  tail call void @NRT_decref(i8* nonnull %.4446)
  %.4585 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 40, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.4586 = icmp eq i8* %.4585, null
  br i1 %.4586, label %B660.endif.endif.if, label %B660.endif.endif.endif, !prof !3

B660.endif.endif.if:                              ; preds = %B618.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B660.endif.endif.endif:                           ; preds = %B618.endif.endif.endif.endif
  %.5.i3113 = getelementptr i8, i8* %.4585, i64 24
  %599 = bitcast i8* %.5.i3113 to { i64, i64, i8, i64 }**
  %.6.i31145357 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %599, align 8
  %.4598 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i31145357, i64 0, i32 1
  store i64 2, i64* %.4598, align 8
  %.6.i31125358 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %599, align 8
  %.460410790 = bitcast { i64, i64, i8, i64 }* %.6.i31125358 to i64*
  store i64 0, i64* %.460410790, align 8
  %.6.i31105359 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %599, align 8
  %.4610 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i31105359, i64 0, i32 2
  store i8 0, i8* %.4610, align 1
  %.6.i31065360 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %599, align 8
  %.4623 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i31065360, i64 0, i32 3
  %.4634 = bitcast i64* %.4623 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %.4634, i8 0, i64 16, i1 false)
  %.6.i31025362 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %599, align 8
  %.465010791 = bitcast { i64, i64, i8, i64 }* %.6.i31025362 to i64*
  store i64 2, i64* %.465010791, align 8
  %.6.i30985363 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %599, align 8
  %.4663 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i30985363, i64 0, i32 3
  store i64 0, i64* %.4663, align 8
  %.6.i30945364 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %599, align 8
  %.4677 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i30945364, i64 0, i32 3
  %.4678 = getelementptr i64, i64* %.4677, i64 1
  store i64 580431, i64* %.4678, align 8
  %.6.i110853656911 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %599, align 8
  %.4729691210792 = bitcast { i64, i64, i8, i64 }* %.6.i110853656911 to i64*
  %.47306913 = load i64, i64* %.4729691210792, align 8
  %.47316914 = icmp sgt i64 %.47306913, 0
  br i1 %.47316914, label %B686.lr.ph, label %B688

B686.lr.ph:                                       ; preds = %B660.endif.endif.endif
  %min.iters.check7820 = icmp ult i64 %.47306913, 16
  br i1 %min.iters.check7820, label %B686.preheader, label %vector.ph7821

B686.preheader:                                   ; preds = %middle.block7817, %B686.lr.ph
  %temp.2.395.2.06916.ph = phi i64 [ 1, %B686.lr.ph ], [ %613, %middle.block7817 ]
  %.4695.06915.ph = phi i64 [ 0, %B686.lr.ph ], [ %n.vec7823, %middle.block7817 ]
  br label %B686

vector.ph7821:                                    ; preds = %B686.lr.ph
  %n.vec7823 = and i64 %.47306913, -16
  br label %vector.body7819

vector.body7819:                                  ; preds = %vector.body7819, %vector.ph7821
  %index7824 = phi i64 [ 0, %vector.ph7821 ], [ %index.next7825, %vector.body7819 ]
  %vec.phi7828 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7821 ], [ %608, %vector.body7819 ]
  %vec.phi7829 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7821 ], [ %609, %vector.body7819 ]
  %vec.phi7830 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7821 ], [ %610, %vector.body7819 ]
  %vec.phi7831 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7821 ], [ %611, %vector.body7819 ]
  %sunkaddr10793 = mul i64 %index7824, 8
  %600 = bitcast { i64, i64, i8, i64 }* %.6.i110853656911 to i8*
  %sunkaddr10794 = getelementptr i8, i8* %600, i64 %sunkaddr10793
  %sunkaddr10795 = getelementptr i8, i8* %sunkaddr10794, i64 24
  %601 = bitcast i8* %sunkaddr10795 to <4 x i64>*
  %wide.load7832 = load <4 x i64>, <4 x i64>* %601, align 8
  %sunkaddr10796 = mul i64 %index7824, 8
  %602 = bitcast { i64, i64, i8, i64 }* %.6.i110853656911 to i8*
  %sunkaddr10797 = getelementptr i8, i8* %602, i64 %sunkaddr10796
  %sunkaddr10798 = getelementptr i8, i8* %sunkaddr10797, i64 56
  %603 = bitcast i8* %sunkaddr10798 to <4 x i64>*
  %wide.load7833 = load <4 x i64>, <4 x i64>* %603, align 8
  %sunkaddr10799 = mul i64 %index7824, 8
  %604 = bitcast { i64, i64, i8, i64 }* %.6.i110853656911 to i8*
  %sunkaddr10800 = getelementptr i8, i8* %604, i64 %sunkaddr10799
  %sunkaddr10801 = getelementptr i8, i8* %sunkaddr10800, i64 88
  %605 = bitcast i8* %sunkaddr10801 to <4 x i64>*
  %wide.load7834 = load <4 x i64>, <4 x i64>* %605, align 8
  %sunkaddr10802 = mul i64 %index7824, 8
  %606 = bitcast { i64, i64, i8, i64 }* %.6.i110853656911 to i8*
  %sunkaddr10803 = getelementptr i8, i8* %606, i64 %sunkaddr10802
  %sunkaddr10804 = getelementptr i8, i8* %sunkaddr10803, i64 120
  %607 = bitcast i8* %sunkaddr10804 to <4 x i64>*
  %wide.load7835 = load <4 x i64>, <4 x i64>* %607, align 8
  %608 = mul <4 x i64> %wide.load7832, %vec.phi7828
  %609 = mul <4 x i64> %wide.load7833, %vec.phi7829
  %610 = mul <4 x i64> %wide.load7834, %vec.phi7830
  %611 = mul <4 x i64> %wide.load7835, %vec.phi7831
  %index.next7825 = add i64 %index7824, 16
  %612 = icmp eq i64 %n.vec7823, %index.next7825
  br i1 %612, label %middle.block7817, label %vector.body7819, !llvm.loop !127

middle.block7817:                                 ; preds = %vector.body7819
  %bin.rdx7836 = mul <4 x i64> %609, %608
  %bin.rdx7837 = mul <4 x i64> %610, %bin.rdx7836
  %bin.rdx7838 = mul <4 x i64> %611, %bin.rdx7837
  %rdx.shuf10119 = shufflevector <4 x i64> %bin.rdx7838, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10120 = mul <4 x i64> %bin.rdx7838, %rdx.shuf10119
  %rdx.shuf10121 = shufflevector <4 x i64> %bin.rdx10120, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10122 = mul <4 x i64> %bin.rdx10120, %rdx.shuf10121
  %613 = extractelement <4 x i64> %bin.rdx10122, i32 0
  %cmp.n7827 = icmp eq i64 %.47306913, %n.vec7823
  br i1 %cmp.n7827, label %B688, label %B686.preheader

B688.endif.endif.if:                              ; preds = %B688
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B688.endif.endif.endif:                           ; preds = %B688
  %.5.i3089 = getelementptr i8, i8* %.4804, i64 24
  %614 = bitcast i8* %.5.i3089 to { i64, i64, i8, i64 }**
  %.6.i30905366 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %614, align 8
  %.4817 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i30905366, i64 0, i32 1
  store i64 4, i64* %.4817, align 8
  %.6.i30885367 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %614, align 8
  %.482310805 = bitcast { i64, i64, i8, i64 }* %.6.i30885367 to i64*
  store i64 0, i64* %.482310805, align 8
  %.6.i30865368 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %614, align 8
  %.4829 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i30865368, i64 0, i32 2
  store i8 0, i8* %.4829, align 1
  %.6.i30825369 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %614, align 8
  %.4842 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i30825369, i64 0, i32 3
  %.4853 = bitcast i64* %.4842 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(32) %.4853, i8 0, i64 32, i1 false)
  %.6.i30785371 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %614, align 8
  %.486910806 = bitcast { i64, i64, i8, i64 }* %.6.i30785371 to i64*
  store i64 4, i64* %.486910806, align 8
  %.6.i30745372 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %614, align 8
  %.4882 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i30745372, i64 0, i32 3
  store i64 13, i64* %.4882, align 8
  %.6.i30705373 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %614, align 8
  %.4896 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i30705373, i64 0, i32 3
  %.4897 = getelementptr i64, i64* %.4896, i64 1
  store i64 200, i64* %.4897, align 8
  %.6.i30665374 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %614, align 8
  %.4910 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i30665374, i64 0, i32 3
  %.4911 = getelementptr i64, i64* %.4910, i64 2
  store i64 84, i64* %.4911, align 8
  %.6.i30625375 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %614, align 8
  %.4924 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i30625375, i64 0, i32 3
  %.4925 = getelementptr i64, i64* %.4924, i64 3
  store i64 116, i64* %.4925, align 8
  %.6.i119253766903 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %614, align 8
  %.4974690410807 = bitcast { i64, i64, i8, i64 }* %.6.i119253766903 to i64*
  %.49756905 = load i64, i64* %.4974690410807, align 8
  %.49766906 = icmp sgt i64 %.49756905, 0
  br i1 %.49766906, label %B756.lr.ph, label %B758

B756.lr.ph:                                       ; preds = %B688.endif.endif.endif
  %min.iters.check7843 = icmp ult i64 %.49756905, 16
  br i1 %min.iters.check7843, label %B756.preheader, label %vector.ph7844

B756.preheader:                                   ; preds = %middle.block7840, %B756.lr.ph
  %temp.2.413.2.06908.ph = phi i64 [ 1, %B756.lr.ph ], [ %628, %middle.block7840 ]
  %.4940.06907.ph = phi i64 [ 0, %B756.lr.ph ], [ %n.vec7846, %middle.block7840 ]
  br label %B756

vector.ph7844:                                    ; preds = %B756.lr.ph
  %n.vec7846 = and i64 %.49756905, -16
  br label %vector.body7842

vector.body7842:                                  ; preds = %vector.body7842, %vector.ph7844
  %index7847 = phi i64 [ 0, %vector.ph7844 ], [ %index.next7848, %vector.body7842 ]
  %vec.phi7851 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7844 ], [ %623, %vector.body7842 ]
  %vec.phi7852 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7844 ], [ %624, %vector.body7842 ]
  %vec.phi7853 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7844 ], [ %625, %vector.body7842 ]
  %vec.phi7854 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7844 ], [ %626, %vector.body7842 ]
  %sunkaddr10808 = mul i64 %index7847, 8
  %615 = bitcast { i64, i64, i8, i64 }* %.6.i119253766903 to i8*
  %sunkaddr10809 = getelementptr i8, i8* %615, i64 %sunkaddr10808
  %sunkaddr10810 = getelementptr i8, i8* %sunkaddr10809, i64 24
  %616 = bitcast i8* %sunkaddr10810 to <4 x i64>*
  %wide.load7855 = load <4 x i64>, <4 x i64>* %616, align 8
  %sunkaddr10811 = mul i64 %index7847, 8
  %617 = bitcast { i64, i64, i8, i64 }* %.6.i119253766903 to i8*
  %sunkaddr10812 = getelementptr i8, i8* %617, i64 %sunkaddr10811
  %sunkaddr10813 = getelementptr i8, i8* %sunkaddr10812, i64 56
  %618 = bitcast i8* %sunkaddr10813 to <4 x i64>*
  %wide.load7856 = load <4 x i64>, <4 x i64>* %618, align 8
  %sunkaddr10814 = mul i64 %index7847, 8
  %619 = bitcast { i64, i64, i8, i64 }* %.6.i119253766903 to i8*
  %sunkaddr10815 = getelementptr i8, i8* %619, i64 %sunkaddr10814
  %sunkaddr10816 = getelementptr i8, i8* %sunkaddr10815, i64 88
  %620 = bitcast i8* %sunkaddr10816 to <4 x i64>*
  %wide.load7857 = load <4 x i64>, <4 x i64>* %620, align 8
  %sunkaddr10817 = mul i64 %index7847, 8
  %621 = bitcast { i64, i64, i8, i64 }* %.6.i119253766903 to i8*
  %sunkaddr10818 = getelementptr i8, i8* %621, i64 %sunkaddr10817
  %sunkaddr10819 = getelementptr i8, i8* %sunkaddr10818, i64 120
  %622 = bitcast i8* %sunkaddr10819 to <4 x i64>*
  %wide.load7858 = load <4 x i64>, <4 x i64>* %622, align 8
  %623 = mul <4 x i64> %wide.load7855, %vec.phi7851
  %624 = mul <4 x i64> %wide.load7856, %vec.phi7852
  %625 = mul <4 x i64> %wide.load7857, %vec.phi7853
  %626 = mul <4 x i64> %wide.load7858, %vec.phi7854
  %index.next7848 = add i64 %index7847, 16
  %627 = icmp eq i64 %n.vec7846, %index.next7848
  br i1 %627, label %middle.block7840, label %vector.body7842, !llvm.loop !128

middle.block7840:                                 ; preds = %vector.body7842
  %bin.rdx7859 = mul <4 x i64> %624, %623
  %bin.rdx7860 = mul <4 x i64> %625, %bin.rdx7859
  %bin.rdx7861 = mul <4 x i64> %626, %bin.rdx7860
  %rdx.shuf10123 = shufflevector <4 x i64> %bin.rdx7861, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10124 = mul <4 x i64> %bin.rdx7861, %rdx.shuf10123
  %rdx.shuf10125 = shufflevector <4 x i64> %bin.rdx10124, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10126 = mul <4 x i64> %bin.rdx10124, %rdx.shuf10125
  %628 = extractelement <4 x i64> %bin.rdx10126, i32 0
  %cmp.n7850 = icmp eq i64 %.49756905, %n.vec7846
  br i1 %cmp.n7850, label %B758, label %B756.preheader

B758.endif.endif.if:                              ; preds = %B758
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B758.endif.endif.endif:                           ; preds = %B758
  %.5.i3057 = getelementptr i8, i8* %.5052, i64 24
  %629 = bitcast i8* %.5.i3057 to { i64, i64, i8, i64 }**
  %.6.i30585377 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %629, align 8
  %.5065 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i30585377, i64 0, i32 1
  store i64 1, i64* %.5065, align 8
  %.6.i30565378 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %629, align 8
  %.507110820 = bitcast { i64, i64, i8, i64 }* %.6.i30565378 to i64*
  store i64 0, i64* %.507110820, align 8
  %.6.i30545379 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %629, align 8
  %.5077 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i30545379, i64 0, i32 2
  store i8 0, i8* %.5077, align 1
  %.6.i30505380 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %629, align 8
  %.5090 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i30505380, i64 0, i32 3
  store i64 0, i64* %.5090, align 1
  %.6.i30465382 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %629, align 8
  %.511710821 = bitcast { i64, i64, i8, i64 }* %.6.i30465382 to i64*
  store i64 1, i64* %.511710821, align 8
  %.6.i30425383 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %629, align 8
  %.5130 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i30425383, i64 0, i32 3
  store i64 80, i64* %.5130, align 8
  %.6.i127653846895 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %629, align 8
  %.5180689610822 = bitcast { i64, i64, i8, i64 }* %.6.i127653846895 to i64*
  %.51816897 = load i64, i64* %.5180689610822, align 8
  %.51826898 = icmp sgt i64 %.51816897, 0
  br i1 %.51826898, label %B828.lr.ph, label %B830

B828.lr.ph:                                       ; preds = %B758.endif.endif.endif
  %min.iters.check7866 = icmp ult i64 %.51816897, 16
  br i1 %min.iters.check7866, label %B828.preheader, label %vector.ph7867

B828.preheader:                                   ; preds = %middle.block7863, %B828.lr.ph
  %temp.2.431.2.06900.ph = phi i64 [ 1, %B828.lr.ph ], [ %643, %middle.block7863 ]
  %.5146.06899.ph = phi i64 [ 0, %B828.lr.ph ], [ %n.vec7869, %middle.block7863 ]
  br label %B828

vector.ph7867:                                    ; preds = %B828.lr.ph
  %n.vec7869 = and i64 %.51816897, -16
  br label %vector.body7865

vector.body7865:                                  ; preds = %vector.body7865, %vector.ph7867
  %index7870 = phi i64 [ 0, %vector.ph7867 ], [ %index.next7871, %vector.body7865 ]
  %vec.phi7874 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7867 ], [ %638, %vector.body7865 ]
  %vec.phi7875 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7867 ], [ %639, %vector.body7865 ]
  %vec.phi7876 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7867 ], [ %640, %vector.body7865 ]
  %vec.phi7877 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7867 ], [ %641, %vector.body7865 ]
  %sunkaddr10823 = mul i64 %index7870, 8
  %630 = bitcast { i64, i64, i8, i64 }* %.6.i127653846895 to i8*
  %sunkaddr10824 = getelementptr i8, i8* %630, i64 %sunkaddr10823
  %sunkaddr10825 = getelementptr i8, i8* %sunkaddr10824, i64 24
  %631 = bitcast i8* %sunkaddr10825 to <4 x i64>*
  %wide.load7878 = load <4 x i64>, <4 x i64>* %631, align 8
  %sunkaddr10826 = mul i64 %index7870, 8
  %632 = bitcast { i64, i64, i8, i64 }* %.6.i127653846895 to i8*
  %sunkaddr10827 = getelementptr i8, i8* %632, i64 %sunkaddr10826
  %sunkaddr10828 = getelementptr i8, i8* %sunkaddr10827, i64 56
  %633 = bitcast i8* %sunkaddr10828 to <4 x i64>*
  %wide.load7879 = load <4 x i64>, <4 x i64>* %633, align 8
  %sunkaddr10829 = mul i64 %index7870, 8
  %634 = bitcast { i64, i64, i8, i64 }* %.6.i127653846895 to i8*
  %sunkaddr10830 = getelementptr i8, i8* %634, i64 %sunkaddr10829
  %sunkaddr10831 = getelementptr i8, i8* %sunkaddr10830, i64 88
  %635 = bitcast i8* %sunkaddr10831 to <4 x i64>*
  %wide.load7880 = load <4 x i64>, <4 x i64>* %635, align 8
  %sunkaddr10832 = mul i64 %index7870, 8
  %636 = bitcast { i64, i64, i8, i64 }* %.6.i127653846895 to i8*
  %sunkaddr10833 = getelementptr i8, i8* %636, i64 %sunkaddr10832
  %sunkaddr10834 = getelementptr i8, i8* %sunkaddr10833, i64 120
  %637 = bitcast i8* %sunkaddr10834 to <4 x i64>*
  %wide.load7881 = load <4 x i64>, <4 x i64>* %637, align 8
  %638 = mul <4 x i64> %wide.load7878, %vec.phi7874
  %639 = mul <4 x i64> %wide.load7879, %vec.phi7875
  %640 = mul <4 x i64> %wide.load7880, %vec.phi7876
  %641 = mul <4 x i64> %wide.load7881, %vec.phi7877
  %index.next7871 = add i64 %index7870, 16
  %642 = icmp eq i64 %n.vec7869, %index.next7871
  br i1 %642, label %middle.block7863, label %vector.body7865, !llvm.loop !129

middle.block7863:                                 ; preds = %vector.body7865
  %bin.rdx7882 = mul <4 x i64> %639, %638
  %bin.rdx7883 = mul <4 x i64> %640, %bin.rdx7882
  %bin.rdx7884 = mul <4 x i64> %641, %bin.rdx7883
  %rdx.shuf10127 = shufflevector <4 x i64> %bin.rdx7884, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10128 = mul <4 x i64> %bin.rdx7884, %rdx.shuf10127
  %rdx.shuf10129 = shufflevector <4 x i64> %bin.rdx10128, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10130 = mul <4 x i64> %bin.rdx10128, %rdx.shuf10129
  %643 = extractelement <4 x i64> %bin.rdx10130, i32 0
  %cmp.n7873 = icmp eq i64 %.51816897, %n.vec7869
  br i1 %cmp.n7873, label %B830, label %B828.preheader

B862.endif.endif.if:                              ; preds = %B830
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B862.endif.endif.endif:                           ; preds = %B830
  %.5.i3037 = getelementptr i8, i8* %.5284, i64 24
  %644 = bitcast i8* %.5.i3037 to { i64, i64, i8, i64 }**
  %.6.i30385385 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %644, align 8
  %.5297 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i30385385, i64 0, i32 1
  store i64 2, i64* %.5297, align 8
  %.6.i30365386 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %644, align 8
  %.530310835 = bitcast { i64, i64, i8, i64 }* %.6.i30365386 to i64*
  store i64 0, i64* %.530310835, align 8
  %.6.i30345387 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %644, align 8
  %.5309 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i30345387, i64 0, i32 2
  store i8 0, i8* %.5309, align 1
  %.6.i30305388 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %644, align 8
  %.5322 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i30305388, i64 0, i32 3
  %.5333 = bitcast i64* %.5322 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %.5333, i8 0, i64 16, i1 false)
  %.6.i30265390 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %644, align 8
  %.534910836 = bitcast { i64, i64, i8, i64 }* %.6.i30265390 to i64*
  store i64 2, i64* %.534910836, align 8
  %.6.i30225391 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %644, align 8
  %.5362 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i30225391, i64 0, i32 3
  store i64 95, i64* %.5362, align 8
  %.6.i30185392 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %644, align 8
  %.5376 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i30185392, i64 0, i32 3
  %.5377 = getelementptr i64, i64* %.5376, i64 1
  store i64 1, i64* %.5377, align 8
  %.6.i136053936887 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %644, align 8
  %.5430688810837 = bitcast { i64, i64, i8, i64 }* %.6.i136053936887 to i64*
  %.54316889 = load i64, i64* %.5430688810837, align 8
  %.54326890 = icmp sgt i64 %.54316889, 0
  br i1 %.54326890, label %B910.lr.ph, label %B912

B910.lr.ph:                                       ; preds = %B862.endif.endif.endif
  %min.iters.check7889 = icmp ult i64 %.54316889, 16
  br i1 %min.iters.check7889, label %B910.preheader, label %vector.ph7890

B910.preheader:                                   ; preds = %middle.block7886, %B910.lr.ph
  %temp.2.377.2.06892.ph = phi i64 [ 1, %B910.lr.ph ], [ %658, %middle.block7886 ]
  %.5396.06891.ph = phi i64 [ 0, %B910.lr.ph ], [ %n.vec7892, %middle.block7886 ]
  br label %B910

vector.ph7890:                                    ; preds = %B910.lr.ph
  %n.vec7892 = and i64 %.54316889, -16
  br label %vector.body7888

vector.body7888:                                  ; preds = %vector.body7888, %vector.ph7890
  %index7893 = phi i64 [ 0, %vector.ph7890 ], [ %index.next7894, %vector.body7888 ]
  %vec.phi7897 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7890 ], [ %653, %vector.body7888 ]
  %vec.phi7898 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7890 ], [ %654, %vector.body7888 ]
  %vec.phi7899 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7890 ], [ %655, %vector.body7888 ]
  %vec.phi7900 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7890 ], [ %656, %vector.body7888 ]
  %sunkaddr10838 = mul i64 %index7893, 8
  %645 = bitcast { i64, i64, i8, i64 }* %.6.i136053936887 to i8*
  %sunkaddr10839 = getelementptr i8, i8* %645, i64 %sunkaddr10838
  %sunkaddr10840 = getelementptr i8, i8* %sunkaddr10839, i64 24
  %646 = bitcast i8* %sunkaddr10840 to <4 x i64>*
  %wide.load7901 = load <4 x i64>, <4 x i64>* %646, align 8
  %sunkaddr10841 = mul i64 %index7893, 8
  %647 = bitcast { i64, i64, i8, i64 }* %.6.i136053936887 to i8*
  %sunkaddr10842 = getelementptr i8, i8* %647, i64 %sunkaddr10841
  %sunkaddr10843 = getelementptr i8, i8* %sunkaddr10842, i64 56
  %648 = bitcast i8* %sunkaddr10843 to <4 x i64>*
  %wide.load7902 = load <4 x i64>, <4 x i64>* %648, align 8
  %sunkaddr10844 = mul i64 %index7893, 8
  %649 = bitcast { i64, i64, i8, i64 }* %.6.i136053936887 to i8*
  %sunkaddr10845 = getelementptr i8, i8* %649, i64 %sunkaddr10844
  %sunkaddr10846 = getelementptr i8, i8* %sunkaddr10845, i64 88
  %650 = bitcast i8* %sunkaddr10846 to <4 x i64>*
  %wide.load7903 = load <4 x i64>, <4 x i64>* %650, align 8
  %sunkaddr10847 = mul i64 %index7893, 8
  %651 = bitcast { i64, i64, i8, i64 }* %.6.i136053936887 to i8*
  %sunkaddr10848 = getelementptr i8, i8* %651, i64 %sunkaddr10847
  %sunkaddr10849 = getelementptr i8, i8* %sunkaddr10848, i64 120
  %652 = bitcast i8* %sunkaddr10849 to <4 x i64>*
  %wide.load7904 = load <4 x i64>, <4 x i64>* %652, align 8
  %653 = mul <4 x i64> %wide.load7901, %vec.phi7897
  %654 = mul <4 x i64> %wide.load7902, %vec.phi7898
  %655 = mul <4 x i64> %wide.load7903, %vec.phi7899
  %656 = mul <4 x i64> %wide.load7904, %vec.phi7900
  %index.next7894 = add i64 %index7893, 16
  %657 = icmp eq i64 %n.vec7892, %index.next7894
  br i1 %657, label %middle.block7886, label %vector.body7888, !llvm.loop !130

middle.block7886:                                 ; preds = %vector.body7888
  %bin.rdx7905 = mul <4 x i64> %654, %653
  %bin.rdx7906 = mul <4 x i64> %655, %bin.rdx7905
  %bin.rdx7907 = mul <4 x i64> %656, %bin.rdx7906
  %rdx.shuf10131 = shufflevector <4 x i64> %bin.rdx7907, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10132 = mul <4 x i64> %bin.rdx7907, %rdx.shuf10131
  %rdx.shuf10133 = shufflevector <4 x i64> %bin.rdx10132, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10134 = mul <4 x i64> %bin.rdx10132, %rdx.shuf10133
  %658 = extractelement <4 x i64> %bin.rdx10134, i32 0
  %cmp.n7896 = icmp eq i64 %.54316889, %n.vec7892
  br i1 %cmp.n7896, label %B912, label %B910.preheader

B912.endif.endif.if:                              ; preds = %B912
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B912.endif.endif.endif:                           ; preds = %B912
  %.5.i3013 = getelementptr i8, i8* %.5502, i64 24
  %659 = bitcast i8* %.5.i3013 to { i64, i64, i8, i64 }**
  %.6.i30145394 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %659, align 8
  %.5515 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i30145394, i64 0, i32 1
  store i64 3, i64* %.5515, align 8
  %.6.i30125395 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %659, align 8
  %.552110850 = bitcast { i64, i64, i8, i64 }* %.6.i30125395 to i64*
  store i64 0, i64* %.552110850, align 8
  %.6.i30105396 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %659, align 8
  %.5527 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i30105396, i64 0, i32 2
  store i8 0, i8* %.5527, align 1
  %.6.i30065397 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %659, align 8
  %.5540 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i30065397, i64 0, i32 3
  %.5551 = bitcast i64* %.5540 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(24) %.5551, i8 0, i64 24, i1 false)
  %.6.i30025399 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %659, align 8
  %.556710851 = bitcast { i64, i64, i8, i64 }* %.6.i30025399 to i64*
  store i64 3, i64* %.556710851, align 8
  %.6.i29985400 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %659, align 8
  %.5580 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i29985400, i64 0, i32 3
  store i64 10, i64* %.5580, align 8
  %.6.i29945401 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %659, align 8
  %.5594 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i29945401, i64 0, i32 3
  %.5595 = getelementptr i64, i64* %.5594, i64 1
  store i64 14, i64* %.5595, align 8
  %.6.i29905402 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %659, align 8
  %.5608 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i29905402, i64 0, i32 3
  %.5609 = getelementptr i64, i64* %.5608, i64 2
  store i64 2, i64* %.5609, align 8
  %.6.i3.i2934 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %659, align 8, !noalias !131
  %.5342.i293510852 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2934 to i64*
  %.548.i2936 = load i64, i64* %.5342.i293510852, align 8, !noalias !131
  %.559.i2937 = icmp sgt i64 %.548.i2936, 0
  br i1 %.559.i2937, label %B14.endif.lr.ph.i2939, label %B912.endif.endif.endif.endif

B14.endif.lr.ph.i2939:                            ; preds = %B912.endif.endif.endif
  %min.iters.check.i2938 = icmp ult i64 %.548.i2936, 16
  br i1 %min.iters.check.i2938, label %B14.endif.preheader.i2942, label %vector.ph.i2944

B14.endif.preheader.i2942:                        ; preds = %middle.block.i2976, %B14.endif.lr.ph.i2939
  %acc.2.011.ph.i2940 = phi i64 [ 0, %B14.endif.lr.ph.i2939 ], [ %673, %middle.block.i2976 ]
  %.17.010.ph.i2941 = phi i64 [ 0, %B14.endif.lr.ph.i2939 ], [ %n.vec.i2943, %middle.block.i2976 ]
  br label %B14.endif.i2987

vector.ph.i2944:                                  ; preds = %B14.endif.lr.ph.i2939
  %n.vec.i2943 = and i64 %.548.i2936, -16
  br label %vector.body.i2967

vector.body.i2967:                                ; preds = %vector.body.i2967, %vector.ph.i2944
  %index.i2945 = phi i64 [ 0, %vector.ph.i2944 ], [ %index.next.i2966, %vector.body.i2967 ]
  %vec.phi.i2946 = phi <4 x i64> [ zeroinitializer, %vector.ph.i2944 ], [ %668, %vector.body.i2967 ]
  %vec.phi12.i2947 = phi <4 x i64> [ zeroinitializer, %vector.ph.i2944 ], [ %669, %vector.body.i2967 ]
  %vec.phi13.i2948 = phi <4 x i64> [ zeroinitializer, %vector.ph.i2944 ], [ %670, %vector.body.i2967 ]
  %vec.phi14.i2949 = phi <4 x i64> [ zeroinitializer, %vector.ph.i2944 ], [ %671, %vector.body.i2967 ]
  %sunkaddr10853 = mul i64 %index.i2945, 8
  %660 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2934 to i8*
  %sunkaddr10854 = getelementptr i8, i8* %660, i64 %sunkaddr10853
  %sunkaddr10855 = getelementptr i8, i8* %sunkaddr10854, i64 24
  %661 = bitcast i8* %sunkaddr10855 to <4 x i64>*
  %wide.load.i2953 = load <4 x i64>, <4 x i64>* %661, align 8, !noalias !131
  %sunkaddr10856 = mul i64 %index.i2945, 8
  %662 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2934 to i8*
  %sunkaddr10857 = getelementptr i8, i8* %662, i64 %sunkaddr10856
  %sunkaddr10858 = getelementptr i8, i8* %sunkaddr10857, i64 56
  %663 = bitcast i8* %sunkaddr10858 to <4 x i64>*
  %wide.load15.i2957 = load <4 x i64>, <4 x i64>* %663, align 8, !noalias !131
  %sunkaddr10859 = mul i64 %index.i2945, 8
  %664 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2934 to i8*
  %sunkaddr10860 = getelementptr i8, i8* %664, i64 %sunkaddr10859
  %sunkaddr10861 = getelementptr i8, i8* %sunkaddr10860, i64 88
  %665 = bitcast i8* %sunkaddr10861 to <4 x i64>*
  %wide.load16.i2961 = load <4 x i64>, <4 x i64>* %665, align 8, !noalias !131
  %sunkaddr10862 = mul i64 %index.i2945, 8
  %666 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2934 to i8*
  %sunkaddr10863 = getelementptr i8, i8* %666, i64 %sunkaddr10862
  %sunkaddr10864 = getelementptr i8, i8* %sunkaddr10863, i64 120
  %667 = bitcast i8* %sunkaddr10864 to <4 x i64>*
  %wide.load17.i2965 = load <4 x i64>, <4 x i64>* %667, align 8, !noalias !131
  %668 = add <4 x i64> %wide.load.i2953, %vec.phi.i2946
  %669 = add <4 x i64> %wide.load15.i2957, %vec.phi12.i2947
  %670 = add <4 x i64> %wide.load16.i2961, %vec.phi13.i2948
  %671 = add <4 x i64> %wide.load17.i2965, %vec.phi14.i2949
  %index.next.i2966 = add i64 %index.i2945, 16
  %672 = icmp eq i64 %n.vec.i2943, %index.next.i2966
  br i1 %672, label %middle.block.i2976, label %vector.body.i2967, !llvm.loop !51

middle.block.i2976:                               ; preds = %vector.body.i2967
  %bin.rdx.i2968 = add <4 x i64> %669, %668
  %bin.rdx18.i2969 = add <4 x i64> %bin.rdx.i2968, %670
  %bin.rdx19.i2970 = add <4 x i64> %bin.rdx18.i2969, %671
  %rdx.shuf.i2971 = shufflevector <4 x i64> %bin.rdx19.i2970, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx39.i2972 = add <4 x i64> %rdx.shuf.i2971, %bin.rdx19.i2970
  %rdx.shuf40.i2973 = shufflevector <4 x i64> %bin.rdx39.i2972, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx41.i2974 = add <4 x i64> %rdx.shuf40.i2973, %bin.rdx39.i2972
  %673 = extractelement <4 x i64> %bin.rdx41.i2974, i32 0
  %cmp.n.i2975 = icmp eq i64 %.548.i2936, %n.vec.i2943
  br i1 %cmp.n.i2975, label %B912.endif.endif.endif.endif, label %B14.endif.preheader.i2942

B14.endif.i2987:                                  ; preds = %B14.endif.i2987, %B14.endif.preheader.i2942
  %acc.2.011.i2978 = phi i64 [ %.94.i2985, %B14.endif.i2987 ], [ %acc.2.011.ph.i2940, %B14.endif.preheader.i2942 ]
  %.17.010.i2979 = phi i64 [ %.68.i2984, %B14.endif.i2987 ], [ %.17.010.ph.i2941, %B14.endif.preheader.i2942 ]
  %sunkaddr10865 = mul i64 %.17.010.i2979, 8
  %674 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2934 to i8*
  %sunkaddr10866 = getelementptr i8, i8* %674, i64 %sunkaddr10865
  %sunkaddr10867 = getelementptr i8, i8* %sunkaddr10866, i64 24
  %675 = bitcast i8* %sunkaddr10867 to i64*
  %.65.i2983 = load i64, i64* %675, align 8, !noalias !131
  %.68.i2984 = add nuw nsw i64 %.17.010.i2979, 1
  %.94.i2985 = add nsw i64 %.65.i2983, %acc.2.011.i2978
  %exitcond.not.i2986 = icmp eq i64 %.548.i2936, %.68.i2984
  br i1 %exitcond.not.i2986, label %B912.endif.endif.endif.endif, label %B14.endif.i2987, !llvm.loop !52

B912.endif.endif.endif.endif:                     ; preds = %B14.endif.i2987, %middle.block.i2976, %B912.endif.endif.endif
  %acc.2.0.lcssa.i2977 = phi i64 [ 0, %B912.endif.endif.endif ], [ %673, %middle.block.i2976 ], [ %.94.i2985, %B14.endif.i2987 ]
  tail call void @NRT_decref(i8* nonnull %.5502)
  %.5656 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 48, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.5657 = icmp eq i8* %.5656, null
  br i1 %.5657, label %B912.endif.endif.endif.endif.endif.endif.if, label %B912.endif.endif.endif.endif.endif.endif.endif, !prof !3

B912.endif.endif.endif.endif.endif.endif.if:      ; preds = %B912.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B912.endif.endif.endif.endif.endif.endif.endif:   ; preds = %B912.endif.endif.endif.endif
  %.5.i2929 = getelementptr i8, i8* %.5656, i64 24
  %676 = bitcast i8* %.5.i2929 to { i64, i64, i8, i64 }**
  %.6.i29305403 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %676, align 8
  %.5669 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i29305403, i64 0, i32 1
  store i64 3, i64* %.5669, align 8
  %.6.i29285404 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %676, align 8
  %.567510868 = bitcast { i64, i64, i8, i64 }* %.6.i29285404 to i64*
  store i64 0, i64* %.567510868, align 8
  %.6.i29265405 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %676, align 8
  %.5681 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i29265405, i64 0, i32 2
  store i8 0, i8* %.5681, align 1
  %.6.i29225406 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %676, align 8
  %.5694 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i29225406, i64 0, i32 3
  %.5705 = bitcast i64* %.5694 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(24) %.5705, i8 0, i64 24, i1 false)
  %.6.i29185408 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %676, align 8
  %.572110869 = bitcast { i64, i64, i8, i64 }* %.6.i29185408 to i64*
  store i64 3, i64* %.572110869, align 8
  %.6.i29145409 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %676, align 8
  %.5734 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i29145409, i64 0, i32 3
  store i64 8, i64* %.5734, align 8
  %.6.i29105410 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %676, align 8
  %.5748 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i29105410, i64 0, i32 3
  %.5749 = getelementptr i64, i64* %.5748, i64 1
  store i64 9, i64* %.5749, align 8
  %.6.i29065411 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %676, align 8
  %.5762 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i29065411, i64 0, i32 3
  %.5763 = getelementptr i64, i64* %.5762, i64 2
  store i64 11, i64* %.5763, align 8
  %.6.i3.i2850 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %676, align 8, !noalias !134
  %.5342.i285110870 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2850 to i64*
  %.548.i2852 = load i64, i64* %.5342.i285110870, align 8, !noalias !134
  %.559.i2853 = icmp sgt i64 %.548.i2852, 0
  br i1 %.559.i2853, label %B14.endif.lr.ph.i2855, label %B912.endif.endif.endif.endif.endif.endif.endif.endif

B14.endif.lr.ph.i2855:                            ; preds = %B912.endif.endif.endif.endif.endif.endif.endif
  %min.iters.check.i2854 = icmp ult i64 %.548.i2852, 16
  br i1 %min.iters.check.i2854, label %B14.endif.preheader.i2858, label %vector.ph.i2860

B14.endif.preheader.i2858:                        ; preds = %middle.block.i2892, %B14.endif.lr.ph.i2855
  %acc.2.011.ph.i2856 = phi i64 [ 0, %B14.endif.lr.ph.i2855 ], [ %690, %middle.block.i2892 ]
  %.17.010.ph.i2857 = phi i64 [ 0, %B14.endif.lr.ph.i2855 ], [ %n.vec.i2859, %middle.block.i2892 ]
  br label %B14.endif.i2903

vector.ph.i2860:                                  ; preds = %B14.endif.lr.ph.i2855
  %n.vec.i2859 = and i64 %.548.i2852, -16
  br label %vector.body.i2883

vector.body.i2883:                                ; preds = %vector.body.i2883, %vector.ph.i2860
  %index.i2861 = phi i64 [ 0, %vector.ph.i2860 ], [ %index.next.i2882, %vector.body.i2883 ]
  %vec.phi.i2862 = phi <4 x i64> [ zeroinitializer, %vector.ph.i2860 ], [ %685, %vector.body.i2883 ]
  %vec.phi12.i2863 = phi <4 x i64> [ zeroinitializer, %vector.ph.i2860 ], [ %686, %vector.body.i2883 ]
  %vec.phi13.i2864 = phi <4 x i64> [ zeroinitializer, %vector.ph.i2860 ], [ %687, %vector.body.i2883 ]
  %vec.phi14.i2865 = phi <4 x i64> [ zeroinitializer, %vector.ph.i2860 ], [ %688, %vector.body.i2883 ]
  %sunkaddr10871 = mul i64 %index.i2861, 8
  %677 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2850 to i8*
  %sunkaddr10872 = getelementptr i8, i8* %677, i64 %sunkaddr10871
  %sunkaddr10873 = getelementptr i8, i8* %sunkaddr10872, i64 24
  %678 = bitcast i8* %sunkaddr10873 to <4 x i64>*
  %wide.load.i2869 = load <4 x i64>, <4 x i64>* %678, align 8, !noalias !134
  %sunkaddr10874 = mul i64 %index.i2861, 8
  %679 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2850 to i8*
  %sunkaddr10875 = getelementptr i8, i8* %679, i64 %sunkaddr10874
  %sunkaddr10876 = getelementptr i8, i8* %sunkaddr10875, i64 56
  %680 = bitcast i8* %sunkaddr10876 to <4 x i64>*
  %wide.load15.i2873 = load <4 x i64>, <4 x i64>* %680, align 8, !noalias !134
  %sunkaddr10877 = mul i64 %index.i2861, 8
  %681 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2850 to i8*
  %sunkaddr10878 = getelementptr i8, i8* %681, i64 %sunkaddr10877
  %sunkaddr10879 = getelementptr i8, i8* %sunkaddr10878, i64 88
  %682 = bitcast i8* %sunkaddr10879 to <4 x i64>*
  %wide.load16.i2877 = load <4 x i64>, <4 x i64>* %682, align 8, !noalias !134
  %sunkaddr10880 = mul i64 %index.i2861, 8
  %683 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2850 to i8*
  %sunkaddr10881 = getelementptr i8, i8* %683, i64 %sunkaddr10880
  %sunkaddr10882 = getelementptr i8, i8* %sunkaddr10881, i64 120
  %684 = bitcast i8* %sunkaddr10882 to <4 x i64>*
  %wide.load17.i2881 = load <4 x i64>, <4 x i64>* %684, align 8, !noalias !134
  %685 = add <4 x i64> %wide.load.i2869, %vec.phi.i2862
  %686 = add <4 x i64> %wide.load15.i2873, %vec.phi12.i2863
  %687 = add <4 x i64> %wide.load16.i2877, %vec.phi13.i2864
  %688 = add <4 x i64> %wide.load17.i2881, %vec.phi14.i2865
  %index.next.i2882 = add i64 %index.i2861, 16
  %689 = icmp eq i64 %n.vec.i2859, %index.next.i2882
  br i1 %689, label %middle.block.i2892, label %vector.body.i2883, !llvm.loop !51

middle.block.i2892:                               ; preds = %vector.body.i2883
  %bin.rdx.i2884 = add <4 x i64> %686, %685
  %bin.rdx18.i2885 = add <4 x i64> %bin.rdx.i2884, %687
  %bin.rdx19.i2886 = add <4 x i64> %bin.rdx18.i2885, %688
  %rdx.shuf.i2887 = shufflevector <4 x i64> %bin.rdx19.i2886, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx39.i2888 = add <4 x i64> %rdx.shuf.i2887, %bin.rdx19.i2886
  %rdx.shuf40.i2889 = shufflevector <4 x i64> %bin.rdx39.i2888, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx41.i2890 = add <4 x i64> %rdx.shuf40.i2889, %bin.rdx39.i2888
  %690 = extractelement <4 x i64> %bin.rdx41.i2890, i32 0
  %cmp.n.i2891 = icmp eq i64 %.548.i2852, %n.vec.i2859
  br i1 %cmp.n.i2891, label %B912.endif.endif.endif.endif.endif.endif.endif.endif, label %B14.endif.preheader.i2858

B14.endif.i2903:                                  ; preds = %B14.endif.i2903, %B14.endif.preheader.i2858
  %acc.2.011.i2894 = phi i64 [ %.94.i2901, %B14.endif.i2903 ], [ %acc.2.011.ph.i2856, %B14.endif.preheader.i2858 ]
  %.17.010.i2895 = phi i64 [ %.68.i2900, %B14.endif.i2903 ], [ %.17.010.ph.i2857, %B14.endif.preheader.i2858 ]
  %sunkaddr10883 = mul i64 %.17.010.i2895, 8
  %691 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2850 to i8*
  %sunkaddr10884 = getelementptr i8, i8* %691, i64 %sunkaddr10883
  %sunkaddr10885 = getelementptr i8, i8* %sunkaddr10884, i64 24
  %692 = bitcast i8* %sunkaddr10885 to i64*
  %.65.i2899 = load i64, i64* %692, align 8, !noalias !134
  %.68.i2900 = add nuw nsw i64 %.17.010.i2895, 1
  %.94.i2901 = add nsw i64 %.65.i2899, %acc.2.011.i2894
  %exitcond.not.i2902 = icmp eq i64 %.548.i2852, %.68.i2900
  br i1 %exitcond.not.i2902, label %B912.endif.endif.endif.endif.endif.endif.endif.endif, label %B14.endif.i2903, !llvm.loop !52

B912.endif.endif.endif.endif.endif.endif.endif.endif: ; preds = %B14.endif.i2903, %middle.block.i2892, %B912.endif.endif.endif.endif.endif.endif.endif
  %acc.2.0.lcssa.i2893 = phi i64 [ 0, %B912.endif.endif.endif.endif.endif.endif.endif ], [ %690, %middle.block.i2892 ], [ %.94.i2901, %B14.endif.i2903 ]
  tail call void @NRT_decref(i8* nonnull %.5656)
  %.5827 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 40, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.5828 = icmp eq i8* %.5827, null
  br i1 %.5828, label %B934.endif.endif.if, label %B934.endif.endif.endif, !prof !3

B934.endif.endif.if:                              ; preds = %B912.endif.endif.endif.endif.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B934.endif.endif.endif:                           ; preds = %B912.endif.endif.endif.endif.endif.endif.endif.endif
  %.5791 = icmp slt i64 %acc.2.0.lcssa.i2977, %acc.2.0.lcssa.i2893
  %"$phi342.16.2.0" = zext i1 %.5791 to i64
  %.5.i2845 = getelementptr i8, i8* %.5827, i64 24
  %693 = bitcast i8* %.5.i2845 to { i64, i64, i8, i64 }**
  %.6.i28465412 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %693, align 8
  %.5840 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i28465412, i64 0, i32 1
  store i64 2, i64* %.5840, align 8
  %.6.i28445413 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %693, align 8
  %.584610886 = bitcast { i64, i64, i8, i64 }* %.6.i28445413 to i64*
  store i64 0, i64* %.584610886, align 8
  %.6.i28425414 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %693, align 8
  %.5852 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i28425414, i64 0, i32 2
  store i8 0, i8* %.5852, align 1
  %.6.i28385415 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %693, align 8
  %.5865 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i28385415, i64 0, i32 3
  %.5876 = bitcast i64* %.5865 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %.5876, i8 0, i64 16, i1 false)
  %.6.i28345417 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %693, align 8
  %.589210887 = bitcast { i64, i64, i8, i64 }* %.6.i28345417 to i64*
  store i64 2, i64* %.589210887, align 8
  %.6.i28305418 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %693, align 8
  %.5905 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i28305418, i64 0, i32 3
  store i64 8599772, i64* %.5905, align 8
  %.6.i28265419 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %693, align 8
  %.5919 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i28265419, i64 0, i32 3
  %.5920 = getelementptr i64, i64* %.5919, i64 1
  store i64 %"$phi342.16.2.0", i64* %.5920, align 8
  %.6.i149654206879 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %693, align 8
  %.5973688010888 = bitcast { i64, i64, i8, i64 }* %.6.i149654206879 to i64*
  %.59746881 = load i64, i64* %.5973688010888, align 8
  %.59756882 = icmp sgt i64 %.59746881, 0
  br i1 %.59756882, label %B958.lr.ph, label %B960

B958.lr.ph:                                       ; preds = %B934.endif.endif.endif
  %min.iters.check7912 = icmp ult i64 %.59746881, 16
  br i1 %min.iters.check7912, label %B958.preheader, label %vector.ph7913

B958.preheader:                                   ; preds = %middle.block7909, %B958.lr.ph
  %temp.2.359.2.06884.ph = phi i64 [ 1, %B958.lr.ph ], [ %707, %middle.block7909 ]
  %.5939.06883.ph = phi i64 [ 0, %B958.lr.ph ], [ %n.vec7915, %middle.block7909 ]
  br label %B958

vector.ph7913:                                    ; preds = %B958.lr.ph
  %n.vec7915 = and i64 %.59746881, -16
  br label %vector.body7911

vector.body7911:                                  ; preds = %vector.body7911, %vector.ph7913
  %index7916 = phi i64 [ 0, %vector.ph7913 ], [ %index.next7917, %vector.body7911 ]
  %vec.phi7920 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7913 ], [ %702, %vector.body7911 ]
  %vec.phi7921 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7913 ], [ %703, %vector.body7911 ]
  %vec.phi7922 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7913 ], [ %704, %vector.body7911 ]
  %vec.phi7923 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7913 ], [ %705, %vector.body7911 ]
  %sunkaddr10889 = mul i64 %index7916, 8
  %694 = bitcast { i64, i64, i8, i64 }* %.6.i149654206879 to i8*
  %sunkaddr10890 = getelementptr i8, i8* %694, i64 %sunkaddr10889
  %sunkaddr10891 = getelementptr i8, i8* %sunkaddr10890, i64 24
  %695 = bitcast i8* %sunkaddr10891 to <4 x i64>*
  %wide.load7924 = load <4 x i64>, <4 x i64>* %695, align 8
  %sunkaddr10892 = mul i64 %index7916, 8
  %696 = bitcast { i64, i64, i8, i64 }* %.6.i149654206879 to i8*
  %sunkaddr10893 = getelementptr i8, i8* %696, i64 %sunkaddr10892
  %sunkaddr10894 = getelementptr i8, i8* %sunkaddr10893, i64 56
  %697 = bitcast i8* %sunkaddr10894 to <4 x i64>*
  %wide.load7925 = load <4 x i64>, <4 x i64>* %697, align 8
  %sunkaddr10895 = mul i64 %index7916, 8
  %698 = bitcast { i64, i64, i8, i64 }* %.6.i149654206879 to i8*
  %sunkaddr10896 = getelementptr i8, i8* %698, i64 %sunkaddr10895
  %sunkaddr10897 = getelementptr i8, i8* %sunkaddr10896, i64 88
  %699 = bitcast i8* %sunkaddr10897 to <4 x i64>*
  %wide.load7926 = load <4 x i64>, <4 x i64>* %699, align 8
  %sunkaddr10898 = mul i64 %index7916, 8
  %700 = bitcast { i64, i64, i8, i64 }* %.6.i149654206879 to i8*
  %sunkaddr10899 = getelementptr i8, i8* %700, i64 %sunkaddr10898
  %sunkaddr10900 = getelementptr i8, i8* %sunkaddr10899, i64 120
  %701 = bitcast i8* %sunkaddr10900 to <4 x i64>*
  %wide.load7927 = load <4 x i64>, <4 x i64>* %701, align 8
  %702 = mul <4 x i64> %wide.load7924, %vec.phi7920
  %703 = mul <4 x i64> %wide.load7925, %vec.phi7921
  %704 = mul <4 x i64> %wide.load7926, %vec.phi7922
  %705 = mul <4 x i64> %wide.load7927, %vec.phi7923
  %index.next7917 = add i64 %index7916, 16
  %706 = icmp eq i64 %n.vec7915, %index.next7917
  br i1 %706, label %middle.block7909, label %vector.body7911, !llvm.loop !137

middle.block7909:                                 ; preds = %vector.body7911
  %bin.rdx7928 = mul <4 x i64> %703, %702
  %bin.rdx7929 = mul <4 x i64> %704, %bin.rdx7928
  %bin.rdx7930 = mul <4 x i64> %705, %bin.rdx7929
  %rdx.shuf10135 = shufflevector <4 x i64> %bin.rdx7930, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10136 = mul <4 x i64> %bin.rdx7930, %rdx.shuf10135
  %rdx.shuf10137 = shufflevector <4 x i64> %bin.rdx10136, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10138 = mul <4 x i64> %bin.rdx10136, %rdx.shuf10137
  %707 = extractelement <4 x i64> %bin.rdx10138, i32 0
  %cmp.n7919 = icmp eq i64 %.59746881, %n.vec7915
  br i1 %cmp.n7919, label %B960, label %B958.preheader

B960.endif.endif.if:                              ; preds = %B960
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B960.endif.endif.endif:                           ; preds = %B960
  %.5.i2821 = getelementptr i8, i8* %.6045, i64 24
  %708 = bitcast i8* %.5.i2821 to { i64, i64, i8, i64 }**
  %.6.i28225421 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %708, align 8
  %.6058 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i28225421, i64 0, i32 1
  store i64 4, i64* %.6058, align 8
  %.6.i28205422 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %708, align 8
  %.606410901 = bitcast { i64, i64, i8, i64 }* %.6.i28205422 to i64*
  store i64 0, i64* %.606410901, align 8
  %.6.i28185423 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %708, align 8
  %.6070 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i28185423, i64 0, i32 2
  store i8 0, i8* %.6070, align 1
  %.6.i28145424 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %708, align 8
  %.6083 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i28145424, i64 0, i32 3
  %.6094 = bitcast i64* %.6083 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(32) %.6094, i8 0, i64 32, i1 false)
  %.6.i28105426 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %708, align 8
  %.611010902 = bitcast { i64, i64, i8, i64 }* %.6.i28105426 to i64*
  store i64 4, i64* %.611010902, align 8
  %.6.i28065427 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %708, align 8
  %.6123 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i28065427, i64 0, i32 3
  store i64 6, i64* %.6123, align 8
  %.6.i28025428 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %708, align 8
  %.6137 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i28025428, i64 0, i32 3
  %.6138 = getelementptr i64, i64* %.6137, i64 1
  store i64 176724, i64* %.6138, align 8
  %.6.i27985429 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %708, align 8
  %.6151 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i27985429, i64 0, i32 3
  %.6152 = getelementptr i64, i64* %.6151, i64 2
  store i64 17, i64* %.6152, align 8
  %.6.i27945430 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %708, align 8
  %.6165 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i27945430, i64 0, i32 3
  %.6166 = getelementptr i64, i64* %.6165, i64 3
  store i64 218, i64* %.6166, align 8
  %.6.i11.i2722 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %708, align 8, !noalias !138
  %.4061.i272310903 = bitcast { i64, i64, i8, i64 }* %.6.i11.i2722 to i64*
  %.41.i2724 = load i64, i64* %.4061.i272310903, align 8, !noalias !138
  %.42.i2725 = icmp sgt i64 %.41.i2724, 0
  br i1 %.42.i2725, label %B0.endif.endif.endif.i2743, label %B0.endif.endif.endif.if.if, !prof !45

B24.i2736:                                        ; preds = %B24.i2736.preheader, %B24.i2736
  %return_val.2.025.i2726 = phi i64 [ %return_val.3.1.i2734, %B24.i2736 ], [ %return_val.2.025.i2726.ph, %B24.i2736.preheader ]
  %.14.024.i2727 = phi i64 [ %.129.i2732, %B24.i2736 ], [ %.14.024.i2727.ph, %B24.i2736.preheader ]
  %sunkaddr10904 = mul i64 %.14.024.i2727, 8
  %709 = bitcast { i64, i64, i8, i64 }* %.6.i11.i2722 to i8*
  %sunkaddr10905 = getelementptr i8, i8* %709, i64 %sunkaddr10904
  %sunkaddr10906 = getelementptr i8, i8* %sunkaddr10905, i64 24
  %710 = bitcast i8* %sunkaddr10906 to i64*
  %.126.i2731 = load i64, i64* %710, align 8, !noalias !138
  %.129.i2732 = add nuw nsw i64 %.14.024.i2727, 1
  %.6.i7.not.i2733 = icmp slt i64 %.126.i2731, %return_val.2.025.i2726
  %return_val.3.1.i2734 = select i1 %.6.i7.not.i2733, i64 %.126.i2731, i64 %return_val.2.025.i2726
  %exitcond.not.i2735 = icmp eq i64 %.41.i2724, %.129.i2732
  br i1 %exitcond.not.i2735, label %B960.endif.endif.endif.endif, label %B24.i2736, !llvm.loop !46

B0.endif.endif.endif.i2743:                       ; preds = %B960.endif.endif.endif
  %.50.i2740 = getelementptr { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11.i2722, i64 0, i32 3
  %.52.i2741 = load i64, i64* %.50.i2740, align 8, !noalias !138
  %.11623.not.i2742 = icmp eq i64 %.41.i2724, 1
  br i1 %.11623.not.i2742, label %B960.endif.endif.endif.endif, label %B24.preheader.i2745

B24.preheader.i2745:                              ; preds = %B0.endif.endif.endif.i2743
  %711 = add nsw i64 %.41.i2724, -1
  %min.iters.check.i2744 = icmp ult i64 %711, 16
  br i1 %min.iters.check.i2744, label %B24.i2736.preheader, label %vector.ph.i2753

B24.i2736.preheader:                              ; preds = %middle.block.i2790, %B24.preheader.i2745
  %return_val.2.025.i2726.ph = phi i64 [ %729, %middle.block.i2790 ], [ %.52.i2741, %B24.preheader.i2745 ]
  %.14.024.i2727.ph = phi i64 [ %ind.end.i2750, %middle.block.i2790 ], [ 1, %B24.preheader.i2745 ]
  br label %B24.i2736

vector.ph.i2753:                                  ; preds = %B24.preheader.i2745
  %n.vec.i2749 = and i64 %711, -16
  %minmax.ident.splatinsert.i2751 = insertelement <4 x i64> undef, i64 %.52.i2741, i32 0
  %minmax.ident.splat.i2752 = shufflevector <4 x i64> %minmax.ident.splatinsert.i2751, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %vector.body.i2776

vector.body.i2776:                                ; preds = %vector.body.i2776, %vector.ph.i2753
  %index.i2754 = phi i64 [ 0, %vector.ph.i2753 ], [ %index.next.i2775, %vector.body.i2776 ]
  %vec.phi.i2755 = phi <4 x i64> [ %minmax.ident.splat.i2752, %vector.ph.i2753 ], [ %724, %vector.body.i2776 ]
  %vec.phi26.i2756 = phi <4 x i64> [ %minmax.ident.splat.i2752, %vector.ph.i2753 ], [ %725, %vector.body.i2776 ]
  %vec.phi27.i2757 = phi <4 x i64> [ %minmax.ident.splat.i2752, %vector.ph.i2753 ], [ %726, %vector.body.i2776 ]
  %vec.phi28.i2758 = phi <4 x i64> [ %minmax.ident.splat.i2752, %vector.ph.i2753 ], [ %727, %vector.body.i2776 ]
  %sunkaddr10907 = mul i64 %index.i2754, 8
  %712 = bitcast { i64, i64, i8, i64 }* %.6.i11.i2722 to i8*
  %sunkaddr10908 = getelementptr i8, i8* %712, i64 %sunkaddr10907
  %sunkaddr10909 = getelementptr i8, i8* %sunkaddr10908, i64 32
  %713 = bitcast i8* %sunkaddr10909 to <4 x i64>*
  %wide.load.i2762 = load <4 x i64>, <4 x i64>* %713, align 8, !noalias !138
  %sunkaddr10910 = mul i64 %index.i2754, 8
  %714 = bitcast { i64, i64, i8, i64 }* %.6.i11.i2722 to i8*
  %sunkaddr10911 = getelementptr i8, i8* %714, i64 %sunkaddr10910
  %sunkaddr10912 = getelementptr i8, i8* %sunkaddr10911, i64 64
  %715 = bitcast i8* %sunkaddr10912 to <4 x i64>*
  %wide.load29.i2766 = load <4 x i64>, <4 x i64>* %715, align 8, !noalias !138
  %sunkaddr10913 = mul i64 %index.i2754, 8
  %716 = bitcast { i64, i64, i8, i64 }* %.6.i11.i2722 to i8*
  %sunkaddr10914 = getelementptr i8, i8* %716, i64 %sunkaddr10913
  %sunkaddr10915 = getelementptr i8, i8* %sunkaddr10914, i64 96
  %717 = bitcast i8* %sunkaddr10915 to <4 x i64>*
  %wide.load30.i2770 = load <4 x i64>, <4 x i64>* %717, align 8, !noalias !138
  %sunkaddr10916 = mul i64 %index.i2754, 8
  %718 = bitcast { i64, i64, i8, i64 }* %.6.i11.i2722 to i8*
  %sunkaddr10917 = getelementptr i8, i8* %718, i64 %sunkaddr10916
  %sunkaddr10918 = getelementptr i8, i8* %sunkaddr10917, i64 128
  %719 = bitcast i8* %sunkaddr10918 to <4 x i64>*
  %wide.load31.i2774 = load <4 x i64>, <4 x i64>* %719, align 8, !noalias !138
  %720 = icmp slt <4 x i64> %wide.load.i2762, %vec.phi.i2755
  %721 = icmp slt <4 x i64> %wide.load29.i2766, %vec.phi26.i2756
  %722 = icmp slt <4 x i64> %wide.load30.i2770, %vec.phi27.i2757
  %723 = icmp slt <4 x i64> %wide.load31.i2774, %vec.phi28.i2758
  %724 = select <4 x i1> %720, <4 x i64> %wide.load.i2762, <4 x i64> %vec.phi.i2755
  %725 = select <4 x i1> %721, <4 x i64> %wide.load29.i2766, <4 x i64> %vec.phi26.i2756
  %726 = select <4 x i1> %722, <4 x i64> %wide.load30.i2770, <4 x i64> %vec.phi27.i2757
  %727 = select <4 x i1> %723, <4 x i64> %wide.load31.i2774, <4 x i64> %vec.phi28.i2758
  %index.next.i2775 = add i64 %index.i2754, 16
  %728 = icmp eq i64 %n.vec.i2749, %index.next.i2775
  br i1 %728, label %middle.block.i2790, label %vector.body.i2776, !llvm.loop !47

middle.block.i2790:                               ; preds = %vector.body.i2776
  %ind.end.i2750 = or i64 %n.vec.i2749, 1
  %rdx.minmax.cmp.i2777 = icmp slt <4 x i64> %724, %725
  %rdx.minmax.select.i2778 = select <4 x i1> %rdx.minmax.cmp.i2777, <4 x i64> %724, <4 x i64> %725
  %rdx.minmax.cmp32.i2779 = icmp slt <4 x i64> %rdx.minmax.select.i2778, %726
  %rdx.minmax.select33.i2780 = select <4 x i1> %rdx.minmax.cmp32.i2779, <4 x i64> %rdx.minmax.select.i2778, <4 x i64> %726
  %rdx.minmax.cmp34.i2781 = icmp slt <4 x i64> %rdx.minmax.select33.i2780, %727
  %rdx.minmax.select35.i2782 = select <4 x i1> %rdx.minmax.cmp34.i2781, <4 x i64> %rdx.minmax.select33.i2780, <4 x i64> %727
  %rdx.shuf.i2783 = shufflevector <4 x i64> %rdx.minmax.select35.i2782, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp56.i2784 = icmp slt <4 x i64> %rdx.minmax.select35.i2782, %rdx.shuf.i2783
  %rdx.minmax.select57.i2785 = select <4 x i1> %rdx.minmax.cmp56.i2784, <4 x i64> %rdx.minmax.select35.i2782, <4 x i64> %rdx.shuf.i2783
  %rdx.shuf58.i2786 = shufflevector <4 x i64> %rdx.minmax.select57.i2785, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp59.i2787 = icmp slt <4 x i64> %rdx.minmax.select57.i2785, %rdx.shuf58.i2786
  %rdx.minmax.select60.i2788 = select <4 x i1> %rdx.minmax.cmp59.i2787, <4 x i64> %rdx.minmax.select57.i2785, <4 x i64> %rdx.shuf58.i2786
  %729 = extractelement <4 x i64> %rdx.minmax.select60.i2788, i32 0
  %cmp.n.i2789 = icmp eq i64 %711, %n.vec.i2749
  br i1 %cmp.n.i2789, label %B960.endif.endif.endif.endif, label %B24.i2736.preheader

B960.endif.endif.endif.endif:                     ; preds = %B24.i2736, %middle.block.i2790, %B0.endif.endif.endif.i2743
  %.6169.0.ph = phi i64 [ %729, %middle.block.i2790 ], [ %.52.i2741, %B0.endif.endif.endif.i2743 ], [ %return_val.3.1.i2734, %B24.i2736 ]
  tail call void @NRT_decref(i8* nonnull %.6045)
  %.6229 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 40, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.6230 = icmp eq i8* %.6229, null
  br i1 %.6230, label %B985.endif.endif.if, label %B985.endif.endif.endif, !prof !3

B985.endif.endif.if:                              ; preds = %B960.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B985.endif.endif.endif:                           ; preds = %B960.endif.endif.endif.endif
  %.5.i2717 = getelementptr i8, i8* %.6229, i64 24
  %730 = bitcast i8* %.5.i2717 to { i64, i64, i8, i64 }**
  %.6.i27185431 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %730, align 8
  %.6242 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i27185431, i64 0, i32 1
  store i64 2, i64* %.6242, align 8
  %.6.i27165432 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %730, align 8
  %.624810919 = bitcast { i64, i64, i8, i64 }* %.6.i27165432 to i64*
  store i64 0, i64* %.624810919, align 8
  %.6.i27145433 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %730, align 8
  %.6254 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i27145433, i64 0, i32 2
  store i8 0, i8* %.6254, align 1
  %.6.i27105434 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %730, align 8
  %.6267 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i27105434, i64 0, i32 3
  %.6278 = bitcast i64* %.6267 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %.6278, i8 0, i64 16, i1 false)
  %.6.i27065436 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %730, align 8
  %.629410920 = bitcast { i64, i64, i8, i64 }* %.6.i27065436 to i64*
  store i64 2, i64* %.629410920, align 8
  %.6.i27025437 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %730, align 8
  %.6307 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i27025437, i64 0, i32 3
  store i64 1, i64* %.6307, align 8
  %.6.i26985438 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %730, align 8
  %.6321 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i26985438, i64 0, i32 3
  %.6322 = getelementptr i64, i64* %.6321, i64 1
  store i64 30979330271, i64* %.6322, align 8
  %.6.i159654396871 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %730, align 8
  %.6373687210921 = bitcast { i64, i64, i8, i64 }* %.6.i159654396871 to i64*
  %.63746873 = load i64, i64* %.6373687210921, align 8
  %.63756874 = icmp sgt i64 %.63746873, 0
  br i1 %.63756874, label %B1000.lr.ph, label %B1012

B1000.lr.ph:                                      ; preds = %B985.endif.endif.endif
  %min.iters.check7935 = icmp ult i64 %.63746873, 16
  br i1 %min.iters.check7935, label %B1000.preheader, label %vector.ph7936

B1000.preheader:                                  ; preds = %middle.block7932, %B1000.lr.ph
  %temp.2.341.2.06876.ph = phi i64 [ 1, %B1000.lr.ph ], [ %744, %middle.block7932 ]
  %.6339.06875.ph = phi i64 [ 0, %B1000.lr.ph ], [ %n.vec7938, %middle.block7932 ]
  br label %B1000

vector.ph7936:                                    ; preds = %B1000.lr.ph
  %n.vec7938 = and i64 %.63746873, -16
  br label %vector.body7934

vector.body7934:                                  ; preds = %vector.body7934, %vector.ph7936
  %index7939 = phi i64 [ 0, %vector.ph7936 ], [ %index.next7940, %vector.body7934 ]
  %vec.phi7943 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7936 ], [ %739, %vector.body7934 ]
  %vec.phi7944 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7936 ], [ %740, %vector.body7934 ]
  %vec.phi7945 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7936 ], [ %741, %vector.body7934 ]
  %vec.phi7946 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7936 ], [ %742, %vector.body7934 ]
  %sunkaddr10922 = mul i64 %index7939, 8
  %731 = bitcast { i64, i64, i8, i64 }* %.6.i159654396871 to i8*
  %sunkaddr10923 = getelementptr i8, i8* %731, i64 %sunkaddr10922
  %sunkaddr10924 = getelementptr i8, i8* %sunkaddr10923, i64 24
  %732 = bitcast i8* %sunkaddr10924 to <4 x i64>*
  %wide.load7947 = load <4 x i64>, <4 x i64>* %732, align 8
  %sunkaddr10925 = mul i64 %index7939, 8
  %733 = bitcast { i64, i64, i8, i64 }* %.6.i159654396871 to i8*
  %sunkaddr10926 = getelementptr i8, i8* %733, i64 %sunkaddr10925
  %sunkaddr10927 = getelementptr i8, i8* %sunkaddr10926, i64 56
  %734 = bitcast i8* %sunkaddr10927 to <4 x i64>*
  %wide.load7948 = load <4 x i64>, <4 x i64>* %734, align 8
  %sunkaddr10928 = mul i64 %index7939, 8
  %735 = bitcast { i64, i64, i8, i64 }* %.6.i159654396871 to i8*
  %sunkaddr10929 = getelementptr i8, i8* %735, i64 %sunkaddr10928
  %sunkaddr10930 = getelementptr i8, i8* %sunkaddr10929, i64 88
  %736 = bitcast i8* %sunkaddr10930 to <4 x i64>*
  %wide.load7949 = load <4 x i64>, <4 x i64>* %736, align 8
  %sunkaddr10931 = mul i64 %index7939, 8
  %737 = bitcast { i64, i64, i8, i64 }* %.6.i159654396871 to i8*
  %sunkaddr10932 = getelementptr i8, i8* %737, i64 %sunkaddr10931
  %sunkaddr10933 = getelementptr i8, i8* %sunkaddr10932, i64 120
  %738 = bitcast i8* %sunkaddr10933 to <4 x i64>*
  %wide.load7950 = load <4 x i64>, <4 x i64>* %738, align 8
  %739 = mul <4 x i64> %wide.load7947, %vec.phi7943
  %740 = mul <4 x i64> %wide.load7948, %vec.phi7944
  %741 = mul <4 x i64> %wide.load7949, %vec.phi7945
  %742 = mul <4 x i64> %wide.load7950, %vec.phi7946
  %index.next7940 = add i64 %index7939, 16
  %743 = icmp eq i64 %n.vec7938, %index.next7940
  br i1 %743, label %middle.block7932, label %vector.body7934, !llvm.loop !142

middle.block7932:                                 ; preds = %vector.body7934
  %bin.rdx7951 = mul <4 x i64> %740, %739
  %bin.rdx7952 = mul <4 x i64> %741, %bin.rdx7951
  %bin.rdx7953 = mul <4 x i64> %742, %bin.rdx7952
  %rdx.shuf10139 = shufflevector <4 x i64> %bin.rdx7953, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10140 = mul <4 x i64> %bin.rdx7953, %rdx.shuf10139
  %rdx.shuf10141 = shufflevector <4 x i64> %bin.rdx10140, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10142 = mul <4 x i64> %bin.rdx10140, %rdx.shuf10141
  %744 = extractelement <4 x i64> %bin.rdx10142, i32 0
  %cmp.n7942 = icmp eq i64 %.63746873, %n.vec7938
  br i1 %cmp.n7942, label %B1012, label %B1000.preheader

B1012.endif.endif.if:                             ; preds = %B1012
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1012.endif.endif.endif:                          ; preds = %B1012
  %.5.i2693 = getelementptr i8, i8* %.6445, i64 24
  %745 = bitcast i8* %.5.i2693 to { i64, i64, i8, i64 }**
  %.6.i26945440 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %745, align 8
  %.6458 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i26945440, i64 0, i32 1
  store i64 3, i64* %.6458, align 8
  %.6.i26925441 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %745, align 8
  %.646410934 = bitcast { i64, i64, i8, i64 }* %.6.i26925441 to i64*
  store i64 0, i64* %.646410934, align 8
  %.6.i26905442 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %745, align 8
  %.6470 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i26905442, i64 0, i32 2
  store i8 0, i8* %.6470, align 1
  %.6.i26865443 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %745, align 8
  %.6483 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i26865443, i64 0, i32 3
  %.6494 = bitcast i64* %.6483 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(24) %.6494, i8 0, i64 24, i1 false)
  %.6.i26825445 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %745, align 8
  %.651010935 = bitcast { i64, i64, i8, i64 }* %.6.i26825445 to i64*
  store i64 3, i64* %.651010935, align 8
  %.6.i26785446 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %745, align 8
  %.6523 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i26785446, i64 0, i32 3
  store i64 5, i64* %.6523, align 8
  %.6.i26745447 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %745, align 8
  %.6537 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i26745447, i64 0, i32 3
  %.6538 = getelementptr i64, i64* %.6537, i64 1
  store i64 2, i64* %.6538, align 8
  %.6.i26705448 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %745, align 8
  %.6551 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i26705448, i64 0, i32 3
  %.6552 = getelementptr i64, i64* %.6551, i64 2
  store i64 6, i64* %.6552, align 8
  %.6.i3.i2614 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %745, align 8, !noalias !143
  %.5342.i261510936 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2614 to i64*
  %.548.i2616 = load i64, i64* %.5342.i261510936, align 8, !noalias !143
  %.559.i2617 = icmp sgt i64 %.548.i2616, 0
  br i1 %.559.i2617, label %B14.endif.lr.ph.i2619, label %B1012.endif.endif.endif.endif

B14.endif.lr.ph.i2619:                            ; preds = %B1012.endif.endif.endif
  %min.iters.check.i2618 = icmp ult i64 %.548.i2616, 16
  br i1 %min.iters.check.i2618, label %B14.endif.preheader.i2622, label %vector.ph.i2624

B14.endif.preheader.i2622:                        ; preds = %middle.block.i2656, %B14.endif.lr.ph.i2619
  %acc.2.011.ph.i2620 = phi i64 [ 0, %B14.endif.lr.ph.i2619 ], [ %759, %middle.block.i2656 ]
  %.17.010.ph.i2621 = phi i64 [ 0, %B14.endif.lr.ph.i2619 ], [ %n.vec.i2623, %middle.block.i2656 ]
  br label %B14.endif.i2667

vector.ph.i2624:                                  ; preds = %B14.endif.lr.ph.i2619
  %n.vec.i2623 = and i64 %.548.i2616, -16
  br label %vector.body.i2647

vector.body.i2647:                                ; preds = %vector.body.i2647, %vector.ph.i2624
  %index.i2625 = phi i64 [ 0, %vector.ph.i2624 ], [ %index.next.i2646, %vector.body.i2647 ]
  %vec.phi.i2626 = phi <4 x i64> [ zeroinitializer, %vector.ph.i2624 ], [ %754, %vector.body.i2647 ]
  %vec.phi12.i2627 = phi <4 x i64> [ zeroinitializer, %vector.ph.i2624 ], [ %755, %vector.body.i2647 ]
  %vec.phi13.i2628 = phi <4 x i64> [ zeroinitializer, %vector.ph.i2624 ], [ %756, %vector.body.i2647 ]
  %vec.phi14.i2629 = phi <4 x i64> [ zeroinitializer, %vector.ph.i2624 ], [ %757, %vector.body.i2647 ]
  %sunkaddr10937 = mul i64 %index.i2625, 8
  %746 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2614 to i8*
  %sunkaddr10938 = getelementptr i8, i8* %746, i64 %sunkaddr10937
  %sunkaddr10939 = getelementptr i8, i8* %sunkaddr10938, i64 24
  %747 = bitcast i8* %sunkaddr10939 to <4 x i64>*
  %wide.load.i2633 = load <4 x i64>, <4 x i64>* %747, align 8, !noalias !143
  %sunkaddr10940 = mul i64 %index.i2625, 8
  %748 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2614 to i8*
  %sunkaddr10941 = getelementptr i8, i8* %748, i64 %sunkaddr10940
  %sunkaddr10942 = getelementptr i8, i8* %sunkaddr10941, i64 56
  %749 = bitcast i8* %sunkaddr10942 to <4 x i64>*
  %wide.load15.i2637 = load <4 x i64>, <4 x i64>* %749, align 8, !noalias !143
  %sunkaddr10943 = mul i64 %index.i2625, 8
  %750 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2614 to i8*
  %sunkaddr10944 = getelementptr i8, i8* %750, i64 %sunkaddr10943
  %sunkaddr10945 = getelementptr i8, i8* %sunkaddr10944, i64 88
  %751 = bitcast i8* %sunkaddr10945 to <4 x i64>*
  %wide.load16.i2641 = load <4 x i64>, <4 x i64>* %751, align 8, !noalias !143
  %sunkaddr10946 = mul i64 %index.i2625, 8
  %752 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2614 to i8*
  %sunkaddr10947 = getelementptr i8, i8* %752, i64 %sunkaddr10946
  %sunkaddr10948 = getelementptr i8, i8* %sunkaddr10947, i64 120
  %753 = bitcast i8* %sunkaddr10948 to <4 x i64>*
  %wide.load17.i2645 = load <4 x i64>, <4 x i64>* %753, align 8, !noalias !143
  %754 = add <4 x i64> %wide.load.i2633, %vec.phi.i2626
  %755 = add <4 x i64> %wide.load15.i2637, %vec.phi12.i2627
  %756 = add <4 x i64> %wide.load16.i2641, %vec.phi13.i2628
  %757 = add <4 x i64> %wide.load17.i2645, %vec.phi14.i2629
  %index.next.i2646 = add i64 %index.i2625, 16
  %758 = icmp eq i64 %n.vec.i2623, %index.next.i2646
  br i1 %758, label %middle.block.i2656, label %vector.body.i2647, !llvm.loop !51

middle.block.i2656:                               ; preds = %vector.body.i2647
  %bin.rdx.i2648 = add <4 x i64> %755, %754
  %bin.rdx18.i2649 = add <4 x i64> %bin.rdx.i2648, %756
  %bin.rdx19.i2650 = add <4 x i64> %bin.rdx18.i2649, %757
  %rdx.shuf.i2651 = shufflevector <4 x i64> %bin.rdx19.i2650, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx39.i2652 = add <4 x i64> %rdx.shuf.i2651, %bin.rdx19.i2650
  %rdx.shuf40.i2653 = shufflevector <4 x i64> %bin.rdx39.i2652, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx41.i2654 = add <4 x i64> %rdx.shuf40.i2653, %bin.rdx39.i2652
  %759 = extractelement <4 x i64> %bin.rdx41.i2654, i32 0
  %cmp.n.i2655 = icmp eq i64 %.548.i2616, %n.vec.i2623
  br i1 %cmp.n.i2655, label %B1012.endif.endif.endif.endif, label %B14.endif.preheader.i2622

B14.endif.i2667:                                  ; preds = %B14.endif.i2667, %B14.endif.preheader.i2622
  %acc.2.011.i2658 = phi i64 [ %.94.i2665, %B14.endif.i2667 ], [ %acc.2.011.ph.i2620, %B14.endif.preheader.i2622 ]
  %.17.010.i2659 = phi i64 [ %.68.i2664, %B14.endif.i2667 ], [ %.17.010.ph.i2621, %B14.endif.preheader.i2622 ]
  %sunkaddr10949 = mul i64 %.17.010.i2659, 8
  %760 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2614 to i8*
  %sunkaddr10950 = getelementptr i8, i8* %760, i64 %sunkaddr10949
  %sunkaddr10951 = getelementptr i8, i8* %sunkaddr10950, i64 24
  %761 = bitcast i8* %sunkaddr10951 to i64*
  %.65.i2663 = load i64, i64* %761, align 8, !noalias !143
  %.68.i2664 = add nuw nsw i64 %.17.010.i2659, 1
  %.94.i2665 = add nsw i64 %.65.i2663, %acc.2.011.i2658
  %exitcond.not.i2666 = icmp eq i64 %.548.i2616, %.68.i2664
  br i1 %exitcond.not.i2666, label %B1012.endif.endif.endif.endif, label %B14.endif.i2667, !llvm.loop !52

B1012.endif.endif.endif.endif:                    ; preds = %B14.endif.i2667, %middle.block.i2656, %B1012.endif.endif.endif
  %acc.2.0.lcssa.i2657 = phi i64 [ 0, %B1012.endif.endif.endif ], [ %759, %middle.block.i2656 ], [ %.94.i2665, %B14.endif.i2667 ]
  tail call void @NRT_decref(i8* nonnull %.6445)
  %.6599 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 48, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.6600 = icmp eq i8* %.6599, null
  br i1 %.6600, label %B1012.endif.endif.endif.endif.endif.endif.if, label %B1012.endif.endif.endif.endif.endif.endif.endif, !prof !3

B1012.endif.endif.endif.endif.endif.endif.if:     ; preds = %B1012.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1012.endif.endif.endif.endif.endif.endif.endif:  ; preds = %B1012.endif.endif.endif.endif
  %.5.i2609 = getelementptr i8, i8* %.6599, i64 24
  %762 = bitcast i8* %.5.i2609 to { i64, i64, i8, i64 }**
  %.6.i26105449 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %762, align 8
  %.6612 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i26105449, i64 0, i32 1
  store i64 3, i64* %.6612, align 8
  %.6.i26085450 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %762, align 8
  %.661810952 = bitcast { i64, i64, i8, i64 }* %.6.i26085450 to i64*
  store i64 0, i64* %.661810952, align 8
  %.6.i26065451 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %762, align 8
  %.6624 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i26065451, i64 0, i32 2
  store i8 0, i8* %.6624, align 1
  %.6.i26025452 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %762, align 8
  %.6637 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i26025452, i64 0, i32 3
  %.6648 = bitcast i64* %.6637 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(24) %.6648, i8 0, i64 24, i1 false)
  %.6.i25985454 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %762, align 8
  %.666410953 = bitcast { i64, i64, i8, i64 }* %.6.i25985454 to i64*
  store i64 3, i64* %.666410953, align 8
  %.6.i25945455 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %762, align 8
  %.6677 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i25945455, i64 0, i32 3
  store i64 9, i64* %.6677, align 8
  %.6.i25905456 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %762, align 8
  %.6691 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i25905456, i64 0, i32 3
  %.6692 = getelementptr i64, i64* %.6691, i64 1
  store i64 12, i64* %.6692, align 8
  %.6.i25865457 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %762, align 8
  %.6705 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i25865457, i64 0, i32 3
  %.6706 = getelementptr i64, i64* %.6705, i64 2
  store i64 2, i64* %.6706, align 8
  %.6.i3.i2530 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %762, align 8, !noalias !146
  %.5342.i253110954 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2530 to i64*
  %.548.i2532 = load i64, i64* %.5342.i253110954, align 8, !noalias !146
  %.559.i2533 = icmp sgt i64 %.548.i2532, 0
  br i1 %.559.i2533, label %B14.endif.lr.ph.i2535, label %B1012.endif.endif.endif.endif.endif.endif.endif.endif

B14.endif.lr.ph.i2535:                            ; preds = %B1012.endif.endif.endif.endif.endif.endif.endif
  %min.iters.check.i2534 = icmp ult i64 %.548.i2532, 16
  br i1 %min.iters.check.i2534, label %B14.endif.preheader.i2538, label %vector.ph.i2540

B14.endif.preheader.i2538:                        ; preds = %middle.block.i2572, %B14.endif.lr.ph.i2535
  %acc.2.011.ph.i2536 = phi i64 [ 0, %B14.endif.lr.ph.i2535 ], [ %776, %middle.block.i2572 ]
  %.17.010.ph.i2537 = phi i64 [ 0, %B14.endif.lr.ph.i2535 ], [ %n.vec.i2539, %middle.block.i2572 ]
  br label %B14.endif.i2583

vector.ph.i2540:                                  ; preds = %B14.endif.lr.ph.i2535
  %n.vec.i2539 = and i64 %.548.i2532, -16
  br label %vector.body.i2563

vector.body.i2563:                                ; preds = %vector.body.i2563, %vector.ph.i2540
  %index.i2541 = phi i64 [ 0, %vector.ph.i2540 ], [ %index.next.i2562, %vector.body.i2563 ]
  %vec.phi.i2542 = phi <4 x i64> [ zeroinitializer, %vector.ph.i2540 ], [ %771, %vector.body.i2563 ]
  %vec.phi12.i2543 = phi <4 x i64> [ zeroinitializer, %vector.ph.i2540 ], [ %772, %vector.body.i2563 ]
  %vec.phi13.i2544 = phi <4 x i64> [ zeroinitializer, %vector.ph.i2540 ], [ %773, %vector.body.i2563 ]
  %vec.phi14.i2545 = phi <4 x i64> [ zeroinitializer, %vector.ph.i2540 ], [ %774, %vector.body.i2563 ]
  %sunkaddr10955 = mul i64 %index.i2541, 8
  %763 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2530 to i8*
  %sunkaddr10956 = getelementptr i8, i8* %763, i64 %sunkaddr10955
  %sunkaddr10957 = getelementptr i8, i8* %sunkaddr10956, i64 24
  %764 = bitcast i8* %sunkaddr10957 to <4 x i64>*
  %wide.load.i2549 = load <4 x i64>, <4 x i64>* %764, align 8, !noalias !146
  %sunkaddr10958 = mul i64 %index.i2541, 8
  %765 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2530 to i8*
  %sunkaddr10959 = getelementptr i8, i8* %765, i64 %sunkaddr10958
  %sunkaddr10960 = getelementptr i8, i8* %sunkaddr10959, i64 56
  %766 = bitcast i8* %sunkaddr10960 to <4 x i64>*
  %wide.load15.i2553 = load <4 x i64>, <4 x i64>* %766, align 8, !noalias !146
  %sunkaddr10961 = mul i64 %index.i2541, 8
  %767 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2530 to i8*
  %sunkaddr10962 = getelementptr i8, i8* %767, i64 %sunkaddr10961
  %sunkaddr10963 = getelementptr i8, i8* %sunkaddr10962, i64 88
  %768 = bitcast i8* %sunkaddr10963 to <4 x i64>*
  %wide.load16.i2557 = load <4 x i64>, <4 x i64>* %768, align 8, !noalias !146
  %sunkaddr10964 = mul i64 %index.i2541, 8
  %769 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2530 to i8*
  %sunkaddr10965 = getelementptr i8, i8* %769, i64 %sunkaddr10964
  %sunkaddr10966 = getelementptr i8, i8* %sunkaddr10965, i64 120
  %770 = bitcast i8* %sunkaddr10966 to <4 x i64>*
  %wide.load17.i2561 = load <4 x i64>, <4 x i64>* %770, align 8, !noalias !146
  %771 = add <4 x i64> %wide.load.i2549, %vec.phi.i2542
  %772 = add <4 x i64> %wide.load15.i2553, %vec.phi12.i2543
  %773 = add <4 x i64> %wide.load16.i2557, %vec.phi13.i2544
  %774 = add <4 x i64> %wide.load17.i2561, %vec.phi14.i2545
  %index.next.i2562 = add i64 %index.i2541, 16
  %775 = icmp eq i64 %n.vec.i2539, %index.next.i2562
  br i1 %775, label %middle.block.i2572, label %vector.body.i2563, !llvm.loop !51

middle.block.i2572:                               ; preds = %vector.body.i2563
  %bin.rdx.i2564 = add <4 x i64> %772, %771
  %bin.rdx18.i2565 = add <4 x i64> %bin.rdx.i2564, %773
  %bin.rdx19.i2566 = add <4 x i64> %bin.rdx18.i2565, %774
  %rdx.shuf.i2567 = shufflevector <4 x i64> %bin.rdx19.i2566, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx39.i2568 = add <4 x i64> %rdx.shuf.i2567, %bin.rdx19.i2566
  %rdx.shuf40.i2569 = shufflevector <4 x i64> %bin.rdx39.i2568, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx41.i2570 = add <4 x i64> %rdx.shuf40.i2569, %bin.rdx39.i2568
  %776 = extractelement <4 x i64> %bin.rdx41.i2570, i32 0
  %cmp.n.i2571 = icmp eq i64 %.548.i2532, %n.vec.i2539
  br i1 %cmp.n.i2571, label %B1012.endif.endif.endif.endif.endif.endif.endif.endif, label %B14.endif.preheader.i2538

B14.endif.i2583:                                  ; preds = %B14.endif.i2583, %B14.endif.preheader.i2538
  %acc.2.011.i2574 = phi i64 [ %.94.i2581, %B14.endif.i2583 ], [ %acc.2.011.ph.i2536, %B14.endif.preheader.i2538 ]
  %.17.010.i2575 = phi i64 [ %.68.i2580, %B14.endif.i2583 ], [ %.17.010.ph.i2537, %B14.endif.preheader.i2538 ]
  %sunkaddr10967 = mul i64 %.17.010.i2575, 8
  %777 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2530 to i8*
  %sunkaddr10968 = getelementptr i8, i8* %777, i64 %sunkaddr10967
  %sunkaddr10969 = getelementptr i8, i8* %sunkaddr10968, i64 24
  %778 = bitcast i8* %sunkaddr10969 to i64*
  %.65.i2579 = load i64, i64* %778, align 8, !noalias !146
  %.68.i2580 = add nuw nsw i64 %.17.010.i2575, 1
  %.94.i2581 = add nsw i64 %.65.i2579, %acc.2.011.i2574
  %exitcond.not.i2582 = icmp eq i64 %.548.i2532, %.68.i2580
  br i1 %exitcond.not.i2582, label %B1012.endif.endif.endif.endif.endif.endif.endif.endif, label %B14.endif.i2583, !llvm.loop !52

B1012.endif.endif.endif.endif.endif.endif.endif.endif: ; preds = %B14.endif.i2583, %middle.block.i2572, %B1012.endif.endif.endif.endif.endif.endif.endif
  %acc.2.0.lcssa.i2573 = phi i64 [ 0, %B1012.endif.endif.endif.endif.endif.endif.endif ], [ %776, %middle.block.i2572 ], [ %.94.i2581, %B14.endif.i2583 ]
  tail call void @NRT_decref(i8* nonnull %.6599)
  %.6766 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 40, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.6767 = icmp eq i8* %.6766, null
  br i1 %.6767, label %B1039.endif.endif.if, label %B1039.endif.endif.endif, !prof !3

B1039.endif.endif.if:                             ; preds = %B1012.endif.endif.endif.endif.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1039.endif.endif.endif:                          ; preds = %B1012.endif.endif.endif.endif.endif.endif.endif.endif
  %.6734 = icmp sgt i64 %acc.2.0.lcssa.i2657, %acc.2.0.lcssa.i2573
  %"$phi416.19.2.0" = zext i1 %.6734 to i64
  %.5.i2525 = getelementptr i8, i8* %.6766, i64 24
  %779 = bitcast i8* %.5.i2525 to { i64, i64, i8, i64 }**
  %.6.i25265458 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %779, align 8
  %.6779 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i25265458, i64 0, i32 1
  store i64 2, i64* %.6779, align 8
  %.6.i25245459 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %779, align 8
  %.678510970 = bitcast { i64, i64, i8, i64 }* %.6.i25245459 to i64*
  store i64 0, i64* %.678510970, align 8
  %.6.i25225460 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %779, align 8
  %.6791 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i25225460, i64 0, i32 2
  store i8 0, i8* %.6791, align 1
  %.6.i25185461 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %779, align 8
  %.6804 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i25185461, i64 0, i32 3
  %.6815 = bitcast i64* %.6804 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %.6815, i8 0, i64 16, i1 false)
  %.6.i25145463 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %779, align 8
  %.683110971 = bitcast { i64, i64, i8, i64 }* %.6.i25145463 to i64*
  store i64 2, i64* %.683110971, align 8
  %.6.i25105464 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %779, align 8
  %.6844 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i25105464, i64 0, i32 3
  store i64 %"$phi416.19.2.0", i64* %.6844, align 8
  %.6.i25065465 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %779, align 8
  %.6858 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i25065465, i64 0, i32 3
  %.6859 = getelementptr i64, i64* %.6858, i64 1
  store i64 35056, i64* %.6859, align 8
  %.6.i171254666863 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %779, align 8
  %.6910686410972 = bitcast { i64, i64, i8, i64 }* %.6.i171254666863 to i64*
  %.69116865 = load i64, i64* %.6910686410972, align 8
  %.69126866 = icmp sgt i64 %.69116865, 0
  br i1 %.69126866, label %B1054.lr.ph, label %B1066

B1054.lr.ph:                                      ; preds = %B1039.endif.endif.endif
  %min.iters.check7958 = icmp ult i64 %.69116865, 16
  br i1 %min.iters.check7958, label %B1054.preheader, label %vector.ph7959

B1054.preheader:                                  ; preds = %middle.block7955, %B1054.lr.ph
  %temp.2.305.2.06868.ph = phi i64 [ 1, %B1054.lr.ph ], [ %793, %middle.block7955 ]
  %.6876.06867.ph = phi i64 [ 0, %B1054.lr.ph ], [ %n.vec7961, %middle.block7955 ]
  br label %B1054

vector.ph7959:                                    ; preds = %B1054.lr.ph
  %n.vec7961 = and i64 %.69116865, -16
  br label %vector.body7957

vector.body7957:                                  ; preds = %vector.body7957, %vector.ph7959
  %index7962 = phi i64 [ 0, %vector.ph7959 ], [ %index.next7963, %vector.body7957 ]
  %vec.phi7966 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7959 ], [ %788, %vector.body7957 ]
  %vec.phi7967 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7959 ], [ %789, %vector.body7957 ]
  %vec.phi7968 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7959 ], [ %790, %vector.body7957 ]
  %vec.phi7969 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7959 ], [ %791, %vector.body7957 ]
  %sunkaddr10973 = mul i64 %index7962, 8
  %780 = bitcast { i64, i64, i8, i64 }* %.6.i171254666863 to i8*
  %sunkaddr10974 = getelementptr i8, i8* %780, i64 %sunkaddr10973
  %sunkaddr10975 = getelementptr i8, i8* %sunkaddr10974, i64 24
  %781 = bitcast i8* %sunkaddr10975 to <4 x i64>*
  %wide.load7970 = load <4 x i64>, <4 x i64>* %781, align 8
  %sunkaddr10976 = mul i64 %index7962, 8
  %782 = bitcast { i64, i64, i8, i64 }* %.6.i171254666863 to i8*
  %sunkaddr10977 = getelementptr i8, i8* %782, i64 %sunkaddr10976
  %sunkaddr10978 = getelementptr i8, i8* %sunkaddr10977, i64 56
  %783 = bitcast i8* %sunkaddr10978 to <4 x i64>*
  %wide.load7971 = load <4 x i64>, <4 x i64>* %783, align 8
  %sunkaddr10979 = mul i64 %index7962, 8
  %784 = bitcast { i64, i64, i8, i64 }* %.6.i171254666863 to i8*
  %sunkaddr10980 = getelementptr i8, i8* %784, i64 %sunkaddr10979
  %sunkaddr10981 = getelementptr i8, i8* %sunkaddr10980, i64 88
  %785 = bitcast i8* %sunkaddr10981 to <4 x i64>*
  %wide.load7972 = load <4 x i64>, <4 x i64>* %785, align 8
  %sunkaddr10982 = mul i64 %index7962, 8
  %786 = bitcast { i64, i64, i8, i64 }* %.6.i171254666863 to i8*
  %sunkaddr10983 = getelementptr i8, i8* %786, i64 %sunkaddr10982
  %sunkaddr10984 = getelementptr i8, i8* %sunkaddr10983, i64 120
  %787 = bitcast i8* %sunkaddr10984 to <4 x i64>*
  %wide.load7973 = load <4 x i64>, <4 x i64>* %787, align 8
  %788 = mul <4 x i64> %wide.load7970, %vec.phi7966
  %789 = mul <4 x i64> %wide.load7971, %vec.phi7967
  %790 = mul <4 x i64> %wide.load7972, %vec.phi7968
  %791 = mul <4 x i64> %wide.load7973, %vec.phi7969
  %index.next7963 = add i64 %index7962, 16
  %792 = icmp eq i64 %n.vec7961, %index.next7963
  br i1 %792, label %middle.block7955, label %vector.body7957, !llvm.loop !149

middle.block7955:                                 ; preds = %vector.body7957
  %bin.rdx7974 = mul <4 x i64> %789, %788
  %bin.rdx7975 = mul <4 x i64> %790, %bin.rdx7974
  %bin.rdx7976 = mul <4 x i64> %791, %bin.rdx7975
  %rdx.shuf10143 = shufflevector <4 x i64> %bin.rdx7976, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10144 = mul <4 x i64> %bin.rdx7976, %rdx.shuf10143
  %rdx.shuf10145 = shufflevector <4 x i64> %bin.rdx10144, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10146 = mul <4 x i64> %bin.rdx10144, %rdx.shuf10145
  %793 = extractelement <4 x i64> %bin.rdx10146, i32 0
  %cmp.n7965 = icmp eq i64 %.69116865, %n.vec7961
  br i1 %cmp.n7965, label %B1066, label %B1054.preheader

B1066.endif.endif.if:                             ; preds = %B1066
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1066.endif.endif.endif:                          ; preds = %B1066
  %.5.i2501 = getelementptr i8, i8* %.6985, i64 24
  %794 = bitcast i8* %.5.i2501 to { i64, i64, i8, i64 }**
  %.6.i25025467 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %794, align 8
  %.6998 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i25025467, i64 0, i32 1
  store i64 4, i64* %.6998, align 8
  %.6.i25005468 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %794, align 8
  %.700410985 = bitcast { i64, i64, i8, i64 }* %.6.i25005468 to i64*
  store i64 0, i64* %.700410985, align 8
  %.6.i24985469 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %794, align 8
  %.7010 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i24985469, i64 0, i32 2
  store i8 0, i8* %.7010, align 1
  %.6.i24945470 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %794, align 8
  %.7023 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i24945470, i64 0, i32 3
  %.7034 = bitcast i64* %.7023 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(32) %.7034, i8 0, i64 32, i1 false)
  %.6.i24905472 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %794, align 8
  %.705010986 = bitcast { i64, i64, i8, i64 }* %.6.i24905472 to i64*
  store i64 4, i64* %.705010986, align 8
  %.6.i24865473 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %794, align 8
  %.7063 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i24865473, i64 0, i32 3
  store i64 21, i64* %.7063, align 8
  %.6.i24825474 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %794, align 8
  %.7077 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i24825474, i64 0, i32 3
  %.7078 = getelementptr i64, i64* %.7077, i64 1
  store i64 8, i64* %.7078, align 8
  %.6.i24785475 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %794, align 8
  %.7091 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i24785475, i64 0, i32 3
  %.7092 = getelementptr i64, i64* %.7091, i64 2
  store i64 10464633, i64* %.7092, align 8
  %.6.i24745476 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %794, align 8
  %.7105 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i24745476, i64 0, i32 3
  %.7106 = getelementptr i64, i64* %.7105, i64 3
  store i64 21766, i64* %.7106, align 8
  %.6.i11.i2402 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %794, align 8, !noalias !150
  %.4061.i240310987 = bitcast { i64, i64, i8, i64 }* %.6.i11.i2402 to i64*
  %.41.i2404 = load i64, i64* %.4061.i240310987, align 8, !noalias !150
  %.42.i2405 = icmp sgt i64 %.41.i2404, 0
  br i1 %.42.i2405, label %B0.endif.endif.endif.i2423, label %B0.endif.endif.endif.if.if, !prof !45

B24.i2416:                                        ; preds = %B24.i2416.preheader, %B24.i2416
  %return_val.2.025.i2406 = phi i64 [ %return_val.3.1.i2414, %B24.i2416 ], [ %return_val.2.025.i2406.ph, %B24.i2416.preheader ]
  %.14.024.i2407 = phi i64 [ %.129.i2412, %B24.i2416 ], [ %.14.024.i2407.ph, %B24.i2416.preheader ]
  %sunkaddr10988 = mul i64 %.14.024.i2407, 8
  %795 = bitcast { i64, i64, i8, i64 }* %.6.i11.i2402 to i8*
  %sunkaddr10989 = getelementptr i8, i8* %795, i64 %sunkaddr10988
  %sunkaddr10990 = getelementptr i8, i8* %sunkaddr10989, i64 24
  %796 = bitcast i8* %sunkaddr10990 to i64*
  %.126.i2411 = load i64, i64* %796, align 8, !noalias !150
  %.129.i2412 = add nuw nsw i64 %.14.024.i2407, 1
  %.6.i7.not.i2413 = icmp sgt i64 %.126.i2411, %return_val.2.025.i2406
  %return_val.3.1.i2414 = select i1 %.6.i7.not.i2413, i64 %.126.i2411, i64 %return_val.2.025.i2406
  %exitcond.not.i2415 = icmp eq i64 %.41.i2404, %.129.i2412
  br i1 %exitcond.not.i2415, label %B1066.endif.endif.endif.endif, label %B24.i2416, !llvm.loop !58

B0.endif.endif.endif.i2423:                       ; preds = %B1066.endif.endif.endif
  %.50.i2420 = getelementptr { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11.i2402, i64 0, i32 3
  %.52.i2421 = load i64, i64* %.50.i2420, align 8, !noalias !150
  %.11623.not.i2422 = icmp eq i64 %.41.i2404, 1
  br i1 %.11623.not.i2422, label %B1066.endif.endif.endif.endif, label %B24.preheader.i2425

B24.preheader.i2425:                              ; preds = %B0.endif.endif.endif.i2423
  %797 = add nsw i64 %.41.i2404, -1
  %min.iters.check.i2424 = icmp ult i64 %797, 16
  br i1 %min.iters.check.i2424, label %B24.i2416.preheader, label %vector.ph.i2433

B24.i2416.preheader:                              ; preds = %middle.block.i2470, %B24.preheader.i2425
  %return_val.2.025.i2406.ph = phi i64 [ %815, %middle.block.i2470 ], [ %.52.i2421, %B24.preheader.i2425 ]
  %.14.024.i2407.ph = phi i64 [ %ind.end.i2430, %middle.block.i2470 ], [ 1, %B24.preheader.i2425 ]
  br label %B24.i2416

vector.ph.i2433:                                  ; preds = %B24.preheader.i2425
  %n.vec.i2429 = and i64 %797, -16
  %minmax.ident.splatinsert.i2431 = insertelement <4 x i64> undef, i64 %.52.i2421, i32 0
  %minmax.ident.splat.i2432 = shufflevector <4 x i64> %minmax.ident.splatinsert.i2431, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %vector.body.i2456

vector.body.i2456:                                ; preds = %vector.body.i2456, %vector.ph.i2433
  %index.i2434 = phi i64 [ 0, %vector.ph.i2433 ], [ %index.next.i2455, %vector.body.i2456 ]
  %vec.phi.i2435 = phi <4 x i64> [ %minmax.ident.splat.i2432, %vector.ph.i2433 ], [ %810, %vector.body.i2456 ]
  %vec.phi26.i2436 = phi <4 x i64> [ %minmax.ident.splat.i2432, %vector.ph.i2433 ], [ %811, %vector.body.i2456 ]
  %vec.phi27.i2437 = phi <4 x i64> [ %minmax.ident.splat.i2432, %vector.ph.i2433 ], [ %812, %vector.body.i2456 ]
  %vec.phi28.i2438 = phi <4 x i64> [ %minmax.ident.splat.i2432, %vector.ph.i2433 ], [ %813, %vector.body.i2456 ]
  %sunkaddr10991 = mul i64 %index.i2434, 8
  %798 = bitcast { i64, i64, i8, i64 }* %.6.i11.i2402 to i8*
  %sunkaddr10992 = getelementptr i8, i8* %798, i64 %sunkaddr10991
  %sunkaddr10993 = getelementptr i8, i8* %sunkaddr10992, i64 32
  %799 = bitcast i8* %sunkaddr10993 to <4 x i64>*
  %wide.load.i2442 = load <4 x i64>, <4 x i64>* %799, align 8, !noalias !150
  %sunkaddr10994 = mul i64 %index.i2434, 8
  %800 = bitcast { i64, i64, i8, i64 }* %.6.i11.i2402 to i8*
  %sunkaddr10995 = getelementptr i8, i8* %800, i64 %sunkaddr10994
  %sunkaddr10996 = getelementptr i8, i8* %sunkaddr10995, i64 64
  %801 = bitcast i8* %sunkaddr10996 to <4 x i64>*
  %wide.load29.i2446 = load <4 x i64>, <4 x i64>* %801, align 8, !noalias !150
  %sunkaddr10997 = mul i64 %index.i2434, 8
  %802 = bitcast { i64, i64, i8, i64 }* %.6.i11.i2402 to i8*
  %sunkaddr10998 = getelementptr i8, i8* %802, i64 %sunkaddr10997
  %sunkaddr10999 = getelementptr i8, i8* %sunkaddr10998, i64 96
  %803 = bitcast i8* %sunkaddr10999 to <4 x i64>*
  %wide.load30.i2450 = load <4 x i64>, <4 x i64>* %803, align 8, !noalias !150
  %sunkaddr11000 = mul i64 %index.i2434, 8
  %804 = bitcast { i64, i64, i8, i64 }* %.6.i11.i2402 to i8*
  %sunkaddr11001 = getelementptr i8, i8* %804, i64 %sunkaddr11000
  %sunkaddr11002 = getelementptr i8, i8* %sunkaddr11001, i64 128
  %805 = bitcast i8* %sunkaddr11002 to <4 x i64>*
  %wide.load31.i2454 = load <4 x i64>, <4 x i64>* %805, align 8, !noalias !150
  %806 = icmp sgt <4 x i64> %wide.load.i2442, %vec.phi.i2435
  %807 = icmp sgt <4 x i64> %wide.load29.i2446, %vec.phi26.i2436
  %808 = icmp sgt <4 x i64> %wide.load30.i2450, %vec.phi27.i2437
  %809 = icmp sgt <4 x i64> %wide.load31.i2454, %vec.phi28.i2438
  %810 = select <4 x i1> %806, <4 x i64> %wide.load.i2442, <4 x i64> %vec.phi.i2435
  %811 = select <4 x i1> %807, <4 x i64> %wide.load29.i2446, <4 x i64> %vec.phi26.i2436
  %812 = select <4 x i1> %808, <4 x i64> %wide.load30.i2450, <4 x i64> %vec.phi27.i2437
  %813 = select <4 x i1> %809, <4 x i64> %wide.load31.i2454, <4 x i64> %vec.phi28.i2438
  %index.next.i2455 = add i64 %index.i2434, 16
  %814 = icmp eq i64 %n.vec.i2429, %index.next.i2455
  br i1 %814, label %middle.block.i2470, label %vector.body.i2456, !llvm.loop !59

middle.block.i2470:                               ; preds = %vector.body.i2456
  %ind.end.i2430 = or i64 %n.vec.i2429, 1
  %rdx.minmax.cmp.i2457 = icmp sgt <4 x i64> %810, %811
  %rdx.minmax.select.i2458 = select <4 x i1> %rdx.minmax.cmp.i2457, <4 x i64> %810, <4 x i64> %811
  %rdx.minmax.cmp32.i2459 = icmp sgt <4 x i64> %rdx.minmax.select.i2458, %812
  %rdx.minmax.select33.i2460 = select <4 x i1> %rdx.minmax.cmp32.i2459, <4 x i64> %rdx.minmax.select.i2458, <4 x i64> %812
  %rdx.minmax.cmp34.i2461 = icmp sgt <4 x i64> %rdx.minmax.select33.i2460, %813
  %rdx.minmax.select35.i2462 = select <4 x i1> %rdx.minmax.cmp34.i2461, <4 x i64> %rdx.minmax.select33.i2460, <4 x i64> %813
  %rdx.shuf.i2463 = shufflevector <4 x i64> %rdx.minmax.select35.i2462, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp56.i2464 = icmp sgt <4 x i64> %rdx.minmax.select35.i2462, %rdx.shuf.i2463
  %rdx.minmax.select57.i2465 = select <4 x i1> %rdx.minmax.cmp56.i2464, <4 x i64> %rdx.minmax.select35.i2462, <4 x i64> %rdx.shuf.i2463
  %rdx.shuf58.i2466 = shufflevector <4 x i64> %rdx.minmax.select57.i2465, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp59.i2467 = icmp sgt <4 x i64> %rdx.minmax.select57.i2465, %rdx.shuf58.i2466
  %rdx.minmax.select60.i2468 = select <4 x i1> %rdx.minmax.cmp59.i2467, <4 x i64> %rdx.minmax.select57.i2465, <4 x i64> %rdx.shuf58.i2466
  %815 = extractelement <4 x i64> %rdx.minmax.select60.i2468, i32 0
  %cmp.n.i2469 = icmp eq i64 %797, %n.vec.i2429
  br i1 %cmp.n.i2469, label %B1066.endif.endif.endif.endif, label %B24.i2416.preheader

B1066.endif.endif.endif.endif:                    ; preds = %B24.i2416, %middle.block.i2470, %B0.endif.endif.endif.i2423
  %.7109.0.ph = phi i64 [ %815, %middle.block.i2470 ], [ %.52.i2421, %B0.endif.endif.endif.i2423 ], [ %return_val.3.1.i2414, %B24.i2416 ]
  tail call void @NRT_decref(i8* nonnull %.6985)
  %.7156 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 40, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.7157 = icmp eq i8* %.7156, null
  br i1 %.7157, label %B1066.endif.endif.endif.endif.endif.endif.if, label %B1066.endif.endif.endif.endif.endif.endif.endif, !prof !3

B1066.endif.endif.endif.endif.endif.endif.if:     ; preds = %B1066.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1066.endif.endif.endif.endif.endif.endif.endif:  ; preds = %B1066.endif.endif.endif.endif
  %.5.i2397 = getelementptr i8, i8* %.7156, i64 24
  %816 = bitcast i8* %.5.i2397 to { i64, i64, i8, i64 }**
  %.6.i23985477 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %816, align 8
  %.7169 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i23985477, i64 0, i32 1
  store i64 2, i64* %.7169, align 8
  %.6.i23965478 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %816, align 8
  %.717511003 = bitcast { i64, i64, i8, i64 }* %.6.i23965478 to i64*
  store i64 0, i64* %.717511003, align 8
  %.6.i23945479 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %816, align 8
  %.7181 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i23945479, i64 0, i32 2
  store i8 0, i8* %.7181, align 1
  %.6.i23905480 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %816, align 8
  %.7194 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i23905480, i64 0, i32 3
  %.7205 = bitcast i64* %.7194 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %.7205, i8 0, i64 16, i1 false)
  %.6.i23865482 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %816, align 8
  %.722111004 = bitcast { i64, i64, i8, i64 }* %.6.i23865482 to i64*
  store i64 2, i64* %.722111004, align 8
  %.6.i23825483 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %816, align 8
  %.7234 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i23825483, i64 0, i32 3
  store i64 95, i64* %.7234, align 8
  %.6.i23785484 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %816, align 8
  %.7248 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i23785484, i64 0, i32 3
  %.7249 = getelementptr i64, i64* %.7248, i64 1
  store i64 161, i64* %.7249, align 8
  %.6.i179654856855 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %816, align 8
  %.7298685611005 = bitcast { i64, i64, i8, i64 }* %.6.i179654856855 to i64*
  %.72996857 = load i64, i64* %.7298685611005, align 8
  %.73006858 = icmp sgt i64 %.72996857, 0
  br i1 %.73006858, label %B1081.lr.ph, label %B1093

B1081.lr.ph:                                      ; preds = %B1066.endif.endif.endif.endif.endif.endif.endif
  %min.iters.check7981 = icmp ult i64 %.72996857, 16
  br i1 %min.iters.check7981, label %B1081.preheader, label %vector.ph7982

B1081.preheader:                                  ; preds = %middle.block7978, %B1081.lr.ph
  %temp.2.323.2.06860.ph = phi i64 [ 1, %B1081.lr.ph ], [ %830, %middle.block7978 ]
  %.7264.06859.ph = phi i64 [ 0, %B1081.lr.ph ], [ %n.vec7984, %middle.block7978 ]
  br label %B1081

vector.ph7982:                                    ; preds = %B1081.lr.ph
  %n.vec7984 = and i64 %.72996857, -16
  br label %vector.body7980

vector.body7980:                                  ; preds = %vector.body7980, %vector.ph7982
  %index7985 = phi i64 [ 0, %vector.ph7982 ], [ %index.next7986, %vector.body7980 ]
  %vec.phi7989 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7982 ], [ %825, %vector.body7980 ]
  %vec.phi7990 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7982 ], [ %826, %vector.body7980 ]
  %vec.phi7991 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7982 ], [ %827, %vector.body7980 ]
  %vec.phi7992 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph7982 ], [ %828, %vector.body7980 ]
  %sunkaddr11006 = mul i64 %index7985, 8
  %817 = bitcast { i64, i64, i8, i64 }* %.6.i179654856855 to i8*
  %sunkaddr11007 = getelementptr i8, i8* %817, i64 %sunkaddr11006
  %sunkaddr11008 = getelementptr i8, i8* %sunkaddr11007, i64 24
  %818 = bitcast i8* %sunkaddr11008 to <4 x i64>*
  %wide.load7993 = load <4 x i64>, <4 x i64>* %818, align 8
  %sunkaddr11009 = mul i64 %index7985, 8
  %819 = bitcast { i64, i64, i8, i64 }* %.6.i179654856855 to i8*
  %sunkaddr11010 = getelementptr i8, i8* %819, i64 %sunkaddr11009
  %sunkaddr11011 = getelementptr i8, i8* %sunkaddr11010, i64 56
  %820 = bitcast i8* %sunkaddr11011 to <4 x i64>*
  %wide.load7994 = load <4 x i64>, <4 x i64>* %820, align 8
  %sunkaddr11012 = mul i64 %index7985, 8
  %821 = bitcast { i64, i64, i8, i64 }* %.6.i179654856855 to i8*
  %sunkaddr11013 = getelementptr i8, i8* %821, i64 %sunkaddr11012
  %sunkaddr11014 = getelementptr i8, i8* %sunkaddr11013, i64 88
  %822 = bitcast i8* %sunkaddr11014 to <4 x i64>*
  %wide.load7995 = load <4 x i64>, <4 x i64>* %822, align 8
  %sunkaddr11015 = mul i64 %index7985, 8
  %823 = bitcast { i64, i64, i8, i64 }* %.6.i179654856855 to i8*
  %sunkaddr11016 = getelementptr i8, i8* %823, i64 %sunkaddr11015
  %sunkaddr11017 = getelementptr i8, i8* %sunkaddr11016, i64 120
  %824 = bitcast i8* %sunkaddr11017 to <4 x i64>*
  %wide.load7996 = load <4 x i64>, <4 x i64>* %824, align 8
  %825 = mul <4 x i64> %wide.load7993, %vec.phi7989
  %826 = mul <4 x i64> %wide.load7994, %vec.phi7990
  %827 = mul <4 x i64> %wide.load7995, %vec.phi7991
  %828 = mul <4 x i64> %wide.load7996, %vec.phi7992
  %index.next7986 = add i64 %index7985, 16
  %829 = icmp eq i64 %n.vec7984, %index.next7986
  br i1 %829, label %middle.block7978, label %vector.body7980, !llvm.loop !154

middle.block7978:                                 ; preds = %vector.body7980
  %bin.rdx7997 = mul <4 x i64> %826, %825
  %bin.rdx7998 = mul <4 x i64> %827, %bin.rdx7997
  %bin.rdx7999 = mul <4 x i64> %828, %bin.rdx7998
  %rdx.shuf10147 = shufflevector <4 x i64> %bin.rdx7999, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10148 = mul <4 x i64> %bin.rdx7999, %rdx.shuf10147
  %rdx.shuf10149 = shufflevector <4 x i64> %bin.rdx10148, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10150 = mul <4 x i64> %bin.rdx10148, %rdx.shuf10149
  %830 = extractelement <4 x i64> %bin.rdx10150, i32 0
  %cmp.n7988 = icmp eq i64 %.72996857, %n.vec7984
  br i1 %cmp.n7988, label %B1093, label %B1081.preheader

B1120.endif.endif.if:                             ; preds = %B1093
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1120.endif.endif.endif:                          ; preds = %B1093
  %.5.i2373 = getelementptr i8, i8* %.7392, i64 24
  %831 = bitcast i8* %.5.i2373 to { i64, i64, i8, i64 }**
  %.6.i23745486 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %831, align 8
  %.7405 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i23745486, i64 0, i32 1
  store i64 2, i64* %.7405, align 8
  %.6.i23725487 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %831, align 8
  %.741111018 = bitcast { i64, i64, i8, i64 }* %.6.i23725487 to i64*
  store i64 0, i64* %.741111018, align 8
  %.6.i23705488 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %831, align 8
  %.7417 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i23705488, i64 0, i32 2
  store i8 0, i8* %.7417, align 1
  %.6.i23665489 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %831, align 8
  %.7430 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i23665489, i64 0, i32 3
  %.7441 = bitcast i64* %.7430 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %.7441, i8 0, i64 16, i1 false)
  %.6.i23625491 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %831, align 8
  %.745711019 = bitcast { i64, i64, i8, i64 }* %.6.i23625491 to i64*
  store i64 2, i64* %.745711019, align 8
  %.6.i23585492 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %831, align 8
  %.7470 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i23585492, i64 0, i32 3
  store i64 0, i64* %.7470, align 8
  %.6.i23545493 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %831, align 8
  %.7484 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i23545493, i64 0, i32 3
  %.7485 = getelementptr i64, i64* %.7484, i64 1
  store i64 1176227742, i64* %.7485, align 8
  %.6.i194054946847 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %831, align 8
  %.7536684811020 = bitcast { i64, i64, i8, i64 }* %.6.i194054946847 to i64*
  %.75376849 = load i64, i64* %.7536684811020, align 8
  %.75386850 = icmp sgt i64 %.75376849, 0
  br i1 %.75386850, label %B1135.lr.ph, label %B1147

B1135.lr.ph:                                      ; preds = %B1120.endif.endif.endif
  %min.iters.check8004 = icmp ult i64 %.75376849, 16
  br i1 %min.iters.check8004, label %B1135.preheader, label %vector.ph8005

B1135.preheader:                                  ; preds = %middle.block8001, %B1135.lr.ph
  %temp.2.287.2.06852.ph = phi i64 [ 1, %B1135.lr.ph ], [ %845, %middle.block8001 ]
  %.7502.06851.ph = phi i64 [ 0, %B1135.lr.ph ], [ %n.vec8007, %middle.block8001 ]
  br label %B1135

vector.ph8005:                                    ; preds = %B1135.lr.ph
  %n.vec8007 = and i64 %.75376849, -16
  br label %vector.body8003

vector.body8003:                                  ; preds = %vector.body8003, %vector.ph8005
  %index8008 = phi i64 [ 0, %vector.ph8005 ], [ %index.next8009, %vector.body8003 ]
  %vec.phi8012 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8005 ], [ %840, %vector.body8003 ]
  %vec.phi8013 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8005 ], [ %841, %vector.body8003 ]
  %vec.phi8014 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8005 ], [ %842, %vector.body8003 ]
  %vec.phi8015 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8005 ], [ %843, %vector.body8003 ]
  %sunkaddr11021 = mul i64 %index8008, 8
  %832 = bitcast { i64, i64, i8, i64 }* %.6.i194054946847 to i8*
  %sunkaddr11022 = getelementptr i8, i8* %832, i64 %sunkaddr11021
  %sunkaddr11023 = getelementptr i8, i8* %sunkaddr11022, i64 24
  %833 = bitcast i8* %sunkaddr11023 to <4 x i64>*
  %wide.load8016 = load <4 x i64>, <4 x i64>* %833, align 8
  %sunkaddr11024 = mul i64 %index8008, 8
  %834 = bitcast { i64, i64, i8, i64 }* %.6.i194054946847 to i8*
  %sunkaddr11025 = getelementptr i8, i8* %834, i64 %sunkaddr11024
  %sunkaddr11026 = getelementptr i8, i8* %sunkaddr11025, i64 56
  %835 = bitcast i8* %sunkaddr11026 to <4 x i64>*
  %wide.load8017 = load <4 x i64>, <4 x i64>* %835, align 8
  %sunkaddr11027 = mul i64 %index8008, 8
  %836 = bitcast { i64, i64, i8, i64 }* %.6.i194054946847 to i8*
  %sunkaddr11028 = getelementptr i8, i8* %836, i64 %sunkaddr11027
  %sunkaddr11029 = getelementptr i8, i8* %sunkaddr11028, i64 88
  %837 = bitcast i8* %sunkaddr11029 to <4 x i64>*
  %wide.load8018 = load <4 x i64>, <4 x i64>* %837, align 8
  %sunkaddr11030 = mul i64 %index8008, 8
  %838 = bitcast { i64, i64, i8, i64 }* %.6.i194054946847 to i8*
  %sunkaddr11031 = getelementptr i8, i8* %838, i64 %sunkaddr11030
  %sunkaddr11032 = getelementptr i8, i8* %sunkaddr11031, i64 120
  %839 = bitcast i8* %sunkaddr11032 to <4 x i64>*
  %wide.load8019 = load <4 x i64>, <4 x i64>* %839, align 8
  %840 = mul <4 x i64> %wide.load8016, %vec.phi8012
  %841 = mul <4 x i64> %wide.load8017, %vec.phi8013
  %842 = mul <4 x i64> %wide.load8018, %vec.phi8014
  %843 = mul <4 x i64> %wide.load8019, %vec.phi8015
  %index.next8009 = add i64 %index8008, 16
  %844 = icmp eq i64 %n.vec8007, %index.next8009
  br i1 %844, label %middle.block8001, label %vector.body8003, !llvm.loop !155

middle.block8001:                                 ; preds = %vector.body8003
  %bin.rdx8020 = mul <4 x i64> %841, %840
  %bin.rdx8021 = mul <4 x i64> %842, %bin.rdx8020
  %bin.rdx8022 = mul <4 x i64> %843, %bin.rdx8021
  %rdx.shuf10151 = shufflevector <4 x i64> %bin.rdx8022, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10152 = mul <4 x i64> %bin.rdx8022, %rdx.shuf10151
  %rdx.shuf10153 = shufflevector <4 x i64> %bin.rdx10152, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10154 = mul <4 x i64> %bin.rdx10152, %rdx.shuf10153
  %845 = extractelement <4 x i64> %bin.rdx10154, i32 0
  %cmp.n8011 = icmp eq i64 %.75376849, %n.vec8007
  br i1 %cmp.n8011, label %B1147, label %B1135.preheader

B1147.endif.endif.if:                             ; preds = %B1147
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1147.endif.endif.endif:                          ; preds = %B1147
  %.5.i2349 = getelementptr i8, i8* %.7608, i64 24
  %846 = bitcast i8* %.5.i2349 to { i64, i64, i8, i64 }**
  %.6.i23505495 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %846, align 8
  %.7621 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i23505495, i64 0, i32 1
  store i64 3, i64* %.7621, align 8
  %.6.i23485496 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %846, align 8
  %.762711033 = bitcast { i64, i64, i8, i64 }* %.6.i23485496 to i64*
  store i64 0, i64* %.762711033, align 8
  %.6.i23465497 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %846, align 8
  %.7633 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i23465497, i64 0, i32 2
  store i8 0, i8* %.7633, align 1
  %.6.i23425498 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %846, align 8
  %.7646 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i23425498, i64 0, i32 3
  %.7657 = bitcast i64* %.7646 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(24) %.7657, i8 0, i64 24, i1 false)
  %.6.i23385500 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %846, align 8
  %.767311034 = bitcast { i64, i64, i8, i64 }* %.6.i23385500 to i64*
  store i64 3, i64* %.767311034, align 8
  %.6.i23345501 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %846, align 8
  %.7686 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i23345501, i64 0, i32 3
  store i64 2, i64* %.7686, align 8
  %.6.i23305502 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %846, align 8
  %.7700 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i23305502, i64 0, i32 3
  %.7701 = getelementptr i64, i64* %.7700, i64 1
  store i64 4, i64* %.7701, align 8
  %.6.i23265503 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %846, align 8
  %.7714 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i23265503, i64 0, i32 3
  %.7715 = getelementptr i64, i64* %.7714, i64 2
  store i64 11, i64* %.7715, align 8
  %.6.i3.i2270 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %846, align 8, !noalias !156
  %.5342.i227111035 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2270 to i64*
  %.548.i2272 = load i64, i64* %.5342.i227111035, align 8, !noalias !156
  %.559.i2273 = icmp sgt i64 %.548.i2272, 0
  br i1 %.559.i2273, label %B14.endif.lr.ph.i2275, label %B1147.endif.endif.endif.endif

B14.endif.lr.ph.i2275:                            ; preds = %B1147.endif.endif.endif
  %min.iters.check.i2274 = icmp ult i64 %.548.i2272, 16
  br i1 %min.iters.check.i2274, label %B14.endif.preheader.i2278, label %vector.ph.i2280

B14.endif.preheader.i2278:                        ; preds = %middle.block.i2312, %B14.endif.lr.ph.i2275
  %acc.2.011.ph.i2276 = phi i64 [ 0, %B14.endif.lr.ph.i2275 ], [ %860, %middle.block.i2312 ]
  %.17.010.ph.i2277 = phi i64 [ 0, %B14.endif.lr.ph.i2275 ], [ %n.vec.i2279, %middle.block.i2312 ]
  br label %B14.endif.i2323

vector.ph.i2280:                                  ; preds = %B14.endif.lr.ph.i2275
  %n.vec.i2279 = and i64 %.548.i2272, -16
  br label %vector.body.i2303

vector.body.i2303:                                ; preds = %vector.body.i2303, %vector.ph.i2280
  %index.i2281 = phi i64 [ 0, %vector.ph.i2280 ], [ %index.next.i2302, %vector.body.i2303 ]
  %vec.phi.i2282 = phi <4 x i64> [ zeroinitializer, %vector.ph.i2280 ], [ %855, %vector.body.i2303 ]
  %vec.phi12.i2283 = phi <4 x i64> [ zeroinitializer, %vector.ph.i2280 ], [ %856, %vector.body.i2303 ]
  %vec.phi13.i2284 = phi <4 x i64> [ zeroinitializer, %vector.ph.i2280 ], [ %857, %vector.body.i2303 ]
  %vec.phi14.i2285 = phi <4 x i64> [ zeroinitializer, %vector.ph.i2280 ], [ %858, %vector.body.i2303 ]
  %sunkaddr11036 = mul i64 %index.i2281, 8
  %847 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2270 to i8*
  %sunkaddr11037 = getelementptr i8, i8* %847, i64 %sunkaddr11036
  %sunkaddr11038 = getelementptr i8, i8* %sunkaddr11037, i64 24
  %848 = bitcast i8* %sunkaddr11038 to <4 x i64>*
  %wide.load.i2289 = load <4 x i64>, <4 x i64>* %848, align 8, !noalias !156
  %sunkaddr11039 = mul i64 %index.i2281, 8
  %849 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2270 to i8*
  %sunkaddr11040 = getelementptr i8, i8* %849, i64 %sunkaddr11039
  %sunkaddr11041 = getelementptr i8, i8* %sunkaddr11040, i64 56
  %850 = bitcast i8* %sunkaddr11041 to <4 x i64>*
  %wide.load15.i2293 = load <4 x i64>, <4 x i64>* %850, align 8, !noalias !156
  %sunkaddr11042 = mul i64 %index.i2281, 8
  %851 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2270 to i8*
  %sunkaddr11043 = getelementptr i8, i8* %851, i64 %sunkaddr11042
  %sunkaddr11044 = getelementptr i8, i8* %sunkaddr11043, i64 88
  %852 = bitcast i8* %sunkaddr11044 to <4 x i64>*
  %wide.load16.i2297 = load <4 x i64>, <4 x i64>* %852, align 8, !noalias !156
  %sunkaddr11045 = mul i64 %index.i2281, 8
  %853 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2270 to i8*
  %sunkaddr11046 = getelementptr i8, i8* %853, i64 %sunkaddr11045
  %sunkaddr11047 = getelementptr i8, i8* %sunkaddr11046, i64 120
  %854 = bitcast i8* %sunkaddr11047 to <4 x i64>*
  %wide.load17.i2301 = load <4 x i64>, <4 x i64>* %854, align 8, !noalias !156
  %855 = add <4 x i64> %wide.load.i2289, %vec.phi.i2282
  %856 = add <4 x i64> %wide.load15.i2293, %vec.phi12.i2283
  %857 = add <4 x i64> %wide.load16.i2297, %vec.phi13.i2284
  %858 = add <4 x i64> %wide.load17.i2301, %vec.phi14.i2285
  %index.next.i2302 = add i64 %index.i2281, 16
  %859 = icmp eq i64 %n.vec.i2279, %index.next.i2302
  br i1 %859, label %middle.block.i2312, label %vector.body.i2303, !llvm.loop !51

middle.block.i2312:                               ; preds = %vector.body.i2303
  %bin.rdx.i2304 = add <4 x i64> %856, %855
  %bin.rdx18.i2305 = add <4 x i64> %bin.rdx.i2304, %857
  %bin.rdx19.i2306 = add <4 x i64> %bin.rdx18.i2305, %858
  %rdx.shuf.i2307 = shufflevector <4 x i64> %bin.rdx19.i2306, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx39.i2308 = add <4 x i64> %rdx.shuf.i2307, %bin.rdx19.i2306
  %rdx.shuf40.i2309 = shufflevector <4 x i64> %bin.rdx39.i2308, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx41.i2310 = add <4 x i64> %rdx.shuf40.i2309, %bin.rdx39.i2308
  %860 = extractelement <4 x i64> %bin.rdx41.i2310, i32 0
  %cmp.n.i2311 = icmp eq i64 %.548.i2272, %n.vec.i2279
  br i1 %cmp.n.i2311, label %B1147.endif.endif.endif.endif, label %B14.endif.preheader.i2278

B14.endif.i2323:                                  ; preds = %B14.endif.i2323, %B14.endif.preheader.i2278
  %acc.2.011.i2314 = phi i64 [ %.94.i2321, %B14.endif.i2323 ], [ %acc.2.011.ph.i2276, %B14.endif.preheader.i2278 ]
  %.17.010.i2315 = phi i64 [ %.68.i2320, %B14.endif.i2323 ], [ %.17.010.ph.i2277, %B14.endif.preheader.i2278 ]
  %sunkaddr11048 = mul i64 %.17.010.i2315, 8
  %861 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2270 to i8*
  %sunkaddr11049 = getelementptr i8, i8* %861, i64 %sunkaddr11048
  %sunkaddr11050 = getelementptr i8, i8* %sunkaddr11049, i64 24
  %862 = bitcast i8* %sunkaddr11050 to i64*
  %.65.i2319 = load i64, i64* %862, align 8, !noalias !156
  %.68.i2320 = add nuw nsw i64 %.17.010.i2315, 1
  %.94.i2321 = add nsw i64 %.65.i2319, %acc.2.011.i2314
  %exitcond.not.i2322 = icmp eq i64 %.548.i2272, %.68.i2320
  br i1 %exitcond.not.i2322, label %B1147.endif.endif.endif.endif, label %B14.endif.i2323, !llvm.loop !52

B1147.endif.endif.endif.endif:                    ; preds = %B14.endif.i2323, %middle.block.i2312, %B1147.endif.endif.endif
  %acc.2.0.lcssa.i2313 = phi i64 [ 0, %B1147.endif.endif.endif ], [ %860, %middle.block.i2312 ], [ %.94.i2321, %B14.endif.i2323 ]
  tail call void @NRT_decref(i8* nonnull %.7608)
  %.7762 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 48, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.7763 = icmp eq i8* %.7762, null
  br i1 %.7763, label %B1147.endif.endif.endif.endif.endif.endif.if, label %B1147.endif.endif.endif.endif.endif.endif.endif, !prof !3

B1147.endif.endif.endif.endif.endif.endif.if:     ; preds = %B1147.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1147.endif.endif.endif.endif.endif.endif.endif:  ; preds = %B1147.endif.endif.endif.endif
  %.5.i2265 = getelementptr i8, i8* %.7762, i64 24
  %863 = bitcast i8* %.5.i2265 to { i64, i64, i8, i64 }**
  %.6.i22665504 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %863, align 8
  %.7775 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i22665504, i64 0, i32 1
  store i64 3, i64* %.7775, align 8
  %.6.i22645505 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %863, align 8
  %.778111051 = bitcast { i64, i64, i8, i64 }* %.6.i22645505 to i64*
  store i64 0, i64* %.778111051, align 8
  %.6.i22625506 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %863, align 8
  %.7787 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i22625506, i64 0, i32 2
  store i8 0, i8* %.7787, align 1
  %.6.i22585507 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %863, align 8
  %.7800 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i22585507, i64 0, i32 3
  %.7811 = bitcast i64* %.7800 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(24) %.7811, i8 0, i64 24, i1 false)
  %.6.i22545509 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %863, align 8
  %.782711052 = bitcast { i64, i64, i8, i64 }* %.6.i22545509 to i64*
  store i64 3, i64* %.782711052, align 8
  %.6.i22505510 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %863, align 8
  %.7840 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i22505510, i64 0, i32 3
  store i64 10, i64* %.7840, align 8
  %.6.i22465511 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %863, align 8
  %.7854 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i22465511, i64 0, i32 3
  %.7855 = getelementptr i64, i64* %.7854, i64 1
  store i64 15, i64* %.7855, align 8
  %.6.i22425512 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %863, align 8
  %.7868 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i22425512, i64 0, i32 3
  %.7869 = getelementptr i64, i64* %.7868, i64 2
  store i64 10, i64* %.7869, align 8
  %.6.i3.i2186 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %863, align 8, !noalias !159
  %.5342.i218711053 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2186 to i64*
  %.548.i2188 = load i64, i64* %.5342.i218711053, align 8, !noalias !159
  %.559.i2189 = icmp sgt i64 %.548.i2188, 0
  br i1 %.559.i2189, label %B14.endif.lr.ph.i2191, label %B1147.endif.endif.endif.endif.endif.endif.endif.endif

B14.endif.lr.ph.i2191:                            ; preds = %B1147.endif.endif.endif.endif.endif.endif.endif
  %min.iters.check.i2190 = icmp ult i64 %.548.i2188, 16
  br i1 %min.iters.check.i2190, label %B14.endif.preheader.i2194, label %vector.ph.i2196

B14.endif.preheader.i2194:                        ; preds = %middle.block.i2228, %B14.endif.lr.ph.i2191
  %acc.2.011.ph.i2192 = phi i64 [ 0, %B14.endif.lr.ph.i2191 ], [ %877, %middle.block.i2228 ]
  %.17.010.ph.i2193 = phi i64 [ 0, %B14.endif.lr.ph.i2191 ], [ %n.vec.i2195, %middle.block.i2228 ]
  br label %B14.endif.i2239

vector.ph.i2196:                                  ; preds = %B14.endif.lr.ph.i2191
  %n.vec.i2195 = and i64 %.548.i2188, -16
  br label %vector.body.i2219

vector.body.i2219:                                ; preds = %vector.body.i2219, %vector.ph.i2196
  %index.i2197 = phi i64 [ 0, %vector.ph.i2196 ], [ %index.next.i2218, %vector.body.i2219 ]
  %vec.phi.i2198 = phi <4 x i64> [ zeroinitializer, %vector.ph.i2196 ], [ %872, %vector.body.i2219 ]
  %vec.phi12.i2199 = phi <4 x i64> [ zeroinitializer, %vector.ph.i2196 ], [ %873, %vector.body.i2219 ]
  %vec.phi13.i2200 = phi <4 x i64> [ zeroinitializer, %vector.ph.i2196 ], [ %874, %vector.body.i2219 ]
  %vec.phi14.i2201 = phi <4 x i64> [ zeroinitializer, %vector.ph.i2196 ], [ %875, %vector.body.i2219 ]
  %sunkaddr11054 = mul i64 %index.i2197, 8
  %864 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2186 to i8*
  %sunkaddr11055 = getelementptr i8, i8* %864, i64 %sunkaddr11054
  %sunkaddr11056 = getelementptr i8, i8* %sunkaddr11055, i64 24
  %865 = bitcast i8* %sunkaddr11056 to <4 x i64>*
  %wide.load.i2205 = load <4 x i64>, <4 x i64>* %865, align 8, !noalias !159
  %sunkaddr11057 = mul i64 %index.i2197, 8
  %866 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2186 to i8*
  %sunkaddr11058 = getelementptr i8, i8* %866, i64 %sunkaddr11057
  %sunkaddr11059 = getelementptr i8, i8* %sunkaddr11058, i64 56
  %867 = bitcast i8* %sunkaddr11059 to <4 x i64>*
  %wide.load15.i2209 = load <4 x i64>, <4 x i64>* %867, align 8, !noalias !159
  %sunkaddr11060 = mul i64 %index.i2197, 8
  %868 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2186 to i8*
  %sunkaddr11061 = getelementptr i8, i8* %868, i64 %sunkaddr11060
  %sunkaddr11062 = getelementptr i8, i8* %sunkaddr11061, i64 88
  %869 = bitcast i8* %sunkaddr11062 to <4 x i64>*
  %wide.load16.i2213 = load <4 x i64>, <4 x i64>* %869, align 8, !noalias !159
  %sunkaddr11063 = mul i64 %index.i2197, 8
  %870 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2186 to i8*
  %sunkaddr11064 = getelementptr i8, i8* %870, i64 %sunkaddr11063
  %sunkaddr11065 = getelementptr i8, i8* %sunkaddr11064, i64 120
  %871 = bitcast i8* %sunkaddr11065 to <4 x i64>*
  %wide.load17.i2217 = load <4 x i64>, <4 x i64>* %871, align 8, !noalias !159
  %872 = add <4 x i64> %wide.load.i2205, %vec.phi.i2198
  %873 = add <4 x i64> %wide.load15.i2209, %vec.phi12.i2199
  %874 = add <4 x i64> %wide.load16.i2213, %vec.phi13.i2200
  %875 = add <4 x i64> %wide.load17.i2217, %vec.phi14.i2201
  %index.next.i2218 = add i64 %index.i2197, 16
  %876 = icmp eq i64 %n.vec.i2195, %index.next.i2218
  br i1 %876, label %middle.block.i2228, label %vector.body.i2219, !llvm.loop !51

middle.block.i2228:                               ; preds = %vector.body.i2219
  %bin.rdx.i2220 = add <4 x i64> %873, %872
  %bin.rdx18.i2221 = add <4 x i64> %bin.rdx.i2220, %874
  %bin.rdx19.i2222 = add <4 x i64> %bin.rdx18.i2221, %875
  %rdx.shuf.i2223 = shufflevector <4 x i64> %bin.rdx19.i2222, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx39.i2224 = add <4 x i64> %rdx.shuf.i2223, %bin.rdx19.i2222
  %rdx.shuf40.i2225 = shufflevector <4 x i64> %bin.rdx39.i2224, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx41.i2226 = add <4 x i64> %rdx.shuf40.i2225, %bin.rdx39.i2224
  %877 = extractelement <4 x i64> %bin.rdx41.i2226, i32 0
  %cmp.n.i2227 = icmp eq i64 %.548.i2188, %n.vec.i2195
  br i1 %cmp.n.i2227, label %B1147.endif.endif.endif.endif.endif.endif.endif.endif, label %B14.endif.preheader.i2194

B14.endif.i2239:                                  ; preds = %B14.endif.i2239, %B14.endif.preheader.i2194
  %acc.2.011.i2230 = phi i64 [ %.94.i2237, %B14.endif.i2239 ], [ %acc.2.011.ph.i2192, %B14.endif.preheader.i2194 ]
  %.17.010.i2231 = phi i64 [ %.68.i2236, %B14.endif.i2239 ], [ %.17.010.ph.i2193, %B14.endif.preheader.i2194 ]
  %sunkaddr11066 = mul i64 %.17.010.i2231, 8
  %878 = bitcast { i64, i64, i8, i64 }* %.6.i3.i2186 to i8*
  %sunkaddr11067 = getelementptr i8, i8* %878, i64 %sunkaddr11066
  %sunkaddr11068 = getelementptr i8, i8* %sunkaddr11067, i64 24
  %879 = bitcast i8* %sunkaddr11068 to i64*
  %.65.i2235 = load i64, i64* %879, align 8, !noalias !159
  %.68.i2236 = add nuw nsw i64 %.17.010.i2231, 1
  %.94.i2237 = add nsw i64 %.65.i2235, %acc.2.011.i2230
  %exitcond.not.i2238 = icmp eq i64 %.548.i2188, %.68.i2236
  br i1 %exitcond.not.i2238, label %B1147.endif.endif.endif.endif.endif.endif.endif.endif, label %B14.endif.i2239, !llvm.loop !52

B1147.endif.endif.endif.endif.endif.endif.endif.endif: ; preds = %B14.endif.i2239, %middle.block.i2228, %B1147.endif.endif.endif.endif.endif.endif.endif
  %acc.2.0.lcssa.i2229 = phi i64 [ 0, %B1147.endif.endif.endif.endif.endif.endif.endif ], [ %877, %middle.block.i2228 ], [ %.94.i2237, %B14.endif.i2239 ]
  tail call void @NRT_decref(i8* nonnull %.7762)
  %.7933 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 40, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.7934 = icmp eq i8* %.7933, null
  br i1 %.7934, label %B1174.endif.endif.if, label %B1174.endif.endif.endif, !prof !3

B1174.endif.endif.if:                             ; preds = %B1147.endif.endif.endif.endif.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1174.endif.endif.endif:                          ; preds = %B1147.endif.endif.endif.endif.endif.endif.endif.endif
  %.7897 = icmp sgt i64 %acc.2.0.lcssa.i2313, %acc.2.0.lcssa.i2229
  %"$phi502.24.2.0" = zext i1 %.7897 to i64
  %.5.i2181 = getelementptr i8, i8* %.7933, i64 24
  %880 = bitcast i8* %.5.i2181 to { i64, i64, i8, i64 }**
  %.6.i21825513 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %880, align 8
  %.7946 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i21825513, i64 0, i32 1
  store i64 2, i64* %.7946, align 8
  %.6.i21805514 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %880, align 8
  %.795211069 = bitcast { i64, i64, i8, i64 }* %.6.i21805514 to i64*
  store i64 0, i64* %.795211069, align 8
  %.6.i21785515 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %880, align 8
  %.7958 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i21785515, i64 0, i32 2
  store i8 0, i8* %.7958, align 1
  %.6.i21745516 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %880, align 8
  %.7971 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i21745516, i64 0, i32 3
  %.7982 = bitcast i64* %.7971 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %.7982, i8 0, i64 16, i1 false)
  %.6.i21705518 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %880, align 8
  %.799811070 = bitcast { i64, i64, i8, i64 }* %.6.i21705518 to i64*
  store i64 2, i64* %.799811070, align 8
  %.6.i21665519 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %880, align 8
  %.8011 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i21665519, i64 0, i32 3
  store i64 102, i64* %.8011, align 8
  %.6.i21625520 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %880, align 8
  %.8025 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i21625520, i64 0, i32 3
  %.8026 = getelementptr i64, i64* %.8025, i64 1
  store i64 %"$phi502.24.2.0", i64* %.8026, align 8
  %.6.i206455216839 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %880, align 8
  %.8079684011071 = bitcast { i64, i64, i8, i64 }* %.6.i206455216839 to i64*
  %.80806841 = load i64, i64* %.8079684011071, align 8
  %.80816842 = icmp sgt i64 %.80806841, 0
  br i1 %.80816842, label %B1189.lr.ph, label %B1201

B1189.lr.ph:                                      ; preds = %B1174.endif.endif.endif
  %min.iters.check8027 = icmp ult i64 %.80806841, 16
  br i1 %min.iters.check8027, label %B1189.preheader, label %vector.ph8028

B1189.preheader:                                  ; preds = %middle.block8024, %B1189.lr.ph
  %temp.2.269.2.06844.ph = phi i64 [ 1, %B1189.lr.ph ], [ %894, %middle.block8024 ]
  %.8045.06843.ph = phi i64 [ 0, %B1189.lr.ph ], [ %n.vec8030, %middle.block8024 ]
  br label %B1189

vector.ph8028:                                    ; preds = %B1189.lr.ph
  %n.vec8030 = and i64 %.80806841, -16
  br label %vector.body8026

vector.body8026:                                  ; preds = %vector.body8026, %vector.ph8028
  %index8031 = phi i64 [ 0, %vector.ph8028 ], [ %index.next8032, %vector.body8026 ]
  %vec.phi8035 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8028 ], [ %889, %vector.body8026 ]
  %vec.phi8036 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8028 ], [ %890, %vector.body8026 ]
  %vec.phi8037 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8028 ], [ %891, %vector.body8026 ]
  %vec.phi8038 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8028 ], [ %892, %vector.body8026 ]
  %sunkaddr11072 = mul i64 %index8031, 8
  %881 = bitcast { i64, i64, i8, i64 }* %.6.i206455216839 to i8*
  %sunkaddr11073 = getelementptr i8, i8* %881, i64 %sunkaddr11072
  %sunkaddr11074 = getelementptr i8, i8* %sunkaddr11073, i64 24
  %882 = bitcast i8* %sunkaddr11074 to <4 x i64>*
  %wide.load8039 = load <4 x i64>, <4 x i64>* %882, align 8
  %sunkaddr11075 = mul i64 %index8031, 8
  %883 = bitcast { i64, i64, i8, i64 }* %.6.i206455216839 to i8*
  %sunkaddr11076 = getelementptr i8, i8* %883, i64 %sunkaddr11075
  %sunkaddr11077 = getelementptr i8, i8* %sunkaddr11076, i64 56
  %884 = bitcast i8* %sunkaddr11077 to <4 x i64>*
  %wide.load8040 = load <4 x i64>, <4 x i64>* %884, align 8
  %sunkaddr11078 = mul i64 %index8031, 8
  %885 = bitcast { i64, i64, i8, i64 }* %.6.i206455216839 to i8*
  %sunkaddr11079 = getelementptr i8, i8* %885, i64 %sunkaddr11078
  %sunkaddr11080 = getelementptr i8, i8* %sunkaddr11079, i64 88
  %886 = bitcast i8* %sunkaddr11080 to <4 x i64>*
  %wide.load8041 = load <4 x i64>, <4 x i64>* %886, align 8
  %sunkaddr11081 = mul i64 %index8031, 8
  %887 = bitcast { i64, i64, i8, i64 }* %.6.i206455216839 to i8*
  %sunkaddr11082 = getelementptr i8, i8* %887, i64 %sunkaddr11081
  %sunkaddr11083 = getelementptr i8, i8* %sunkaddr11082, i64 120
  %888 = bitcast i8* %sunkaddr11083 to <4 x i64>*
  %wide.load8042 = load <4 x i64>, <4 x i64>* %888, align 8
  %889 = mul <4 x i64> %wide.load8039, %vec.phi8035
  %890 = mul <4 x i64> %wide.load8040, %vec.phi8036
  %891 = mul <4 x i64> %wide.load8041, %vec.phi8037
  %892 = mul <4 x i64> %wide.load8042, %vec.phi8038
  %index.next8032 = add i64 %index8031, 16
  %893 = icmp eq i64 %n.vec8030, %index.next8032
  br i1 %893, label %middle.block8024, label %vector.body8026, !llvm.loop !162

middle.block8024:                                 ; preds = %vector.body8026
  %bin.rdx8043 = mul <4 x i64> %890, %889
  %bin.rdx8044 = mul <4 x i64> %891, %bin.rdx8043
  %bin.rdx8045 = mul <4 x i64> %892, %bin.rdx8044
  %rdx.shuf10155 = shufflevector <4 x i64> %bin.rdx8045, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10156 = mul <4 x i64> %bin.rdx8045, %rdx.shuf10155
  %rdx.shuf10157 = shufflevector <4 x i64> %bin.rdx10156, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10158 = mul <4 x i64> %bin.rdx10156, %rdx.shuf10157
  %894 = extractelement <4 x i64> %bin.rdx10158, i32 0
  %cmp.n8034 = icmp eq i64 %.80806841, %n.vec8030
  br i1 %cmp.n8034, label %B1201, label %B1189.preheader

B1201.endif.endif.if:                             ; preds = %B1201
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1201.endif.endif.endif:                          ; preds = %B1201
  %.5.i2157 = getelementptr i8, i8* %.8151, i64 24
  %895 = bitcast i8* %.5.i2157 to { i64, i64, i8, i64 }**
  %.6.i21585522 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %895, align 8
  %.8164 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i21585522, i64 0, i32 1
  store i64 2, i64* %.8164, align 8
  %.6.i21565523 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %895, align 8
  %.817011084 = bitcast { i64, i64, i8, i64 }* %.6.i21565523 to i64*
  store i64 0, i64* %.817011084, align 8
  %.6.i21545524 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %895, align 8
  %.8176 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i21545524, i64 0, i32 2
  store i8 0, i8* %.8176, align 1
  %.6.i21505525 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %895, align 8
  %.8189 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i21505525, i64 0, i32 3
  %.8200 = bitcast i64* %.8189 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %.8200, i8 0, i64 16, i1 false)
  %.6.i21465527 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %895, align 8
  %.821611085 = bitcast { i64, i64, i8, i64 }* %.6.i21465527 to i64*
  store i64 2, i64* %.821611085, align 8
  %.6.i21425528 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %895, align 8
  %.8229 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i21425528, i64 0, i32 3
  store i64 246, i64* %.8229, align 8
  %.6.i21385529 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %895, align 8
  %.8243 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i21385529, i64 0, i32 3
  %.8244 = getelementptr i64, i64* %.8243, i64 1
  store i64 1554, i64* %.8244, align 8
  %.6.i11.i2066 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %895, align 8, !noalias !163
  %.4061.i206711086 = bitcast { i64, i64, i8, i64 }* %.6.i11.i2066 to i64*
  %.41.i2068 = load i64, i64* %.4061.i206711086, align 8, !noalias !163
  %.42.i2069 = icmp sgt i64 %.41.i2068, 0
  br i1 %.42.i2069, label %B0.endif.endif.endif.i2087, label %B0.endif.endif.endif.if.if, !prof !45

B24.i2080:                                        ; preds = %B24.i2080.preheader, %B24.i2080
  %return_val.2.025.i2070 = phi i64 [ %return_val.3.1.i2078, %B24.i2080 ], [ %return_val.2.025.i2070.ph, %B24.i2080.preheader ]
  %.14.024.i2071 = phi i64 [ %.129.i2076, %B24.i2080 ], [ %.14.024.i2071.ph, %B24.i2080.preheader ]
  %sunkaddr11087 = mul i64 %.14.024.i2071, 8
  %896 = bitcast { i64, i64, i8, i64 }* %.6.i11.i2066 to i8*
  %sunkaddr11088 = getelementptr i8, i8* %896, i64 %sunkaddr11087
  %sunkaddr11089 = getelementptr i8, i8* %sunkaddr11088, i64 24
  %897 = bitcast i8* %sunkaddr11089 to i64*
  %.126.i2075 = load i64, i64* %897, align 8, !noalias !163
  %.129.i2076 = add nuw nsw i64 %.14.024.i2071, 1
  %.6.i7.not.i2077 = icmp slt i64 %.126.i2075, %return_val.2.025.i2070
  %return_val.3.1.i2078 = select i1 %.6.i7.not.i2077, i64 %.126.i2075, i64 %return_val.2.025.i2070
  %exitcond.not.i2079 = icmp eq i64 %.41.i2068, %.129.i2076
  br i1 %exitcond.not.i2079, label %B1201.endif.endif.endif.endif, label %B24.i2080, !llvm.loop !46

B0.endif.endif.endif.i2087:                       ; preds = %B1201.endif.endif.endif
  %.50.i2084 = getelementptr { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11.i2066, i64 0, i32 3
  %.52.i2085 = load i64, i64* %.50.i2084, align 8, !noalias !163
  %.11623.not.i2086 = icmp eq i64 %.41.i2068, 1
  br i1 %.11623.not.i2086, label %B1201.endif.endif.endif.endif, label %B24.preheader.i2089

B24.preheader.i2089:                              ; preds = %B0.endif.endif.endif.i2087
  %898 = add nsw i64 %.41.i2068, -1
  %min.iters.check.i2088 = icmp ult i64 %898, 16
  br i1 %min.iters.check.i2088, label %B24.i2080.preheader, label %vector.ph.i2097

B24.i2080.preheader:                              ; preds = %middle.block.i2134, %B24.preheader.i2089
  %return_val.2.025.i2070.ph = phi i64 [ %916, %middle.block.i2134 ], [ %.52.i2085, %B24.preheader.i2089 ]
  %.14.024.i2071.ph = phi i64 [ %ind.end.i2094, %middle.block.i2134 ], [ 1, %B24.preheader.i2089 ]
  br label %B24.i2080

vector.ph.i2097:                                  ; preds = %B24.preheader.i2089
  %n.vec.i2093 = and i64 %898, -16
  %minmax.ident.splatinsert.i2095 = insertelement <4 x i64> undef, i64 %.52.i2085, i32 0
  %minmax.ident.splat.i2096 = shufflevector <4 x i64> %minmax.ident.splatinsert.i2095, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %vector.body.i2120

vector.body.i2120:                                ; preds = %vector.body.i2120, %vector.ph.i2097
  %index.i2098 = phi i64 [ 0, %vector.ph.i2097 ], [ %index.next.i2119, %vector.body.i2120 ]
  %vec.phi.i2099 = phi <4 x i64> [ %minmax.ident.splat.i2096, %vector.ph.i2097 ], [ %911, %vector.body.i2120 ]
  %vec.phi26.i2100 = phi <4 x i64> [ %minmax.ident.splat.i2096, %vector.ph.i2097 ], [ %912, %vector.body.i2120 ]
  %vec.phi27.i2101 = phi <4 x i64> [ %minmax.ident.splat.i2096, %vector.ph.i2097 ], [ %913, %vector.body.i2120 ]
  %vec.phi28.i2102 = phi <4 x i64> [ %minmax.ident.splat.i2096, %vector.ph.i2097 ], [ %914, %vector.body.i2120 ]
  %sunkaddr11090 = mul i64 %index.i2098, 8
  %899 = bitcast { i64, i64, i8, i64 }* %.6.i11.i2066 to i8*
  %sunkaddr11091 = getelementptr i8, i8* %899, i64 %sunkaddr11090
  %sunkaddr11092 = getelementptr i8, i8* %sunkaddr11091, i64 32
  %900 = bitcast i8* %sunkaddr11092 to <4 x i64>*
  %wide.load.i2106 = load <4 x i64>, <4 x i64>* %900, align 8, !noalias !163
  %sunkaddr11093 = mul i64 %index.i2098, 8
  %901 = bitcast { i64, i64, i8, i64 }* %.6.i11.i2066 to i8*
  %sunkaddr11094 = getelementptr i8, i8* %901, i64 %sunkaddr11093
  %sunkaddr11095 = getelementptr i8, i8* %sunkaddr11094, i64 64
  %902 = bitcast i8* %sunkaddr11095 to <4 x i64>*
  %wide.load29.i2110 = load <4 x i64>, <4 x i64>* %902, align 8, !noalias !163
  %sunkaddr11096 = mul i64 %index.i2098, 8
  %903 = bitcast { i64, i64, i8, i64 }* %.6.i11.i2066 to i8*
  %sunkaddr11097 = getelementptr i8, i8* %903, i64 %sunkaddr11096
  %sunkaddr11098 = getelementptr i8, i8* %sunkaddr11097, i64 96
  %904 = bitcast i8* %sunkaddr11098 to <4 x i64>*
  %wide.load30.i2114 = load <4 x i64>, <4 x i64>* %904, align 8, !noalias !163
  %sunkaddr11099 = mul i64 %index.i2098, 8
  %905 = bitcast { i64, i64, i8, i64 }* %.6.i11.i2066 to i8*
  %sunkaddr11100 = getelementptr i8, i8* %905, i64 %sunkaddr11099
  %sunkaddr11101 = getelementptr i8, i8* %sunkaddr11100, i64 128
  %906 = bitcast i8* %sunkaddr11101 to <4 x i64>*
  %wide.load31.i2118 = load <4 x i64>, <4 x i64>* %906, align 8, !noalias !163
  %907 = icmp slt <4 x i64> %wide.load.i2106, %vec.phi.i2099
  %908 = icmp slt <4 x i64> %wide.load29.i2110, %vec.phi26.i2100
  %909 = icmp slt <4 x i64> %wide.load30.i2114, %vec.phi27.i2101
  %910 = icmp slt <4 x i64> %wide.load31.i2118, %vec.phi28.i2102
  %911 = select <4 x i1> %907, <4 x i64> %wide.load.i2106, <4 x i64> %vec.phi.i2099
  %912 = select <4 x i1> %908, <4 x i64> %wide.load29.i2110, <4 x i64> %vec.phi26.i2100
  %913 = select <4 x i1> %909, <4 x i64> %wide.load30.i2114, <4 x i64> %vec.phi27.i2101
  %914 = select <4 x i1> %910, <4 x i64> %wide.load31.i2118, <4 x i64> %vec.phi28.i2102
  %index.next.i2119 = add i64 %index.i2098, 16
  %915 = icmp eq i64 %n.vec.i2093, %index.next.i2119
  br i1 %915, label %middle.block.i2134, label %vector.body.i2120, !llvm.loop !47

middle.block.i2134:                               ; preds = %vector.body.i2120
  %ind.end.i2094 = or i64 %n.vec.i2093, 1
  %rdx.minmax.cmp.i2121 = icmp slt <4 x i64> %911, %912
  %rdx.minmax.select.i2122 = select <4 x i1> %rdx.minmax.cmp.i2121, <4 x i64> %911, <4 x i64> %912
  %rdx.minmax.cmp32.i2123 = icmp slt <4 x i64> %rdx.minmax.select.i2122, %913
  %rdx.minmax.select33.i2124 = select <4 x i1> %rdx.minmax.cmp32.i2123, <4 x i64> %rdx.minmax.select.i2122, <4 x i64> %913
  %rdx.minmax.cmp34.i2125 = icmp slt <4 x i64> %rdx.minmax.select33.i2124, %914
  %rdx.minmax.select35.i2126 = select <4 x i1> %rdx.minmax.cmp34.i2125, <4 x i64> %rdx.minmax.select33.i2124, <4 x i64> %914
  %rdx.shuf.i2127 = shufflevector <4 x i64> %rdx.minmax.select35.i2126, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp56.i2128 = icmp slt <4 x i64> %rdx.minmax.select35.i2126, %rdx.shuf.i2127
  %rdx.minmax.select57.i2129 = select <4 x i1> %rdx.minmax.cmp56.i2128, <4 x i64> %rdx.minmax.select35.i2126, <4 x i64> %rdx.shuf.i2127
  %rdx.shuf58.i2130 = shufflevector <4 x i64> %rdx.minmax.select57.i2129, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp59.i2131 = icmp slt <4 x i64> %rdx.minmax.select57.i2129, %rdx.shuf58.i2130
  %rdx.minmax.select60.i2132 = select <4 x i1> %rdx.minmax.cmp59.i2131, <4 x i64> %rdx.minmax.select57.i2129, <4 x i64> %rdx.shuf58.i2130
  %916 = extractelement <4 x i64> %rdx.minmax.select60.i2132, i32 0
  %cmp.n.i2133 = icmp eq i64 %898, %n.vec.i2093
  br i1 %cmp.n.i2133, label %B1201.endif.endif.endif.endif, label %B24.i2080.preheader

B1201.endif.endif.endif.endif:                    ; preds = %B24.i2080, %middle.block.i2134, %B0.endif.endif.endif.i2087
  %.8247.0.ph = phi i64 [ %916, %middle.block.i2134 ], [ %.52.i2085, %B0.endif.endif.endif.i2087 ], [ %return_val.3.1.i2078, %B24.i2080 ]
  tail call void @NRT_decref(i8* nonnull %.8151)
  %.8304 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 40, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.8305 = icmp eq i8* %.8304, null
  br i1 %.8305, label %B1228.endif.endif.if, label %B1228.endif.endif.endif, !prof !3

B1228.endif.endif.if:                             ; preds = %B1201.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1228.endif.endif.endif:                          ; preds = %B1201.endif.endif.endif.endif
  %.5.i2061 = getelementptr i8, i8* %.8304, i64 24
  %917 = bitcast i8* %.5.i2061 to { i64, i64, i8, i64 }**
  %.6.i20625530 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %917, align 8
  %.8317 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i20625530, i64 0, i32 1
  store i64 2, i64* %.8317, align 8
  %.6.i20605531 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %917, align 8
  %.832311102 = bitcast { i64, i64, i8, i64 }* %.6.i20605531 to i64*
  store i64 0, i64* %.832311102, align 8
  %.6.i20585532 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %917, align 8
  %.8329 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i20585532, i64 0, i32 2
  store i8 0, i8* %.8329, align 1
  %.6.i20545533 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %917, align 8
  %.8342 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i20545533, i64 0, i32 3
  %.8353 = bitcast i64* %.8342 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %.8353, i8 0, i64 16, i1 false)
  %.6.i20505535 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %917, align 8
  %.836911103 = bitcast { i64, i64, i8, i64 }* %.6.i20505535 to i64*
  store i64 2, i64* %.836911103, align 8
  %.6.i20465536 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %917, align 8
  %.8382 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i20465536, i64 0, i32 3
  store i64 0, i64* %.8382, align 8
  %.6.i20425537 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %917, align 8
  %.8396 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i20425537, i64 0, i32 3
  %.8397 = getelementptr i64, i64* %.8396, i64 1
  store i64 208, i64* %.8397, align 8
  %.6.i218455386831 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %917, align 8
  %.8448683211104 = bitcast { i64, i64, i8, i64 }* %.6.i218455386831 to i64*
  %.84496833 = load i64, i64* %.8448683211104, align 8
  %.84506834 = icmp sgt i64 %.84496833, 0
  br i1 %.84506834, label %B1243.lr.ph, label %B1255

B1243.lr.ph:                                      ; preds = %B1228.endif.endif.endif
  %min.iters.check8050 = icmp ult i64 %.84496833, 16
  br i1 %min.iters.check8050, label %B1243.preheader, label %vector.ph8051

B1243.preheader:                                  ; preds = %middle.block8047, %B1243.lr.ph
  %temp.2.251.2.06836.ph = phi i64 [ 1, %B1243.lr.ph ], [ %931, %middle.block8047 ]
  %.8414.06835.ph = phi i64 [ 0, %B1243.lr.ph ], [ %n.vec8053, %middle.block8047 ]
  br label %B1243

vector.ph8051:                                    ; preds = %B1243.lr.ph
  %n.vec8053 = and i64 %.84496833, -16
  br label %vector.body8049

vector.body8049:                                  ; preds = %vector.body8049, %vector.ph8051
  %index8054 = phi i64 [ 0, %vector.ph8051 ], [ %index.next8055, %vector.body8049 ]
  %vec.phi8058 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8051 ], [ %926, %vector.body8049 ]
  %vec.phi8059 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8051 ], [ %927, %vector.body8049 ]
  %vec.phi8060 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8051 ], [ %928, %vector.body8049 ]
  %vec.phi8061 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8051 ], [ %929, %vector.body8049 ]
  %sunkaddr11105 = mul i64 %index8054, 8
  %918 = bitcast { i64, i64, i8, i64 }* %.6.i218455386831 to i8*
  %sunkaddr11106 = getelementptr i8, i8* %918, i64 %sunkaddr11105
  %sunkaddr11107 = getelementptr i8, i8* %sunkaddr11106, i64 24
  %919 = bitcast i8* %sunkaddr11107 to <4 x i64>*
  %wide.load8062 = load <4 x i64>, <4 x i64>* %919, align 8
  %sunkaddr11108 = mul i64 %index8054, 8
  %920 = bitcast { i64, i64, i8, i64 }* %.6.i218455386831 to i8*
  %sunkaddr11109 = getelementptr i8, i8* %920, i64 %sunkaddr11108
  %sunkaddr11110 = getelementptr i8, i8* %sunkaddr11109, i64 56
  %921 = bitcast i8* %sunkaddr11110 to <4 x i64>*
  %wide.load8063 = load <4 x i64>, <4 x i64>* %921, align 8
  %sunkaddr11111 = mul i64 %index8054, 8
  %922 = bitcast { i64, i64, i8, i64 }* %.6.i218455386831 to i8*
  %sunkaddr11112 = getelementptr i8, i8* %922, i64 %sunkaddr11111
  %sunkaddr11113 = getelementptr i8, i8* %sunkaddr11112, i64 88
  %923 = bitcast i8* %sunkaddr11113 to <4 x i64>*
  %wide.load8064 = load <4 x i64>, <4 x i64>* %923, align 8
  %sunkaddr11114 = mul i64 %index8054, 8
  %924 = bitcast { i64, i64, i8, i64 }* %.6.i218455386831 to i8*
  %sunkaddr11115 = getelementptr i8, i8* %924, i64 %sunkaddr11114
  %sunkaddr11116 = getelementptr i8, i8* %sunkaddr11115, i64 120
  %925 = bitcast i8* %sunkaddr11116 to <4 x i64>*
  %wide.load8065 = load <4 x i64>, <4 x i64>* %925, align 8
  %926 = mul <4 x i64> %wide.load8062, %vec.phi8058
  %927 = mul <4 x i64> %wide.load8063, %vec.phi8059
  %928 = mul <4 x i64> %wide.load8064, %vec.phi8060
  %929 = mul <4 x i64> %wide.load8065, %vec.phi8061
  %index.next8055 = add i64 %index8054, 16
  %930 = icmp eq i64 %n.vec8053, %index.next8055
  br i1 %930, label %middle.block8047, label %vector.body8049, !llvm.loop !167

middle.block8047:                                 ; preds = %vector.body8049
  %bin.rdx8066 = mul <4 x i64> %927, %926
  %bin.rdx8067 = mul <4 x i64> %928, %bin.rdx8066
  %bin.rdx8068 = mul <4 x i64> %929, %bin.rdx8067
  %rdx.shuf10159 = shufflevector <4 x i64> %bin.rdx8068, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10160 = mul <4 x i64> %bin.rdx8068, %rdx.shuf10159
  %rdx.shuf10161 = shufflevector <4 x i64> %bin.rdx10160, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10162 = mul <4 x i64> %bin.rdx10160, %rdx.shuf10161
  %931 = extractelement <4 x i64> %bin.rdx10162, i32 0
  %cmp.n8057 = icmp eq i64 %.84496833, %n.vec8053
  br i1 %cmp.n8057, label %B1255, label %B1243.preheader

B1255.endif.endif.if:                             ; preds = %B1255
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1255.endif.endif.endif:                          ; preds = %B1255
  %.5.i2037 = getelementptr i8, i8* %.8520, i64 24
  %932 = bitcast i8* %.5.i2037 to { i64, i64, i8, i64 }**
  %.6.i20385539 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %932, align 8
  %.8533 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i20385539, i64 0, i32 1
  store i64 3, i64* %.8533, align 8
  %.6.i20365540 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %932, align 8
  %.853911117 = bitcast { i64, i64, i8, i64 }* %.6.i20365540 to i64*
  store i64 0, i64* %.853911117, align 8
  %.6.i20345541 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %932, align 8
  %.8545 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i20345541, i64 0, i32 2
  store i8 0, i8* %.8545, align 1
  %.6.i20305542 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %932, align 8
  %.8558 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i20305542, i64 0, i32 3
  %.8569 = bitcast i64* %.8558 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(24) %.8569, i8 0, i64 24, i1 false)
  %.6.i20265544 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %932, align 8
  %.858511118 = bitcast { i64, i64, i8, i64 }* %.6.i20265544 to i64*
  store i64 3, i64* %.858511118, align 8
  %.6.i20225545 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %932, align 8
  %.8598 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i20225545, i64 0, i32 3
  store i64 728, i64* %.8598, align 8
  %.6.i20185546 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %932, align 8
  %.8612 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i20185546, i64 0, i32 3
  %.8613 = getelementptr i64, i64* %.8612, i64 1
  store i64 763810927, i64* %.8613, align 8
  %.6.i20145547 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %932, align 8
  %.8626 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i20145547, i64 0, i32 3
  %.8627 = getelementptr i64, i64* %.8626, i64 2
  store i64 55700720745, i64* %.8627, align 8
  %.6.i11.i1942 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %932, align 8, !noalias !168
  %.4061.i194311119 = bitcast { i64, i64, i8, i64 }* %.6.i11.i1942 to i64*
  %.41.i1944 = load i64, i64* %.4061.i194311119, align 8, !noalias !168
  %.42.i1945 = icmp sgt i64 %.41.i1944, 0
  br i1 %.42.i1945, label %B0.endif.endif.endif.i1963, label %B0.endif.endif.endif.if.if, !prof !45

B24.i1956:                                        ; preds = %B24.i1956.preheader, %B24.i1956
  %return_val.2.025.i1946 = phi i64 [ %return_val.3.1.i1954, %B24.i1956 ], [ %return_val.2.025.i1946.ph, %B24.i1956.preheader ]
  %.14.024.i1947 = phi i64 [ %.129.i1952, %B24.i1956 ], [ %.14.024.i1947.ph, %B24.i1956.preheader ]
  %sunkaddr11120 = mul i64 %.14.024.i1947, 8
  %933 = bitcast { i64, i64, i8, i64 }* %.6.i11.i1942 to i8*
  %sunkaddr11121 = getelementptr i8, i8* %933, i64 %sunkaddr11120
  %sunkaddr11122 = getelementptr i8, i8* %sunkaddr11121, i64 24
  %934 = bitcast i8* %sunkaddr11122 to i64*
  %.126.i1951 = load i64, i64* %934, align 8, !noalias !168
  %.129.i1952 = add nuw nsw i64 %.14.024.i1947, 1
  %.6.i7.not.i1953 = icmp slt i64 %.126.i1951, %return_val.2.025.i1946
  %return_val.3.1.i1954 = select i1 %.6.i7.not.i1953, i64 %.126.i1951, i64 %return_val.2.025.i1946
  %exitcond.not.i1955 = icmp eq i64 %.41.i1944, %.129.i1952
  br i1 %exitcond.not.i1955, label %B1255.endif.endif.endif.endif, label %B24.i1956, !llvm.loop !46

B0.endif.endif.endif.i1963:                       ; preds = %B1255.endif.endif.endif
  %.50.i1960 = getelementptr { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11.i1942, i64 0, i32 3
  %.52.i1961 = load i64, i64* %.50.i1960, align 8, !noalias !168
  %.11623.not.i1962 = icmp eq i64 %.41.i1944, 1
  br i1 %.11623.not.i1962, label %B1255.endif.endif.endif.endif, label %B24.preheader.i1965

B24.preheader.i1965:                              ; preds = %B0.endif.endif.endif.i1963
  %935 = add nsw i64 %.41.i1944, -1
  %min.iters.check.i1964 = icmp ult i64 %935, 16
  br i1 %min.iters.check.i1964, label %B24.i1956.preheader, label %vector.ph.i1973

B24.i1956.preheader:                              ; preds = %middle.block.i2010, %B24.preheader.i1965
  %return_val.2.025.i1946.ph = phi i64 [ %953, %middle.block.i2010 ], [ %.52.i1961, %B24.preheader.i1965 ]
  %.14.024.i1947.ph = phi i64 [ %ind.end.i1970, %middle.block.i2010 ], [ 1, %B24.preheader.i1965 ]
  br label %B24.i1956

vector.ph.i1973:                                  ; preds = %B24.preheader.i1965
  %n.vec.i1969 = and i64 %935, -16
  %minmax.ident.splatinsert.i1971 = insertelement <4 x i64> undef, i64 %.52.i1961, i32 0
  %minmax.ident.splat.i1972 = shufflevector <4 x i64> %minmax.ident.splatinsert.i1971, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %vector.body.i1996

vector.body.i1996:                                ; preds = %vector.body.i1996, %vector.ph.i1973
  %index.i1974 = phi i64 [ 0, %vector.ph.i1973 ], [ %index.next.i1995, %vector.body.i1996 ]
  %vec.phi.i1975 = phi <4 x i64> [ %minmax.ident.splat.i1972, %vector.ph.i1973 ], [ %948, %vector.body.i1996 ]
  %vec.phi26.i1976 = phi <4 x i64> [ %minmax.ident.splat.i1972, %vector.ph.i1973 ], [ %949, %vector.body.i1996 ]
  %vec.phi27.i1977 = phi <4 x i64> [ %minmax.ident.splat.i1972, %vector.ph.i1973 ], [ %950, %vector.body.i1996 ]
  %vec.phi28.i1978 = phi <4 x i64> [ %minmax.ident.splat.i1972, %vector.ph.i1973 ], [ %951, %vector.body.i1996 ]
  %sunkaddr11123 = mul i64 %index.i1974, 8
  %936 = bitcast { i64, i64, i8, i64 }* %.6.i11.i1942 to i8*
  %sunkaddr11124 = getelementptr i8, i8* %936, i64 %sunkaddr11123
  %sunkaddr11125 = getelementptr i8, i8* %sunkaddr11124, i64 32
  %937 = bitcast i8* %sunkaddr11125 to <4 x i64>*
  %wide.load.i1982 = load <4 x i64>, <4 x i64>* %937, align 8, !noalias !168
  %sunkaddr11126 = mul i64 %index.i1974, 8
  %938 = bitcast { i64, i64, i8, i64 }* %.6.i11.i1942 to i8*
  %sunkaddr11127 = getelementptr i8, i8* %938, i64 %sunkaddr11126
  %sunkaddr11128 = getelementptr i8, i8* %sunkaddr11127, i64 64
  %939 = bitcast i8* %sunkaddr11128 to <4 x i64>*
  %wide.load29.i1986 = load <4 x i64>, <4 x i64>* %939, align 8, !noalias !168
  %sunkaddr11129 = mul i64 %index.i1974, 8
  %940 = bitcast { i64, i64, i8, i64 }* %.6.i11.i1942 to i8*
  %sunkaddr11130 = getelementptr i8, i8* %940, i64 %sunkaddr11129
  %sunkaddr11131 = getelementptr i8, i8* %sunkaddr11130, i64 96
  %941 = bitcast i8* %sunkaddr11131 to <4 x i64>*
  %wide.load30.i1990 = load <4 x i64>, <4 x i64>* %941, align 8, !noalias !168
  %sunkaddr11132 = mul i64 %index.i1974, 8
  %942 = bitcast { i64, i64, i8, i64 }* %.6.i11.i1942 to i8*
  %sunkaddr11133 = getelementptr i8, i8* %942, i64 %sunkaddr11132
  %sunkaddr11134 = getelementptr i8, i8* %sunkaddr11133, i64 128
  %943 = bitcast i8* %sunkaddr11134 to <4 x i64>*
  %wide.load31.i1994 = load <4 x i64>, <4 x i64>* %943, align 8, !noalias !168
  %944 = icmp slt <4 x i64> %wide.load.i1982, %vec.phi.i1975
  %945 = icmp slt <4 x i64> %wide.load29.i1986, %vec.phi26.i1976
  %946 = icmp slt <4 x i64> %wide.load30.i1990, %vec.phi27.i1977
  %947 = icmp slt <4 x i64> %wide.load31.i1994, %vec.phi28.i1978
  %948 = select <4 x i1> %944, <4 x i64> %wide.load.i1982, <4 x i64> %vec.phi.i1975
  %949 = select <4 x i1> %945, <4 x i64> %wide.load29.i1986, <4 x i64> %vec.phi26.i1976
  %950 = select <4 x i1> %946, <4 x i64> %wide.load30.i1990, <4 x i64> %vec.phi27.i1977
  %951 = select <4 x i1> %947, <4 x i64> %wide.load31.i1994, <4 x i64> %vec.phi28.i1978
  %index.next.i1995 = add i64 %index.i1974, 16
  %952 = icmp eq i64 %n.vec.i1969, %index.next.i1995
  br i1 %952, label %middle.block.i2010, label %vector.body.i1996, !llvm.loop !47

middle.block.i2010:                               ; preds = %vector.body.i1996
  %ind.end.i1970 = or i64 %n.vec.i1969, 1
  %rdx.minmax.cmp.i1997 = icmp slt <4 x i64> %948, %949
  %rdx.minmax.select.i1998 = select <4 x i1> %rdx.minmax.cmp.i1997, <4 x i64> %948, <4 x i64> %949
  %rdx.minmax.cmp32.i1999 = icmp slt <4 x i64> %rdx.minmax.select.i1998, %950
  %rdx.minmax.select33.i2000 = select <4 x i1> %rdx.minmax.cmp32.i1999, <4 x i64> %rdx.minmax.select.i1998, <4 x i64> %950
  %rdx.minmax.cmp34.i2001 = icmp slt <4 x i64> %rdx.minmax.select33.i2000, %951
  %rdx.minmax.select35.i2002 = select <4 x i1> %rdx.minmax.cmp34.i2001, <4 x i64> %rdx.minmax.select33.i2000, <4 x i64> %951
  %rdx.shuf.i2003 = shufflevector <4 x i64> %rdx.minmax.select35.i2002, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp56.i2004 = icmp slt <4 x i64> %rdx.minmax.select35.i2002, %rdx.shuf.i2003
  %rdx.minmax.select57.i2005 = select <4 x i1> %rdx.minmax.cmp56.i2004, <4 x i64> %rdx.minmax.select35.i2002, <4 x i64> %rdx.shuf.i2003
  %rdx.shuf58.i2006 = shufflevector <4 x i64> %rdx.minmax.select57.i2005, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp59.i2007 = icmp slt <4 x i64> %rdx.minmax.select57.i2005, %rdx.shuf58.i2006
  %rdx.minmax.select60.i2008 = select <4 x i1> %rdx.minmax.cmp59.i2007, <4 x i64> %rdx.minmax.select57.i2005, <4 x i64> %rdx.shuf58.i2006
  %953 = extractelement <4 x i64> %rdx.minmax.select60.i2008, i32 0
  %cmp.n.i2009 = icmp eq i64 %935, %n.vec.i1969
  br i1 %cmp.n.i2009, label %B1255.endif.endif.endif.endif, label %B24.i1956.preheader

B1255.endif.endif.endif.endif:                    ; preds = %B24.i1956, %middle.block.i2010, %B0.endif.endif.endif.i1963
  %.8630.0.ph = phi i64 [ %953, %middle.block.i2010 ], [ %.52.i1961, %B0.endif.endif.endif.i1963 ], [ %return_val.3.1.i1954, %B24.i1956 ]
  tail call void @NRT_decref(i8* nonnull %.8520)
  %.8687 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 40, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.8688 = icmp eq i8* %.8687, null
  br i1 %.8688, label %B1282.endif.endif.if, label %B1282.endif.endif.endif, !prof !3

B1282.endif.endif.if:                             ; preds = %B1255.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1282.endif.endif.endif:                          ; preds = %B1255.endif.endif.endif.endif
  %.5.i1937 = getelementptr i8, i8* %.8687, i64 24
  %954 = bitcast i8* %.5.i1937 to { i64, i64, i8, i64 }**
  %.6.i19385548 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %954, align 8
  %.8700 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i19385548, i64 0, i32 1
  store i64 2, i64* %.8700, align 8
  %.6.i19365549 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %954, align 8
  %.870611135 = bitcast { i64, i64, i8, i64 }* %.6.i19365549 to i64*
  store i64 0, i64* %.870611135, align 8
  %.6.i19345550 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %954, align 8
  %.8712 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i19345550, i64 0, i32 2
  store i8 0, i8* %.8712, align 1
  %.6.i19305551 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %954, align 8
  %.8725 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i19305551, i64 0, i32 3
  %.8736 = bitcast i64* %.8725 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %.8736, i8 0, i64 16, i1 false)
  %.6.i19265553 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %954, align 8
  %.875211136 = bitcast { i64, i64, i8, i64 }* %.6.i19265553 to i64*
  store i64 2, i64* %.875211136, align 8
  %.6.i19225554 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %954, align 8
  %.8765 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i19225554, i64 0, i32 3
  store i64 1, i64* %.8765, align 8
  %.6.i19185555 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %954, align 8
  %.8779 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i19185555, i64 0, i32 3
  %.8780 = getelementptr i64, i64* %.8779, i64 1
  store i64 289600, i64* %.8780, align 8
  %.6.i226855566823 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %954, align 8
  %.8831682411137 = bitcast { i64, i64, i8, i64 }* %.6.i226855566823 to i64*
  %.88326825 = load i64, i64* %.8831682411137, align 8
  %.88336826 = icmp sgt i64 %.88326825, 0
  br i1 %.88336826, label %B1297.lr.ph, label %B1309

B1297.lr.ph:                                      ; preds = %B1282.endif.endif.endif
  %min.iters.check8073 = icmp ult i64 %.88326825, 16
  br i1 %min.iters.check8073, label %B1297.preheader, label %vector.ph8074

B1297.preheader:                                  ; preds = %middle.block8070, %B1297.lr.ph
  %temp.2.215.2.06828.ph = phi i64 [ 1, %B1297.lr.ph ], [ %968, %middle.block8070 ]
  %.8797.06827.ph = phi i64 [ 0, %B1297.lr.ph ], [ %n.vec8076, %middle.block8070 ]
  br label %B1297

vector.ph8074:                                    ; preds = %B1297.lr.ph
  %n.vec8076 = and i64 %.88326825, -16
  br label %vector.body8072

vector.body8072:                                  ; preds = %vector.body8072, %vector.ph8074
  %index8077 = phi i64 [ 0, %vector.ph8074 ], [ %index.next8078, %vector.body8072 ]
  %vec.phi8081 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8074 ], [ %963, %vector.body8072 ]
  %vec.phi8082 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8074 ], [ %964, %vector.body8072 ]
  %vec.phi8083 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8074 ], [ %965, %vector.body8072 ]
  %vec.phi8084 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8074 ], [ %966, %vector.body8072 ]
  %sunkaddr11138 = mul i64 %index8077, 8
  %955 = bitcast { i64, i64, i8, i64 }* %.6.i226855566823 to i8*
  %sunkaddr11139 = getelementptr i8, i8* %955, i64 %sunkaddr11138
  %sunkaddr11140 = getelementptr i8, i8* %sunkaddr11139, i64 24
  %956 = bitcast i8* %sunkaddr11140 to <4 x i64>*
  %wide.load8085 = load <4 x i64>, <4 x i64>* %956, align 8
  %sunkaddr11141 = mul i64 %index8077, 8
  %957 = bitcast { i64, i64, i8, i64 }* %.6.i226855566823 to i8*
  %sunkaddr11142 = getelementptr i8, i8* %957, i64 %sunkaddr11141
  %sunkaddr11143 = getelementptr i8, i8* %sunkaddr11142, i64 56
  %958 = bitcast i8* %sunkaddr11143 to <4 x i64>*
  %wide.load8086 = load <4 x i64>, <4 x i64>* %958, align 8
  %sunkaddr11144 = mul i64 %index8077, 8
  %959 = bitcast { i64, i64, i8, i64 }* %.6.i226855566823 to i8*
  %sunkaddr11145 = getelementptr i8, i8* %959, i64 %sunkaddr11144
  %sunkaddr11146 = getelementptr i8, i8* %sunkaddr11145, i64 88
  %960 = bitcast i8* %sunkaddr11146 to <4 x i64>*
  %wide.load8087 = load <4 x i64>, <4 x i64>* %960, align 8
  %sunkaddr11147 = mul i64 %index8077, 8
  %961 = bitcast { i64, i64, i8, i64 }* %.6.i226855566823 to i8*
  %sunkaddr11148 = getelementptr i8, i8* %961, i64 %sunkaddr11147
  %sunkaddr11149 = getelementptr i8, i8* %sunkaddr11148, i64 120
  %962 = bitcast i8* %sunkaddr11149 to <4 x i64>*
  %wide.load8088 = load <4 x i64>, <4 x i64>* %962, align 8
  %963 = mul <4 x i64> %wide.load8085, %vec.phi8081
  %964 = mul <4 x i64> %wide.load8086, %vec.phi8082
  %965 = mul <4 x i64> %wide.load8087, %vec.phi8083
  %966 = mul <4 x i64> %wide.load8088, %vec.phi8084
  %index.next8078 = add i64 %index8077, 16
  %967 = icmp eq i64 %n.vec8076, %index.next8078
  br i1 %967, label %middle.block8070, label %vector.body8072, !llvm.loop !172

middle.block8070:                                 ; preds = %vector.body8072
  %bin.rdx8089 = mul <4 x i64> %964, %963
  %bin.rdx8090 = mul <4 x i64> %965, %bin.rdx8089
  %bin.rdx8091 = mul <4 x i64> %966, %bin.rdx8090
  %rdx.shuf10163 = shufflevector <4 x i64> %bin.rdx8091, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10164 = mul <4 x i64> %bin.rdx8091, %rdx.shuf10163
  %rdx.shuf10165 = shufflevector <4 x i64> %bin.rdx10164, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10166 = mul <4 x i64> %bin.rdx10164, %rdx.shuf10165
  %968 = extractelement <4 x i64> %bin.rdx10166, i32 0
  %cmp.n8080 = icmp eq i64 %.88326825, %n.vec8076
  br i1 %cmp.n8080, label %B1309, label %B1297.preheader

B1309.endif.endif.if:                             ; preds = %B1309
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1309.endif.endif.endif:                          ; preds = %B1309
  %.5.i1913 = getelementptr i8, i8* %.8906, i64 24
  %969 = bitcast i8* %.5.i1913 to { i64, i64, i8, i64 }**
  %.6.i19145557 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %969, align 8
  %.8919 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i19145557, i64 0, i32 1
  store i64 5, i64* %.8919, align 8
  %.6.i19125558 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %969, align 8
  %.892511150 = bitcast { i64, i64, i8, i64 }* %.6.i19125558 to i64*
  store i64 0, i64* %.892511150, align 8
  %.6.i19105559 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %969, align 8
  %.8931 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i19105559, i64 0, i32 2
  store i8 0, i8* %.8931, align 1
  %.6.i19065560 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %969, align 8
  %.8944 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i19065560, i64 0, i32 3
  %.8955 = bitcast i64* %.8944 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(40) %.8955, i8 0, i64 40, i1 false)
  %.6.i19025562 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %969, align 8
  %.897111151 = bitcast { i64, i64, i8, i64 }* %.6.i19025562 to i64*
  store i64 5, i64* %.897111151, align 8
  %.6.i18985563 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %969, align 8
  %.8984 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i18985563, i64 0, i32 3
  store i64 230, i64* %.8984, align 8
  %.6.i18945564 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %969, align 8
  %.8998 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i18945564, i64 0, i32 3
  %.8999 = getelementptr i64, i64* %.8998, i64 1
  store i64 92, i64* %.8999, align 8
  %.6.i18905565 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %969, align 8
  %.9012 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i18905565, i64 0, i32 3
  %.9013 = getelementptr i64, i64* %.9012, i64 2
  store i64 120, i64* %.9013, align 8
  %.6.i18865566 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %969, align 8
  %.9026 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i18865566, i64 0, i32 3
  %.9027 = getelementptr i64, i64* %.9026, i64 3
  store i64 220, i64* %.9027, align 8
  %.6.i18825567 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %969, align 8
  %.9040 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i18825567, i64 0, i32 3
  %.9041 = getelementptr i64, i64* %.9040, i64 4
  store i64 159, i64* %.9041, align 8
  %.6.i240055686815 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %969, align 8
  %.9090681611152 = bitcast { i64, i64, i8, i64 }* %.6.i240055686815 to i64*
  %.90916817 = load i64, i64* %.9090681611152, align 8
  %.90926818 = icmp sgt i64 %.90916817, 0
  br i1 %.90926818, label %B1324.lr.ph, label %B1336

B1324.lr.ph:                                      ; preds = %B1309.endif.endif.endif
  %min.iters.check8096 = icmp ult i64 %.90916817, 16
  br i1 %min.iters.check8096, label %B1324.preheader, label %vector.ph8097

B1324.preheader:                                  ; preds = %middle.block8093, %B1324.lr.ph
  %temp.2.233.2.06820.ph = phi i64 [ 1, %B1324.lr.ph ], [ %983, %middle.block8093 ]
  %.9056.06819.ph = phi i64 [ 0, %B1324.lr.ph ], [ %n.vec8099, %middle.block8093 ]
  br label %B1324

vector.ph8097:                                    ; preds = %B1324.lr.ph
  %n.vec8099 = and i64 %.90916817, -16
  br label %vector.body8095

vector.body8095:                                  ; preds = %vector.body8095, %vector.ph8097
  %index8100 = phi i64 [ 0, %vector.ph8097 ], [ %index.next8101, %vector.body8095 ]
  %vec.phi8104 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8097 ], [ %978, %vector.body8095 ]
  %vec.phi8105 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8097 ], [ %979, %vector.body8095 ]
  %vec.phi8106 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8097 ], [ %980, %vector.body8095 ]
  %vec.phi8107 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8097 ], [ %981, %vector.body8095 ]
  %sunkaddr11153 = mul i64 %index8100, 8
  %970 = bitcast { i64, i64, i8, i64 }* %.6.i240055686815 to i8*
  %sunkaddr11154 = getelementptr i8, i8* %970, i64 %sunkaddr11153
  %sunkaddr11155 = getelementptr i8, i8* %sunkaddr11154, i64 24
  %971 = bitcast i8* %sunkaddr11155 to <4 x i64>*
  %wide.load8108 = load <4 x i64>, <4 x i64>* %971, align 8
  %sunkaddr11156 = mul i64 %index8100, 8
  %972 = bitcast { i64, i64, i8, i64 }* %.6.i240055686815 to i8*
  %sunkaddr11157 = getelementptr i8, i8* %972, i64 %sunkaddr11156
  %sunkaddr11158 = getelementptr i8, i8* %sunkaddr11157, i64 56
  %973 = bitcast i8* %sunkaddr11158 to <4 x i64>*
  %wide.load8109 = load <4 x i64>, <4 x i64>* %973, align 8
  %sunkaddr11159 = mul i64 %index8100, 8
  %974 = bitcast { i64, i64, i8, i64 }* %.6.i240055686815 to i8*
  %sunkaddr11160 = getelementptr i8, i8* %974, i64 %sunkaddr11159
  %sunkaddr11161 = getelementptr i8, i8* %sunkaddr11160, i64 88
  %975 = bitcast i8* %sunkaddr11161 to <4 x i64>*
  %wide.load8110 = load <4 x i64>, <4 x i64>* %975, align 8
  %sunkaddr11162 = mul i64 %index8100, 8
  %976 = bitcast { i64, i64, i8, i64 }* %.6.i240055686815 to i8*
  %sunkaddr11163 = getelementptr i8, i8* %976, i64 %sunkaddr11162
  %sunkaddr11164 = getelementptr i8, i8* %sunkaddr11163, i64 120
  %977 = bitcast i8* %sunkaddr11164 to <4 x i64>*
  %wide.load8111 = load <4 x i64>, <4 x i64>* %977, align 8
  %978 = mul <4 x i64> %wide.load8108, %vec.phi8104
  %979 = mul <4 x i64> %wide.load8109, %vec.phi8105
  %980 = mul <4 x i64> %wide.load8110, %vec.phi8106
  %981 = mul <4 x i64> %wide.load8111, %vec.phi8107
  %index.next8101 = add i64 %index8100, 16
  %982 = icmp eq i64 %n.vec8099, %index.next8101
  br i1 %982, label %middle.block8093, label %vector.body8095, !llvm.loop !173

middle.block8093:                                 ; preds = %vector.body8095
  %bin.rdx8112 = mul <4 x i64> %979, %978
  %bin.rdx8113 = mul <4 x i64> %980, %bin.rdx8112
  %bin.rdx8114 = mul <4 x i64> %981, %bin.rdx8113
  %rdx.shuf10167 = shufflevector <4 x i64> %bin.rdx8114, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10168 = mul <4 x i64> %bin.rdx8114, %rdx.shuf10167
  %rdx.shuf10169 = shufflevector <4 x i64> %bin.rdx10168, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10170 = mul <4 x i64> %bin.rdx10168, %rdx.shuf10169
  %983 = extractelement <4 x i64> %bin.rdx10170, i32 0
  %cmp.n8103 = icmp eq i64 %.90916817, %n.vec8099
  br i1 %cmp.n8103, label %B1336, label %B1324.preheader

B1336.endif.endif.if:                             ; preds = %B1336
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1336.endif.endif.endif:                          ; preds = %B1336
  %.5.i1877 = getelementptr i8, i8* %.9162, i64 24
  %984 = bitcast i8* %.5.i1877 to { i64, i64, i8, i64 }**
  %.6.i18785569 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %984, align 8
  %.9175 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i18785569, i64 0, i32 1
  store i64 3, i64* %.9175, align 8
  %.6.i18765570 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %984, align 8
  %.918111165 = bitcast { i64, i64, i8, i64 }* %.6.i18765570 to i64*
  store i64 0, i64* %.918111165, align 8
  %.6.i18745571 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %984, align 8
  %.9187 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i18745571, i64 0, i32 2
  store i8 0, i8* %.9187, align 1
  %.6.i18705572 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %984, align 8
  %.9200 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i18705572, i64 0, i32 3
  %.9211 = bitcast i64* %.9200 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(24) %.9211, i8 0, i64 24, i1 false)
  %.6.i18665574 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %984, align 8
  %.922711166 = bitcast { i64, i64, i8, i64 }* %.6.i18665574 to i64*
  store i64 3, i64* %.922711166, align 8
  %.6.i18625575 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %984, align 8
  %.9240 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i18625575, i64 0, i32 3
  store i64 11, i64* %.9240, align 8
  %.6.i18585576 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %984, align 8
  %.9254 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i18585576, i64 0, i32 3
  %.9255 = getelementptr i64, i64* %.9254, i64 1
  store i64 5, i64* %.9255, align 8
  %.6.i18545577 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %984, align 8
  %.9268 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i18545577, i64 0, i32 3
  %.9269 = getelementptr i64, i64* %.9268, i64 2
  store i64 11, i64* %.9269, align 8
  %.6.i3.i1798 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %984, align 8, !noalias !174
  %.5342.i179911167 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1798 to i64*
  %.548.i1800 = load i64, i64* %.5342.i179911167, align 8, !noalias !174
  %.559.i1801 = icmp sgt i64 %.548.i1800, 0
  br i1 %.559.i1801, label %B14.endif.lr.ph.i1803, label %B1336.endif.endif.endif.endif

B14.endif.lr.ph.i1803:                            ; preds = %B1336.endif.endif.endif
  %min.iters.check.i1802 = icmp ult i64 %.548.i1800, 16
  br i1 %min.iters.check.i1802, label %B14.endif.preheader.i1806, label %vector.ph.i1808

B14.endif.preheader.i1806:                        ; preds = %middle.block.i1840, %B14.endif.lr.ph.i1803
  %acc.2.011.ph.i1804 = phi i64 [ 0, %B14.endif.lr.ph.i1803 ], [ %998, %middle.block.i1840 ]
  %.17.010.ph.i1805 = phi i64 [ 0, %B14.endif.lr.ph.i1803 ], [ %n.vec.i1807, %middle.block.i1840 ]
  br label %B14.endif.i1851

vector.ph.i1808:                                  ; preds = %B14.endif.lr.ph.i1803
  %n.vec.i1807 = and i64 %.548.i1800, -16
  br label %vector.body.i1831

vector.body.i1831:                                ; preds = %vector.body.i1831, %vector.ph.i1808
  %index.i1809 = phi i64 [ 0, %vector.ph.i1808 ], [ %index.next.i1830, %vector.body.i1831 ]
  %vec.phi.i1810 = phi <4 x i64> [ zeroinitializer, %vector.ph.i1808 ], [ %993, %vector.body.i1831 ]
  %vec.phi12.i1811 = phi <4 x i64> [ zeroinitializer, %vector.ph.i1808 ], [ %994, %vector.body.i1831 ]
  %vec.phi13.i1812 = phi <4 x i64> [ zeroinitializer, %vector.ph.i1808 ], [ %995, %vector.body.i1831 ]
  %vec.phi14.i1813 = phi <4 x i64> [ zeroinitializer, %vector.ph.i1808 ], [ %996, %vector.body.i1831 ]
  %sunkaddr11168 = mul i64 %index.i1809, 8
  %985 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1798 to i8*
  %sunkaddr11169 = getelementptr i8, i8* %985, i64 %sunkaddr11168
  %sunkaddr11170 = getelementptr i8, i8* %sunkaddr11169, i64 24
  %986 = bitcast i8* %sunkaddr11170 to <4 x i64>*
  %wide.load.i1817 = load <4 x i64>, <4 x i64>* %986, align 8, !noalias !174
  %sunkaddr11171 = mul i64 %index.i1809, 8
  %987 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1798 to i8*
  %sunkaddr11172 = getelementptr i8, i8* %987, i64 %sunkaddr11171
  %sunkaddr11173 = getelementptr i8, i8* %sunkaddr11172, i64 56
  %988 = bitcast i8* %sunkaddr11173 to <4 x i64>*
  %wide.load15.i1821 = load <4 x i64>, <4 x i64>* %988, align 8, !noalias !174
  %sunkaddr11174 = mul i64 %index.i1809, 8
  %989 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1798 to i8*
  %sunkaddr11175 = getelementptr i8, i8* %989, i64 %sunkaddr11174
  %sunkaddr11176 = getelementptr i8, i8* %sunkaddr11175, i64 88
  %990 = bitcast i8* %sunkaddr11176 to <4 x i64>*
  %wide.load16.i1825 = load <4 x i64>, <4 x i64>* %990, align 8, !noalias !174
  %sunkaddr11177 = mul i64 %index.i1809, 8
  %991 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1798 to i8*
  %sunkaddr11178 = getelementptr i8, i8* %991, i64 %sunkaddr11177
  %sunkaddr11179 = getelementptr i8, i8* %sunkaddr11178, i64 120
  %992 = bitcast i8* %sunkaddr11179 to <4 x i64>*
  %wide.load17.i1829 = load <4 x i64>, <4 x i64>* %992, align 8, !noalias !174
  %993 = add <4 x i64> %wide.load.i1817, %vec.phi.i1810
  %994 = add <4 x i64> %wide.load15.i1821, %vec.phi12.i1811
  %995 = add <4 x i64> %wide.load16.i1825, %vec.phi13.i1812
  %996 = add <4 x i64> %wide.load17.i1829, %vec.phi14.i1813
  %index.next.i1830 = add i64 %index.i1809, 16
  %997 = icmp eq i64 %n.vec.i1807, %index.next.i1830
  br i1 %997, label %middle.block.i1840, label %vector.body.i1831, !llvm.loop !51

middle.block.i1840:                               ; preds = %vector.body.i1831
  %bin.rdx.i1832 = add <4 x i64> %994, %993
  %bin.rdx18.i1833 = add <4 x i64> %bin.rdx.i1832, %995
  %bin.rdx19.i1834 = add <4 x i64> %bin.rdx18.i1833, %996
  %rdx.shuf.i1835 = shufflevector <4 x i64> %bin.rdx19.i1834, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx39.i1836 = add <4 x i64> %rdx.shuf.i1835, %bin.rdx19.i1834
  %rdx.shuf40.i1837 = shufflevector <4 x i64> %bin.rdx39.i1836, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx41.i1838 = add <4 x i64> %rdx.shuf40.i1837, %bin.rdx39.i1836
  %998 = extractelement <4 x i64> %bin.rdx41.i1838, i32 0
  %cmp.n.i1839 = icmp eq i64 %.548.i1800, %n.vec.i1807
  br i1 %cmp.n.i1839, label %B1336.endif.endif.endif.endif, label %B14.endif.preheader.i1806

B14.endif.i1851:                                  ; preds = %B14.endif.i1851, %B14.endif.preheader.i1806
  %acc.2.011.i1842 = phi i64 [ %.94.i1849, %B14.endif.i1851 ], [ %acc.2.011.ph.i1804, %B14.endif.preheader.i1806 ]
  %.17.010.i1843 = phi i64 [ %.68.i1848, %B14.endif.i1851 ], [ %.17.010.ph.i1805, %B14.endif.preheader.i1806 ]
  %sunkaddr11180 = mul i64 %.17.010.i1843, 8
  %999 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1798 to i8*
  %sunkaddr11181 = getelementptr i8, i8* %999, i64 %sunkaddr11180
  %sunkaddr11182 = getelementptr i8, i8* %sunkaddr11181, i64 24
  %1000 = bitcast i8* %sunkaddr11182 to i64*
  %.65.i1847 = load i64, i64* %1000, align 8, !noalias !174
  %.68.i1848 = add nuw nsw i64 %.17.010.i1843, 1
  %.94.i1849 = add nsw i64 %.65.i1847, %acc.2.011.i1842
  %exitcond.not.i1850 = icmp eq i64 %.548.i1800, %.68.i1848
  br i1 %exitcond.not.i1850, label %B1336.endif.endif.endif.endif, label %B14.endif.i1851, !llvm.loop !52

B1336.endif.endif.endif.endif:                    ; preds = %B14.endif.i1851, %middle.block.i1840, %B1336.endif.endif.endif
  %acc.2.0.lcssa.i1841 = phi i64 [ 0, %B1336.endif.endif.endif ], [ %998, %middle.block.i1840 ], [ %.94.i1849, %B14.endif.i1851 ]
  tail call void @NRT_decref(i8* nonnull %.9162)
  %.9316 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 48, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.9317 = icmp eq i8* %.9316, null
  br i1 %.9317, label %B1336.endif.endif.endif.endif.endif.endif.if, label %B1336.endif.endif.endif.endif.endif.endif.endif, !prof !3

B1336.endif.endif.endif.endif.endif.endif.if:     ; preds = %B1336.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1336.endif.endif.endif.endif.endif.endif.endif:  ; preds = %B1336.endif.endif.endif.endif
  %.5.i1793 = getelementptr i8, i8* %.9316, i64 24
  %1001 = bitcast i8* %.5.i1793 to { i64, i64, i8, i64 }**
  %.6.i17945578 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1001, align 8
  %.9329 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i17945578, i64 0, i32 1
  store i64 3, i64* %.9329, align 8
  %.6.i17925579 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1001, align 8
  %.933511183 = bitcast { i64, i64, i8, i64 }* %.6.i17925579 to i64*
  store i64 0, i64* %.933511183, align 8
  %.6.i17905580 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1001, align 8
  %.9341 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i17905580, i64 0, i32 2
  store i8 0, i8* %.9341, align 1
  %.6.i17865581 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1001, align 8
  %.9354 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i17865581, i64 0, i32 3
  %.9365 = bitcast i64* %.9354 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(24) %.9365, i8 0, i64 24, i1 false)
  %.6.i17825583 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1001, align 8
  %.938111184 = bitcast { i64, i64, i8, i64 }* %.6.i17825583 to i64*
  store i64 3, i64* %.938111184, align 8
  %.6.i17785584 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1001, align 8
  %.9394 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i17785584, i64 0, i32 3
  store i64 15, i64* %.9394, align 8
  %.6.i17745585 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1001, align 8
  %.9408 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i17745585, i64 0, i32 3
  %.9409 = getelementptr i64, i64* %.9408, i64 1
  store i64 14, i64* %.9409, align 8
  %.6.i17705586 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1001, align 8
  %.9422 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i17705586, i64 0, i32 3
  %.9423 = getelementptr i64, i64* %.9422, i64 2
  store i64 10, i64* %.9423, align 8
  %.6.i3.i1714 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1001, align 8, !noalias !177
  %.5342.i171511185 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1714 to i64*
  %.548.i1716 = load i64, i64* %.5342.i171511185, align 8, !noalias !177
  %.559.i1717 = icmp sgt i64 %.548.i1716, 0
  br i1 %.559.i1717, label %B14.endif.lr.ph.i1719, label %B1336.endif.endif.endif.endif.endif.endif.endif.endif

B14.endif.lr.ph.i1719:                            ; preds = %B1336.endif.endif.endif.endif.endif.endif.endif
  %min.iters.check.i1718 = icmp ult i64 %.548.i1716, 16
  br i1 %min.iters.check.i1718, label %B14.endif.preheader.i1722, label %vector.ph.i1724

B14.endif.preheader.i1722:                        ; preds = %middle.block.i1756, %B14.endif.lr.ph.i1719
  %acc.2.011.ph.i1720 = phi i64 [ 0, %B14.endif.lr.ph.i1719 ], [ %1015, %middle.block.i1756 ]
  %.17.010.ph.i1721 = phi i64 [ 0, %B14.endif.lr.ph.i1719 ], [ %n.vec.i1723, %middle.block.i1756 ]
  br label %B14.endif.i1767

vector.ph.i1724:                                  ; preds = %B14.endif.lr.ph.i1719
  %n.vec.i1723 = and i64 %.548.i1716, -16
  br label %vector.body.i1747

vector.body.i1747:                                ; preds = %vector.body.i1747, %vector.ph.i1724
  %index.i1725 = phi i64 [ 0, %vector.ph.i1724 ], [ %index.next.i1746, %vector.body.i1747 ]
  %vec.phi.i1726 = phi <4 x i64> [ zeroinitializer, %vector.ph.i1724 ], [ %1010, %vector.body.i1747 ]
  %vec.phi12.i1727 = phi <4 x i64> [ zeroinitializer, %vector.ph.i1724 ], [ %1011, %vector.body.i1747 ]
  %vec.phi13.i1728 = phi <4 x i64> [ zeroinitializer, %vector.ph.i1724 ], [ %1012, %vector.body.i1747 ]
  %vec.phi14.i1729 = phi <4 x i64> [ zeroinitializer, %vector.ph.i1724 ], [ %1013, %vector.body.i1747 ]
  %sunkaddr11186 = mul i64 %index.i1725, 8
  %1002 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1714 to i8*
  %sunkaddr11187 = getelementptr i8, i8* %1002, i64 %sunkaddr11186
  %sunkaddr11188 = getelementptr i8, i8* %sunkaddr11187, i64 24
  %1003 = bitcast i8* %sunkaddr11188 to <4 x i64>*
  %wide.load.i1733 = load <4 x i64>, <4 x i64>* %1003, align 8, !noalias !177
  %sunkaddr11189 = mul i64 %index.i1725, 8
  %1004 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1714 to i8*
  %sunkaddr11190 = getelementptr i8, i8* %1004, i64 %sunkaddr11189
  %sunkaddr11191 = getelementptr i8, i8* %sunkaddr11190, i64 56
  %1005 = bitcast i8* %sunkaddr11191 to <4 x i64>*
  %wide.load15.i1737 = load <4 x i64>, <4 x i64>* %1005, align 8, !noalias !177
  %sunkaddr11192 = mul i64 %index.i1725, 8
  %1006 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1714 to i8*
  %sunkaddr11193 = getelementptr i8, i8* %1006, i64 %sunkaddr11192
  %sunkaddr11194 = getelementptr i8, i8* %sunkaddr11193, i64 88
  %1007 = bitcast i8* %sunkaddr11194 to <4 x i64>*
  %wide.load16.i1741 = load <4 x i64>, <4 x i64>* %1007, align 8, !noalias !177
  %sunkaddr11195 = mul i64 %index.i1725, 8
  %1008 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1714 to i8*
  %sunkaddr11196 = getelementptr i8, i8* %1008, i64 %sunkaddr11195
  %sunkaddr11197 = getelementptr i8, i8* %sunkaddr11196, i64 120
  %1009 = bitcast i8* %sunkaddr11197 to <4 x i64>*
  %wide.load17.i1745 = load <4 x i64>, <4 x i64>* %1009, align 8, !noalias !177
  %1010 = add <4 x i64> %wide.load.i1733, %vec.phi.i1726
  %1011 = add <4 x i64> %wide.load15.i1737, %vec.phi12.i1727
  %1012 = add <4 x i64> %wide.load16.i1741, %vec.phi13.i1728
  %1013 = add <4 x i64> %wide.load17.i1745, %vec.phi14.i1729
  %index.next.i1746 = add i64 %index.i1725, 16
  %1014 = icmp eq i64 %n.vec.i1723, %index.next.i1746
  br i1 %1014, label %middle.block.i1756, label %vector.body.i1747, !llvm.loop !51

middle.block.i1756:                               ; preds = %vector.body.i1747
  %bin.rdx.i1748 = add <4 x i64> %1011, %1010
  %bin.rdx18.i1749 = add <4 x i64> %bin.rdx.i1748, %1012
  %bin.rdx19.i1750 = add <4 x i64> %bin.rdx18.i1749, %1013
  %rdx.shuf.i1751 = shufflevector <4 x i64> %bin.rdx19.i1750, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx39.i1752 = add <4 x i64> %rdx.shuf.i1751, %bin.rdx19.i1750
  %rdx.shuf40.i1753 = shufflevector <4 x i64> %bin.rdx39.i1752, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx41.i1754 = add <4 x i64> %rdx.shuf40.i1753, %bin.rdx39.i1752
  %1015 = extractelement <4 x i64> %bin.rdx41.i1754, i32 0
  %cmp.n.i1755 = icmp eq i64 %.548.i1716, %n.vec.i1723
  br i1 %cmp.n.i1755, label %B1336.endif.endif.endif.endif.endif.endif.endif.endif, label %B14.endif.preheader.i1722

B14.endif.i1767:                                  ; preds = %B14.endif.i1767, %B14.endif.preheader.i1722
  %acc.2.011.i1758 = phi i64 [ %.94.i1765, %B14.endif.i1767 ], [ %acc.2.011.ph.i1720, %B14.endif.preheader.i1722 ]
  %.17.010.i1759 = phi i64 [ %.68.i1764, %B14.endif.i1767 ], [ %.17.010.ph.i1721, %B14.endif.preheader.i1722 ]
  %sunkaddr11198 = mul i64 %.17.010.i1759, 8
  %1016 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1714 to i8*
  %sunkaddr11199 = getelementptr i8, i8* %1016, i64 %sunkaddr11198
  %sunkaddr11200 = getelementptr i8, i8* %sunkaddr11199, i64 24
  %1017 = bitcast i8* %sunkaddr11200 to i64*
  %.65.i1763 = load i64, i64* %1017, align 8, !noalias !177
  %.68.i1764 = add nuw nsw i64 %.17.010.i1759, 1
  %.94.i1765 = add nsw i64 %.65.i1763, %acc.2.011.i1758
  %exitcond.not.i1766 = icmp eq i64 %.548.i1716, %.68.i1764
  br i1 %exitcond.not.i1766, label %B1336.endif.endif.endif.endif.endif.endif.endif.endif, label %B14.endif.i1767, !llvm.loop !52

B1336.endif.endif.endif.endif.endif.endif.endif.endif: ; preds = %B14.endif.i1767, %middle.block.i1756, %B1336.endif.endif.endif.endif.endif.endif.endif
  %acc.2.0.lcssa.i1757 = phi i64 [ 0, %B1336.endif.endif.endif.endif.endif.endif.endif ], [ %1015, %middle.block.i1756 ], [ %.94.i1765, %B14.endif.i1767 ]
  tail call void @NRT_decref(i8* nonnull %.9316)
  %.9489 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 40, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.9490 = icmp eq i8* %.9489, null
  br i1 %.9490, label %B1363.endif.endif.if, label %B1363.endif.endif.endif, !prof !3

B1363.endif.endif.if:                             ; preds = %B1336.endif.endif.endif.endif.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1363.endif.endif.endif:                          ; preds = %B1336.endif.endif.endif.endif.endif.endif.endif.endif
  %.9451 = icmp eq i64 %acc.2.0.lcssa.i1841, %acc.2.0.lcssa.i1757
  %"$phi618.29.2.0" = zext i1 %.9451 to i64
  %.5.i1709 = getelementptr i8, i8* %.9489, i64 24
  %1018 = bitcast i8* %.5.i1709 to { i64, i64, i8, i64 }**
  %.6.i17105587 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1018, align 8
  %.9502 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i17105587, i64 0, i32 1
  store i64 2, i64* %.9502, align 8
  %.6.i17085588 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1018, align 8
  %.950811201 = bitcast { i64, i64, i8, i64 }* %.6.i17085588 to i64*
  store i64 0, i64* %.950811201, align 8
  %.6.i17065589 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1018, align 8
  %.9514 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i17065589, i64 0, i32 2
  store i8 0, i8* %.9514, align 1
  %.6.i17025590 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1018, align 8
  %.9527 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i17025590, i64 0, i32 3
  %.9538 = bitcast i64* %.9527 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %.9538, i8 0, i64 16, i1 false)
  %.6.i16985592 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1018, align 8
  %.955411202 = bitcast { i64, i64, i8, i64 }* %.6.i16985592 to i64*
  store i64 2, i64* %.955411202, align 8
  %.6.i16945593 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1018, align 8
  %.9567 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i16945593, i64 0, i32 3
  store i64 %"$phi618.29.2.0", i64* %.9567, align 8
  %.6.i16905594 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1018, align 8
  %.9581 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i16905594, i64 0, i32 3
  %.9582 = getelementptr i64, i64* %.9581, i64 1
  store i64 49769, i64* %.9582, align 8
  %.6.i252855956807 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1018, align 8
  %.9633680811203 = bitcast { i64, i64, i8, i64 }* %.6.i252855956807 to i64*
  %.96346809 = load i64, i64* %.9633680811203, align 8
  %.96356810 = icmp sgt i64 %.96346809, 0
  br i1 %.96356810, label %B1378.lr.ph, label %B1390

B1378.lr.ph:                                      ; preds = %B1363.endif.endif.endif
  %min.iters.check8119 = icmp ult i64 %.96346809, 16
  br i1 %min.iters.check8119, label %B1378.preheader, label %vector.ph8120

B1378.preheader:                                  ; preds = %middle.block8116, %B1378.lr.ph
  %temp.2.197.2.06812.ph = phi i64 [ 1, %B1378.lr.ph ], [ %1032, %middle.block8116 ]
  %.9599.06811.ph = phi i64 [ 0, %B1378.lr.ph ], [ %n.vec8122, %middle.block8116 ]
  br label %B1378

vector.ph8120:                                    ; preds = %B1378.lr.ph
  %n.vec8122 = and i64 %.96346809, -16
  br label %vector.body8118

vector.body8118:                                  ; preds = %vector.body8118, %vector.ph8120
  %index8123 = phi i64 [ 0, %vector.ph8120 ], [ %index.next8124, %vector.body8118 ]
  %vec.phi8127 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8120 ], [ %1027, %vector.body8118 ]
  %vec.phi8128 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8120 ], [ %1028, %vector.body8118 ]
  %vec.phi8129 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8120 ], [ %1029, %vector.body8118 ]
  %vec.phi8130 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8120 ], [ %1030, %vector.body8118 ]
  %sunkaddr11204 = mul i64 %index8123, 8
  %1019 = bitcast { i64, i64, i8, i64 }* %.6.i252855956807 to i8*
  %sunkaddr11205 = getelementptr i8, i8* %1019, i64 %sunkaddr11204
  %sunkaddr11206 = getelementptr i8, i8* %sunkaddr11205, i64 24
  %1020 = bitcast i8* %sunkaddr11206 to <4 x i64>*
  %wide.load8131 = load <4 x i64>, <4 x i64>* %1020, align 8
  %sunkaddr11207 = mul i64 %index8123, 8
  %1021 = bitcast { i64, i64, i8, i64 }* %.6.i252855956807 to i8*
  %sunkaddr11208 = getelementptr i8, i8* %1021, i64 %sunkaddr11207
  %sunkaddr11209 = getelementptr i8, i8* %sunkaddr11208, i64 56
  %1022 = bitcast i8* %sunkaddr11209 to <4 x i64>*
  %wide.load8132 = load <4 x i64>, <4 x i64>* %1022, align 8
  %sunkaddr11210 = mul i64 %index8123, 8
  %1023 = bitcast { i64, i64, i8, i64 }* %.6.i252855956807 to i8*
  %sunkaddr11211 = getelementptr i8, i8* %1023, i64 %sunkaddr11210
  %sunkaddr11212 = getelementptr i8, i8* %sunkaddr11211, i64 88
  %1024 = bitcast i8* %sunkaddr11212 to <4 x i64>*
  %wide.load8133 = load <4 x i64>, <4 x i64>* %1024, align 8
  %sunkaddr11213 = mul i64 %index8123, 8
  %1025 = bitcast { i64, i64, i8, i64 }* %.6.i252855956807 to i8*
  %sunkaddr11214 = getelementptr i8, i8* %1025, i64 %sunkaddr11213
  %sunkaddr11215 = getelementptr i8, i8* %sunkaddr11214, i64 120
  %1026 = bitcast i8* %sunkaddr11215 to <4 x i64>*
  %wide.load8134 = load <4 x i64>, <4 x i64>* %1026, align 8
  %1027 = mul <4 x i64> %wide.load8131, %vec.phi8127
  %1028 = mul <4 x i64> %wide.load8132, %vec.phi8128
  %1029 = mul <4 x i64> %wide.load8133, %vec.phi8129
  %1030 = mul <4 x i64> %wide.load8134, %vec.phi8130
  %index.next8124 = add i64 %index8123, 16
  %1031 = icmp eq i64 %n.vec8122, %index.next8124
  br i1 %1031, label %middle.block8116, label %vector.body8118, !llvm.loop !180

middle.block8116:                                 ; preds = %vector.body8118
  %bin.rdx8135 = mul <4 x i64> %1028, %1027
  %bin.rdx8136 = mul <4 x i64> %1029, %bin.rdx8135
  %bin.rdx8137 = mul <4 x i64> %1030, %bin.rdx8136
  %rdx.shuf10171 = shufflevector <4 x i64> %bin.rdx8137, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10172 = mul <4 x i64> %bin.rdx8137, %rdx.shuf10171
  %rdx.shuf10173 = shufflevector <4 x i64> %bin.rdx10172, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10174 = mul <4 x i64> %bin.rdx10172, %rdx.shuf10173
  %1032 = extractelement <4 x i64> %bin.rdx10174, i32 0
  %cmp.n8126 = icmp eq i64 %.96346809, %n.vec8122
  br i1 %cmp.n8126, label %B1390, label %B1378.preheader

B1390.endif.endif.if:                             ; preds = %B1390
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1390.endif.endif.endif:                          ; preds = %B1390
  %.5.i1685 = getelementptr i8, i8* %.9705, i64 24
  %1033 = bitcast i8* %.5.i1685 to { i64, i64, i8, i64 }**
  %.6.i16865596 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1033, align 8
  %.9718 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i16865596, i64 0, i32 1
  store i64 1, i64* %.9718, align 8
  %.6.i16845597 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1033, align 8
  %.972411216 = bitcast { i64, i64, i8, i64 }* %.6.i16845597 to i64*
  store i64 0, i64* %.972411216, align 8
  %.6.i16825598 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1033, align 8
  %.9730 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i16825598, i64 0, i32 2
  store i8 0, i8* %.9730, align 1
  %.6.i16785599 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1033, align 8
  %.9743 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i16785599, i64 0, i32 3
  store i64 0, i64* %.9743, align 1
  %.6.i16745601 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1033, align 8
  %.977011217 = bitcast { i64, i64, i8, i64 }* %.6.i16745601 to i64*
  store i64 1, i64* %.977011217, align 8
  %.6.i16705602 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1033, align 8
  %.9783 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i16705602, i64 0, i32 3
  store i64 1466502782, i64* %.9783, align 8
  %.6.i11.i1598 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1033, align 8, !noalias !181
  %.4061.i159911218 = bitcast { i64, i64, i8, i64 }* %.6.i11.i1598 to i64*
  %.41.i1600 = load i64, i64* %.4061.i159911218, align 8, !noalias !181
  %.42.i1601 = icmp sgt i64 %.41.i1600, 0
  br i1 %.42.i1601, label %B0.endif.endif.endif.i1619, label %B0.endif.endif.endif.if.if, !prof !45

B24.i1612:                                        ; preds = %B24.i1612.preheader, %B24.i1612
  %return_val.2.025.i1602 = phi i64 [ %return_val.3.1.i1610, %B24.i1612 ], [ %return_val.2.025.i1602.ph, %B24.i1612.preheader ]
  %.14.024.i1603 = phi i64 [ %.129.i1608, %B24.i1612 ], [ %.14.024.i1603.ph, %B24.i1612.preheader ]
  %sunkaddr11219 = mul i64 %.14.024.i1603, 8
  %1034 = bitcast { i64, i64, i8, i64 }* %.6.i11.i1598 to i8*
  %sunkaddr11220 = getelementptr i8, i8* %1034, i64 %sunkaddr11219
  %sunkaddr11221 = getelementptr i8, i8* %sunkaddr11220, i64 24
  %1035 = bitcast i8* %sunkaddr11221 to i64*
  %.126.i1607 = load i64, i64* %1035, align 8, !noalias !181
  %.129.i1608 = add nuw nsw i64 %.14.024.i1603, 1
  %.6.i7.not.i1609 = icmp slt i64 %.126.i1607, %return_val.2.025.i1602
  %return_val.3.1.i1610 = select i1 %.6.i7.not.i1609, i64 %.126.i1607, i64 %return_val.2.025.i1602
  %exitcond.not.i1611 = icmp eq i64 %.41.i1600, %.129.i1608
  br i1 %exitcond.not.i1611, label %B1390.endif.endif.endif.endif, label %B24.i1612, !llvm.loop !46

B0.endif.endif.endif.i1619:                       ; preds = %B1390.endif.endif.endif
  %.50.i1616 = getelementptr { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11.i1598, i64 0, i32 3
  %.52.i1617 = load i64, i64* %.50.i1616, align 8, !noalias !181
  %.11623.not.i1618 = icmp eq i64 %.41.i1600, 1
  br i1 %.11623.not.i1618, label %B1390.endif.endif.endif.endif, label %B24.preheader.i1621

B24.preheader.i1621:                              ; preds = %B0.endif.endif.endif.i1619
  %1036 = add nsw i64 %.41.i1600, -1
  %min.iters.check.i1620 = icmp ult i64 %1036, 16
  br i1 %min.iters.check.i1620, label %B24.i1612.preheader, label %vector.ph.i1629

B24.i1612.preheader:                              ; preds = %middle.block.i1666, %B24.preheader.i1621
  %return_val.2.025.i1602.ph = phi i64 [ %1054, %middle.block.i1666 ], [ %.52.i1617, %B24.preheader.i1621 ]
  %.14.024.i1603.ph = phi i64 [ %ind.end.i1626, %middle.block.i1666 ], [ 1, %B24.preheader.i1621 ]
  br label %B24.i1612

vector.ph.i1629:                                  ; preds = %B24.preheader.i1621
  %n.vec.i1625 = and i64 %1036, -16
  %minmax.ident.splatinsert.i1627 = insertelement <4 x i64> undef, i64 %.52.i1617, i32 0
  %minmax.ident.splat.i1628 = shufflevector <4 x i64> %minmax.ident.splatinsert.i1627, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %vector.body.i1652

vector.body.i1652:                                ; preds = %vector.body.i1652, %vector.ph.i1629
  %index.i1630 = phi i64 [ 0, %vector.ph.i1629 ], [ %index.next.i1651, %vector.body.i1652 ]
  %vec.phi.i1631 = phi <4 x i64> [ %minmax.ident.splat.i1628, %vector.ph.i1629 ], [ %1049, %vector.body.i1652 ]
  %vec.phi26.i1632 = phi <4 x i64> [ %minmax.ident.splat.i1628, %vector.ph.i1629 ], [ %1050, %vector.body.i1652 ]
  %vec.phi27.i1633 = phi <4 x i64> [ %minmax.ident.splat.i1628, %vector.ph.i1629 ], [ %1051, %vector.body.i1652 ]
  %vec.phi28.i1634 = phi <4 x i64> [ %minmax.ident.splat.i1628, %vector.ph.i1629 ], [ %1052, %vector.body.i1652 ]
  %sunkaddr11222 = mul i64 %index.i1630, 8
  %1037 = bitcast { i64, i64, i8, i64 }* %.6.i11.i1598 to i8*
  %sunkaddr11223 = getelementptr i8, i8* %1037, i64 %sunkaddr11222
  %sunkaddr11224 = getelementptr i8, i8* %sunkaddr11223, i64 32
  %1038 = bitcast i8* %sunkaddr11224 to <4 x i64>*
  %wide.load.i1638 = load <4 x i64>, <4 x i64>* %1038, align 8, !noalias !181
  %sunkaddr11225 = mul i64 %index.i1630, 8
  %1039 = bitcast { i64, i64, i8, i64 }* %.6.i11.i1598 to i8*
  %sunkaddr11226 = getelementptr i8, i8* %1039, i64 %sunkaddr11225
  %sunkaddr11227 = getelementptr i8, i8* %sunkaddr11226, i64 64
  %1040 = bitcast i8* %sunkaddr11227 to <4 x i64>*
  %wide.load29.i1642 = load <4 x i64>, <4 x i64>* %1040, align 8, !noalias !181
  %sunkaddr11228 = mul i64 %index.i1630, 8
  %1041 = bitcast { i64, i64, i8, i64 }* %.6.i11.i1598 to i8*
  %sunkaddr11229 = getelementptr i8, i8* %1041, i64 %sunkaddr11228
  %sunkaddr11230 = getelementptr i8, i8* %sunkaddr11229, i64 96
  %1042 = bitcast i8* %sunkaddr11230 to <4 x i64>*
  %wide.load30.i1646 = load <4 x i64>, <4 x i64>* %1042, align 8, !noalias !181
  %sunkaddr11231 = mul i64 %index.i1630, 8
  %1043 = bitcast { i64, i64, i8, i64 }* %.6.i11.i1598 to i8*
  %sunkaddr11232 = getelementptr i8, i8* %1043, i64 %sunkaddr11231
  %sunkaddr11233 = getelementptr i8, i8* %sunkaddr11232, i64 128
  %1044 = bitcast i8* %sunkaddr11233 to <4 x i64>*
  %wide.load31.i1650 = load <4 x i64>, <4 x i64>* %1044, align 8, !noalias !181
  %1045 = icmp slt <4 x i64> %wide.load.i1638, %vec.phi.i1631
  %1046 = icmp slt <4 x i64> %wide.load29.i1642, %vec.phi26.i1632
  %1047 = icmp slt <4 x i64> %wide.load30.i1646, %vec.phi27.i1633
  %1048 = icmp slt <4 x i64> %wide.load31.i1650, %vec.phi28.i1634
  %1049 = select <4 x i1> %1045, <4 x i64> %wide.load.i1638, <4 x i64> %vec.phi.i1631
  %1050 = select <4 x i1> %1046, <4 x i64> %wide.load29.i1642, <4 x i64> %vec.phi26.i1632
  %1051 = select <4 x i1> %1047, <4 x i64> %wide.load30.i1646, <4 x i64> %vec.phi27.i1633
  %1052 = select <4 x i1> %1048, <4 x i64> %wide.load31.i1650, <4 x i64> %vec.phi28.i1634
  %index.next.i1651 = add i64 %index.i1630, 16
  %1053 = icmp eq i64 %n.vec.i1625, %index.next.i1651
  br i1 %1053, label %middle.block.i1666, label %vector.body.i1652, !llvm.loop !47

middle.block.i1666:                               ; preds = %vector.body.i1652
  %ind.end.i1626 = or i64 %n.vec.i1625, 1
  %rdx.minmax.cmp.i1653 = icmp slt <4 x i64> %1049, %1050
  %rdx.minmax.select.i1654 = select <4 x i1> %rdx.minmax.cmp.i1653, <4 x i64> %1049, <4 x i64> %1050
  %rdx.minmax.cmp32.i1655 = icmp slt <4 x i64> %rdx.minmax.select.i1654, %1051
  %rdx.minmax.select33.i1656 = select <4 x i1> %rdx.minmax.cmp32.i1655, <4 x i64> %rdx.minmax.select.i1654, <4 x i64> %1051
  %rdx.minmax.cmp34.i1657 = icmp slt <4 x i64> %rdx.minmax.select33.i1656, %1052
  %rdx.minmax.select35.i1658 = select <4 x i1> %rdx.minmax.cmp34.i1657, <4 x i64> %rdx.minmax.select33.i1656, <4 x i64> %1052
  %rdx.shuf.i1659 = shufflevector <4 x i64> %rdx.minmax.select35.i1658, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp56.i1660 = icmp slt <4 x i64> %rdx.minmax.select35.i1658, %rdx.shuf.i1659
  %rdx.minmax.select57.i1661 = select <4 x i1> %rdx.minmax.cmp56.i1660, <4 x i64> %rdx.minmax.select35.i1658, <4 x i64> %rdx.shuf.i1659
  %rdx.shuf58.i1662 = shufflevector <4 x i64> %rdx.minmax.select57.i1661, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp59.i1663 = icmp slt <4 x i64> %rdx.minmax.select57.i1661, %rdx.shuf58.i1662
  %rdx.minmax.select60.i1664 = select <4 x i1> %rdx.minmax.cmp59.i1663, <4 x i64> %rdx.minmax.select57.i1661, <4 x i64> %rdx.shuf58.i1662
  %1054 = extractelement <4 x i64> %rdx.minmax.select60.i1664, i32 0
  %cmp.n.i1665 = icmp eq i64 %1036, %n.vec.i1625
  br i1 %cmp.n.i1665, label %B1390.endif.endif.endif.endif, label %B24.i1612.preheader

B1390.endif.endif.endif.endif:                    ; preds = %B24.i1612, %middle.block.i1666, %B0.endif.endif.endif.i1619
  %.9787.0.ph = phi i64 [ %1054, %middle.block.i1666 ], [ %.52.i1617, %B0.endif.endif.endif.i1619 ], [ %return_val.3.1.i1610, %B24.i1612 ]
  tail call void @NRT_decref(i8* nonnull %.9705)
  %.9831 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 48, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.9832 = icmp eq i8* %.9831, null
  br i1 %.9832, label %B1390.endif.endif.endif.endif.endif.endif.if, label %B1390.endif.endif.endif.endif.endif.endif.endif, !prof !3

B1390.endif.endif.endif.endif.endif.endif.if:     ; preds = %B1390.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1390.endif.endif.endif.endif.endif.endif.endif:  ; preds = %B1390.endif.endif.endif.endif
  %.5.i1593 = getelementptr i8, i8* %.9831, i64 24
  %1055 = bitcast i8* %.5.i1593 to { i64, i64, i8, i64 }**
  %.6.i15945603 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1055, align 8
  %.9844 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i15945603, i64 0, i32 1
  store i64 3, i64* %.9844, align 8
  %.6.i15925604 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1055, align 8
  %.985011234 = bitcast { i64, i64, i8, i64 }* %.6.i15925604 to i64*
  store i64 0, i64* %.985011234, align 8
  %.6.i15905605 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1055, align 8
  %.9856 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i15905605, i64 0, i32 2
  store i8 0, i8* %.9856, align 1
  %.6.i15865606 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1055, align 8
  %.9869 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i15865606, i64 0, i32 3
  %.9880 = bitcast i64* %.9869 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(24) %.9880, i8 0, i64 24, i1 false)
  %.6.i15825608 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1055, align 8
  %.989611235 = bitcast { i64, i64, i8, i64 }* %.6.i15825608 to i64*
  store i64 3, i64* %.989611235, align 8
  %.6.i15785609 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1055, align 8
  %.9909 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i15785609, i64 0, i32 3
  store i64 1589, i64* %.9909, align 8
  %.6.i15745610 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1055, align 8
  %.9923 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i15745610, i64 0, i32 3
  %.9924 = getelementptr i64, i64* %.9923, i64 1
  store i64 214, i64* %.9924, align 8
  %.6.i15705611 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1055, align 8
  %.9937 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i15705611, i64 0, i32 3
  %.9938 = getelementptr i64, i64* %.9937, i64 2
  store i64 13, i64* %.9938, align 8
  %.6.i11.i1498 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1055, align 8, !noalias !185
  %.4061.i149911236 = bitcast { i64, i64, i8, i64 }* %.6.i11.i1498 to i64*
  %.41.i1500 = load i64, i64* %.4061.i149911236, align 8, !noalias !185
  %.42.i1501 = icmp sgt i64 %.41.i1500, 0
  br i1 %.42.i1501, label %B0.endif.endif.endif.i1519, label %B0.endif.endif.endif.if.if, !prof !45

B24.i1512:                                        ; preds = %B24.i1512.preheader, %B24.i1512
  %return_val.2.025.i1502 = phi i64 [ %return_val.3.1.i1510, %B24.i1512 ], [ %return_val.2.025.i1502.ph, %B24.i1512.preheader ]
  %.14.024.i1503 = phi i64 [ %.129.i1508, %B24.i1512 ], [ %.14.024.i1503.ph, %B24.i1512.preheader ]
  %sunkaddr11237 = mul i64 %.14.024.i1503, 8
  %1056 = bitcast { i64, i64, i8, i64 }* %.6.i11.i1498 to i8*
  %sunkaddr11238 = getelementptr i8, i8* %1056, i64 %sunkaddr11237
  %sunkaddr11239 = getelementptr i8, i8* %sunkaddr11238, i64 24
  %1057 = bitcast i8* %sunkaddr11239 to i64*
  %.126.i1507 = load i64, i64* %1057, align 8, !noalias !185
  %.129.i1508 = add nuw nsw i64 %.14.024.i1503, 1
  %.6.i7.not.i1509 = icmp sgt i64 %.126.i1507, %return_val.2.025.i1502
  %return_val.3.1.i1510 = select i1 %.6.i7.not.i1509, i64 %.126.i1507, i64 %return_val.2.025.i1502
  %exitcond.not.i1511 = icmp eq i64 %.41.i1500, %.129.i1508
  br i1 %exitcond.not.i1511, label %B1390.endif.endif.endif.endif.endif.endif.endif.endif, label %B24.i1512, !llvm.loop !58

B0.endif.endif.endif.i1519:                       ; preds = %B1390.endif.endif.endif.endif.endif.endif.endif
  %.50.i1516 = getelementptr { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11.i1498, i64 0, i32 3
  %.52.i1517 = load i64, i64* %.50.i1516, align 8, !noalias !185
  %.11623.not.i1518 = icmp eq i64 %.41.i1500, 1
  br i1 %.11623.not.i1518, label %B1390.endif.endif.endif.endif.endif.endif.endif.endif, label %B24.preheader.i1521

B24.preheader.i1521:                              ; preds = %B0.endif.endif.endif.i1519
  %1058 = add nsw i64 %.41.i1500, -1
  %min.iters.check.i1520 = icmp ult i64 %1058, 16
  br i1 %min.iters.check.i1520, label %B24.i1512.preheader, label %vector.ph.i1529

B24.i1512.preheader:                              ; preds = %middle.block.i1566, %B24.preheader.i1521
  %return_val.2.025.i1502.ph = phi i64 [ %1076, %middle.block.i1566 ], [ %.52.i1517, %B24.preheader.i1521 ]
  %.14.024.i1503.ph = phi i64 [ %ind.end.i1526, %middle.block.i1566 ], [ 1, %B24.preheader.i1521 ]
  br label %B24.i1512

vector.ph.i1529:                                  ; preds = %B24.preheader.i1521
  %n.vec.i1525 = and i64 %1058, -16
  %minmax.ident.splatinsert.i1527 = insertelement <4 x i64> undef, i64 %.52.i1517, i32 0
  %minmax.ident.splat.i1528 = shufflevector <4 x i64> %minmax.ident.splatinsert.i1527, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %vector.body.i1552

vector.body.i1552:                                ; preds = %vector.body.i1552, %vector.ph.i1529
  %index.i1530 = phi i64 [ 0, %vector.ph.i1529 ], [ %index.next.i1551, %vector.body.i1552 ]
  %vec.phi.i1531 = phi <4 x i64> [ %minmax.ident.splat.i1528, %vector.ph.i1529 ], [ %1071, %vector.body.i1552 ]
  %vec.phi26.i1532 = phi <4 x i64> [ %minmax.ident.splat.i1528, %vector.ph.i1529 ], [ %1072, %vector.body.i1552 ]
  %vec.phi27.i1533 = phi <4 x i64> [ %minmax.ident.splat.i1528, %vector.ph.i1529 ], [ %1073, %vector.body.i1552 ]
  %vec.phi28.i1534 = phi <4 x i64> [ %minmax.ident.splat.i1528, %vector.ph.i1529 ], [ %1074, %vector.body.i1552 ]
  %sunkaddr11240 = mul i64 %index.i1530, 8
  %1059 = bitcast { i64, i64, i8, i64 }* %.6.i11.i1498 to i8*
  %sunkaddr11241 = getelementptr i8, i8* %1059, i64 %sunkaddr11240
  %sunkaddr11242 = getelementptr i8, i8* %sunkaddr11241, i64 32
  %1060 = bitcast i8* %sunkaddr11242 to <4 x i64>*
  %wide.load.i1538 = load <4 x i64>, <4 x i64>* %1060, align 8, !noalias !185
  %sunkaddr11243 = mul i64 %index.i1530, 8
  %1061 = bitcast { i64, i64, i8, i64 }* %.6.i11.i1498 to i8*
  %sunkaddr11244 = getelementptr i8, i8* %1061, i64 %sunkaddr11243
  %sunkaddr11245 = getelementptr i8, i8* %sunkaddr11244, i64 64
  %1062 = bitcast i8* %sunkaddr11245 to <4 x i64>*
  %wide.load29.i1542 = load <4 x i64>, <4 x i64>* %1062, align 8, !noalias !185
  %sunkaddr11246 = mul i64 %index.i1530, 8
  %1063 = bitcast { i64, i64, i8, i64 }* %.6.i11.i1498 to i8*
  %sunkaddr11247 = getelementptr i8, i8* %1063, i64 %sunkaddr11246
  %sunkaddr11248 = getelementptr i8, i8* %sunkaddr11247, i64 96
  %1064 = bitcast i8* %sunkaddr11248 to <4 x i64>*
  %wide.load30.i1546 = load <4 x i64>, <4 x i64>* %1064, align 8, !noalias !185
  %sunkaddr11249 = mul i64 %index.i1530, 8
  %1065 = bitcast { i64, i64, i8, i64 }* %.6.i11.i1498 to i8*
  %sunkaddr11250 = getelementptr i8, i8* %1065, i64 %sunkaddr11249
  %sunkaddr11251 = getelementptr i8, i8* %sunkaddr11250, i64 128
  %1066 = bitcast i8* %sunkaddr11251 to <4 x i64>*
  %wide.load31.i1550 = load <4 x i64>, <4 x i64>* %1066, align 8, !noalias !185
  %1067 = icmp sgt <4 x i64> %wide.load.i1538, %vec.phi.i1531
  %1068 = icmp sgt <4 x i64> %wide.load29.i1542, %vec.phi26.i1532
  %1069 = icmp sgt <4 x i64> %wide.load30.i1546, %vec.phi27.i1533
  %1070 = icmp sgt <4 x i64> %wide.load31.i1550, %vec.phi28.i1534
  %1071 = select <4 x i1> %1067, <4 x i64> %wide.load.i1538, <4 x i64> %vec.phi.i1531
  %1072 = select <4 x i1> %1068, <4 x i64> %wide.load29.i1542, <4 x i64> %vec.phi26.i1532
  %1073 = select <4 x i1> %1069, <4 x i64> %wide.load30.i1546, <4 x i64> %vec.phi27.i1533
  %1074 = select <4 x i1> %1070, <4 x i64> %wide.load31.i1550, <4 x i64> %vec.phi28.i1534
  %index.next.i1551 = add i64 %index.i1530, 16
  %1075 = icmp eq i64 %n.vec.i1525, %index.next.i1551
  br i1 %1075, label %middle.block.i1566, label %vector.body.i1552, !llvm.loop !59

middle.block.i1566:                               ; preds = %vector.body.i1552
  %ind.end.i1526 = or i64 %n.vec.i1525, 1
  %rdx.minmax.cmp.i1553 = icmp sgt <4 x i64> %1071, %1072
  %rdx.minmax.select.i1554 = select <4 x i1> %rdx.minmax.cmp.i1553, <4 x i64> %1071, <4 x i64> %1072
  %rdx.minmax.cmp32.i1555 = icmp sgt <4 x i64> %rdx.minmax.select.i1554, %1073
  %rdx.minmax.select33.i1556 = select <4 x i1> %rdx.minmax.cmp32.i1555, <4 x i64> %rdx.minmax.select.i1554, <4 x i64> %1073
  %rdx.minmax.cmp34.i1557 = icmp sgt <4 x i64> %rdx.minmax.select33.i1556, %1074
  %rdx.minmax.select35.i1558 = select <4 x i1> %rdx.minmax.cmp34.i1557, <4 x i64> %rdx.minmax.select33.i1556, <4 x i64> %1074
  %rdx.shuf.i1559 = shufflevector <4 x i64> %rdx.minmax.select35.i1558, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp56.i1560 = icmp sgt <4 x i64> %rdx.minmax.select35.i1558, %rdx.shuf.i1559
  %rdx.minmax.select57.i1561 = select <4 x i1> %rdx.minmax.cmp56.i1560, <4 x i64> %rdx.minmax.select35.i1558, <4 x i64> %rdx.shuf.i1559
  %rdx.shuf58.i1562 = shufflevector <4 x i64> %rdx.minmax.select57.i1561, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp59.i1563 = icmp sgt <4 x i64> %rdx.minmax.select57.i1561, %rdx.shuf58.i1562
  %rdx.minmax.select60.i1564 = select <4 x i1> %rdx.minmax.cmp59.i1563, <4 x i64> %rdx.minmax.select57.i1561, <4 x i64> %rdx.shuf58.i1562
  %1076 = extractelement <4 x i64> %rdx.minmax.select60.i1564, i32 0
  %cmp.n.i1565 = icmp eq i64 %1058, %n.vec.i1525
  br i1 %cmp.n.i1565, label %B1390.endif.endif.endif.endif.endif.endif.endif.endif, label %B24.i1512.preheader

B1390.endif.endif.endif.endif.endif.endif.endif.endif: ; preds = %B24.i1512, %middle.block.i1566, %B0.endif.endif.endif.i1519
  %.9941.0.ph = phi i64 [ %1076, %middle.block.i1566 ], [ %.52.i1517, %B0.endif.endif.endif.i1519 ], [ %return_val.3.1.i1510, %B24.i1512 ]
  tail call void @NRT_decref(i8* nonnull %.9831)
  %.10001 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 40, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.10002 = icmp eq i8* %.10001, null
  br i1 %.10002, label %B1417.endif.endif.if, label %B1417.endif.endif.endif, !prof !3

B1417.endif.endif.if:                             ; preds = %B1390.endif.endif.endif.endif.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1417.endif.endif.endif:                          ; preds = %B1390.endif.endif.endif.endif.endif.endif.endif.endif
  %.5.i1493 = getelementptr i8, i8* %.10001, i64 24
  %1077 = bitcast i8* %.5.i1493 to { i64, i64, i8, i64 }**
  %.6.i14945612 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1077, align 8
  %.10014 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i14945612, i64 0, i32 1
  store i64 2, i64* %.10014, align 8
  %.6.i14925613 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1077, align 8
  %.1002011252 = bitcast { i64, i64, i8, i64 }* %.6.i14925613 to i64*
  store i64 0, i64* %.1002011252, align 8
  %.6.i14905614 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1077, align 8
  %.10026 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i14905614, i64 0, i32 2
  store i8 0, i8* %.10026, align 1
  %.6.i14865615 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1077, align 8
  %.10039 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i14865615, i64 0, i32 3
  %.10050 = bitcast i64* %.10039 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %.10050, i8 0, i64 16, i1 false)
  %.6.i14825617 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1077, align 8
  %.1006611253 = bitcast { i64, i64, i8, i64 }* %.6.i14825617 to i64*
  store i64 2, i64* %.1006611253, align 8
  %.6.i14785618 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1077, align 8
  %.10079 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i14785618, i64 0, i32 3
  store i64 0, i64* %.10079, align 8
  %.6.i14745619 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1077, align 8
  %.10093 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i14745619, i64 0, i32 3
  %.10094 = getelementptr i64, i64* %.10093, i64 1
  store i64 198398, i64* %.10094, align 8
  %.6.i261256206799 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1077, align 8
  %.10145680011254 = bitcast { i64, i64, i8, i64 }* %.6.i261256206799 to i64*
  %.101466801 = load i64, i64* %.10145680011254, align 8
  %.101476802 = icmp sgt i64 %.101466801, 0
  br i1 %.101476802, label %B1432.lr.ph, label %B1444

B1432.lr.ph:                                      ; preds = %B1417.endif.endif.endif
  %min.iters.check8142 = icmp ult i64 %.101466801, 16
  br i1 %min.iters.check8142, label %B1432.preheader, label %vector.ph8143

B1432.preheader:                                  ; preds = %middle.block8139, %B1432.lr.ph
  %temp.2.179.2.06804.ph = phi i64 [ 1, %B1432.lr.ph ], [ %1091, %middle.block8139 ]
  %.10111.06803.ph = phi i64 [ 0, %B1432.lr.ph ], [ %n.vec8145, %middle.block8139 ]
  br label %B1432

vector.ph8143:                                    ; preds = %B1432.lr.ph
  %n.vec8145 = and i64 %.101466801, -16
  br label %vector.body8141

vector.body8141:                                  ; preds = %vector.body8141, %vector.ph8143
  %index8146 = phi i64 [ 0, %vector.ph8143 ], [ %index.next8147, %vector.body8141 ]
  %vec.phi8150 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8143 ], [ %1086, %vector.body8141 ]
  %vec.phi8151 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8143 ], [ %1087, %vector.body8141 ]
  %vec.phi8152 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8143 ], [ %1088, %vector.body8141 ]
  %vec.phi8153 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8143 ], [ %1089, %vector.body8141 ]
  %sunkaddr11255 = mul i64 %index8146, 8
  %1078 = bitcast { i64, i64, i8, i64 }* %.6.i261256206799 to i8*
  %sunkaddr11256 = getelementptr i8, i8* %1078, i64 %sunkaddr11255
  %sunkaddr11257 = getelementptr i8, i8* %sunkaddr11256, i64 24
  %1079 = bitcast i8* %sunkaddr11257 to <4 x i64>*
  %wide.load8154 = load <4 x i64>, <4 x i64>* %1079, align 8
  %sunkaddr11258 = mul i64 %index8146, 8
  %1080 = bitcast { i64, i64, i8, i64 }* %.6.i261256206799 to i8*
  %sunkaddr11259 = getelementptr i8, i8* %1080, i64 %sunkaddr11258
  %sunkaddr11260 = getelementptr i8, i8* %sunkaddr11259, i64 56
  %1081 = bitcast i8* %sunkaddr11260 to <4 x i64>*
  %wide.load8155 = load <4 x i64>, <4 x i64>* %1081, align 8
  %sunkaddr11261 = mul i64 %index8146, 8
  %1082 = bitcast { i64, i64, i8, i64 }* %.6.i261256206799 to i8*
  %sunkaddr11262 = getelementptr i8, i8* %1082, i64 %sunkaddr11261
  %sunkaddr11263 = getelementptr i8, i8* %sunkaddr11262, i64 88
  %1083 = bitcast i8* %sunkaddr11263 to <4 x i64>*
  %wide.load8156 = load <4 x i64>, <4 x i64>* %1083, align 8
  %sunkaddr11264 = mul i64 %index8146, 8
  %1084 = bitcast { i64, i64, i8, i64 }* %.6.i261256206799 to i8*
  %sunkaddr11265 = getelementptr i8, i8* %1084, i64 %sunkaddr11264
  %sunkaddr11266 = getelementptr i8, i8* %sunkaddr11265, i64 120
  %1085 = bitcast i8* %sunkaddr11266 to <4 x i64>*
  %wide.load8157 = load <4 x i64>, <4 x i64>* %1085, align 8
  %1086 = mul <4 x i64> %wide.load8154, %vec.phi8150
  %1087 = mul <4 x i64> %wide.load8155, %vec.phi8151
  %1088 = mul <4 x i64> %wide.load8156, %vec.phi8152
  %1089 = mul <4 x i64> %wide.load8157, %vec.phi8153
  %index.next8147 = add i64 %index8146, 16
  %1090 = icmp eq i64 %n.vec8145, %index.next8147
  br i1 %1090, label %middle.block8139, label %vector.body8141, !llvm.loop !189

middle.block8139:                                 ; preds = %vector.body8141
  %bin.rdx8158 = mul <4 x i64> %1087, %1086
  %bin.rdx8159 = mul <4 x i64> %1088, %bin.rdx8158
  %bin.rdx8160 = mul <4 x i64> %1089, %bin.rdx8159
  %rdx.shuf10175 = shufflevector <4 x i64> %bin.rdx8160, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10176 = mul <4 x i64> %bin.rdx8160, %rdx.shuf10175
  %rdx.shuf10177 = shufflevector <4 x i64> %bin.rdx10176, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10178 = mul <4 x i64> %bin.rdx10176, %rdx.shuf10177
  %1091 = extractelement <4 x i64> %bin.rdx10178, i32 0
  %cmp.n8149 = icmp eq i64 %.101466801, %n.vec8145
  br i1 %cmp.n8149, label %B1444, label %B1432.preheader

B1471.endif.endif.if:                             ; preds = %B1444
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1471.endif.endif.endif:                          ; preds = %B1444
  %.5.i1469 = getelementptr i8, i8* %.10234, i64 24
  %1092 = bitcast i8* %.5.i1469 to { i64, i64, i8, i64 }**
  %.6.i14705621 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1092, align 8
  %.10247 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i14705621, i64 0, i32 1
  store i64 2, i64* %.10247, align 8
  %.6.i14685622 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1092, align 8
  %.1025311267 = bitcast { i64, i64, i8, i64 }* %.6.i14685622 to i64*
  store i64 0, i64* %.1025311267, align 8
  %.6.i14665623 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1092, align 8
  %.10259 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i14665623, i64 0, i32 2
  store i8 0, i8* %.10259, align 1
  %.6.i14625624 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1092, align 8
  %.10272 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i14625624, i64 0, i32 3
  %.10283 = bitcast i64* %.10272 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %.10283, i8 0, i64 16, i1 false)
  %.6.i14585626 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1092, align 8
  %.1029911268 = bitcast { i64, i64, i8, i64 }* %.6.i14585626 to i64*
  store i64 2, i64* %.1029911268, align 8
  %.6.i14545627 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1092, align 8
  %.10312 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i14545627, i64 0, i32 3
  store i64 196905722, i64* %.10312, align 8
  %.6.i14505628 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1092, align 8
  %.10326 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i14505628, i64 0, i32 3
  %.10327 = getelementptr i64, i64* %.10326, i64 1
  store i64 1, i64* %.10327, align 8
  %.6.i272056296791 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1092, align 8
  %.10380679211269 = bitcast { i64, i64, i8, i64 }* %.6.i272056296791 to i64*
  %.103816793 = load i64, i64* %.10380679211269, align 8
  %.103826794 = icmp sgt i64 %.103816793, 0
  br i1 %.103826794, label %B1486.lr.ph, label %B1498

B1486.lr.ph:                                      ; preds = %B1471.endif.endif.endif
  %min.iters.check8165 = icmp ult i64 %.103816793, 16
  br i1 %min.iters.check8165, label %B1486.preheader, label %vector.ph8166

B1486.preheader:                                  ; preds = %middle.block8162, %B1486.lr.ph
  %temp.2.143.2.06796.ph = phi i64 [ 1, %B1486.lr.ph ], [ %1106, %middle.block8162 ]
  %.10346.06795.ph = phi i64 [ 0, %B1486.lr.ph ], [ %n.vec8168, %middle.block8162 ]
  br label %B1486

vector.ph8166:                                    ; preds = %B1486.lr.ph
  %n.vec8168 = and i64 %.103816793, -16
  br label %vector.body8164

vector.body8164:                                  ; preds = %vector.body8164, %vector.ph8166
  %index8169 = phi i64 [ 0, %vector.ph8166 ], [ %index.next8170, %vector.body8164 ]
  %vec.phi8173 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8166 ], [ %1101, %vector.body8164 ]
  %vec.phi8174 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8166 ], [ %1102, %vector.body8164 ]
  %vec.phi8175 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8166 ], [ %1103, %vector.body8164 ]
  %vec.phi8176 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8166 ], [ %1104, %vector.body8164 ]
  %sunkaddr11270 = mul i64 %index8169, 8
  %1093 = bitcast { i64, i64, i8, i64 }* %.6.i272056296791 to i8*
  %sunkaddr11271 = getelementptr i8, i8* %1093, i64 %sunkaddr11270
  %sunkaddr11272 = getelementptr i8, i8* %sunkaddr11271, i64 24
  %1094 = bitcast i8* %sunkaddr11272 to <4 x i64>*
  %wide.load8177 = load <4 x i64>, <4 x i64>* %1094, align 8
  %sunkaddr11273 = mul i64 %index8169, 8
  %1095 = bitcast { i64, i64, i8, i64 }* %.6.i272056296791 to i8*
  %sunkaddr11274 = getelementptr i8, i8* %1095, i64 %sunkaddr11273
  %sunkaddr11275 = getelementptr i8, i8* %sunkaddr11274, i64 56
  %1096 = bitcast i8* %sunkaddr11275 to <4 x i64>*
  %wide.load8178 = load <4 x i64>, <4 x i64>* %1096, align 8
  %sunkaddr11276 = mul i64 %index8169, 8
  %1097 = bitcast { i64, i64, i8, i64 }* %.6.i272056296791 to i8*
  %sunkaddr11277 = getelementptr i8, i8* %1097, i64 %sunkaddr11276
  %sunkaddr11278 = getelementptr i8, i8* %sunkaddr11277, i64 88
  %1098 = bitcast i8* %sunkaddr11278 to <4 x i64>*
  %wide.load8179 = load <4 x i64>, <4 x i64>* %1098, align 8
  %sunkaddr11279 = mul i64 %index8169, 8
  %1099 = bitcast { i64, i64, i8, i64 }* %.6.i272056296791 to i8*
  %sunkaddr11280 = getelementptr i8, i8* %1099, i64 %sunkaddr11279
  %sunkaddr11281 = getelementptr i8, i8* %sunkaddr11280, i64 120
  %1100 = bitcast i8* %sunkaddr11281 to <4 x i64>*
  %wide.load8180 = load <4 x i64>, <4 x i64>* %1100, align 8
  %1101 = mul <4 x i64> %wide.load8177, %vec.phi8173
  %1102 = mul <4 x i64> %wide.load8178, %vec.phi8174
  %1103 = mul <4 x i64> %wide.load8179, %vec.phi8175
  %1104 = mul <4 x i64> %wide.load8180, %vec.phi8176
  %index.next8170 = add i64 %index8169, 16
  %1105 = icmp eq i64 %n.vec8168, %index.next8170
  br i1 %1105, label %middle.block8162, label %vector.body8164, !llvm.loop !190

middle.block8162:                                 ; preds = %vector.body8164
  %bin.rdx8181 = mul <4 x i64> %1102, %1101
  %bin.rdx8182 = mul <4 x i64> %1103, %bin.rdx8181
  %bin.rdx8183 = mul <4 x i64> %1104, %bin.rdx8182
  %rdx.shuf10179 = shufflevector <4 x i64> %bin.rdx8183, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10180 = mul <4 x i64> %bin.rdx8183, %rdx.shuf10179
  %rdx.shuf10181 = shufflevector <4 x i64> %bin.rdx10180, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10182 = mul <4 x i64> %bin.rdx10180, %rdx.shuf10181
  %1106 = extractelement <4 x i64> %bin.rdx10182, i32 0
  %cmp.n8172 = icmp eq i64 %.103816793, %n.vec8168
  br i1 %cmp.n8172, label %B1498, label %B1486.preheader

B1498.endif.endif.if:                             ; preds = %B1498
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1498.endif.endif.endif:                          ; preds = %B1498
  %const = bitcast i64 2388317100 to i64
  %.5.i1445 = getelementptr i8, i8* %.10455, i64 24
  %1107 = bitcast i8* %.5.i1445 to { i64, i64, i8, i64 }**
  %.6.i14465630 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1107, align 8
  %.10468 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i14465630, i64 0, i32 1
  store i64 4, i64* %.10468, align 8
  %.6.i14445631 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1107, align 8
  %.1047411282 = bitcast { i64, i64, i8, i64 }* %.6.i14445631 to i64*
  store i64 0, i64* %.1047411282, align 8
  %.6.i14425632 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1107, align 8
  %.10480 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i14425632, i64 0, i32 2
  store i8 0, i8* %.10480, align 1
  %.6.i14385633 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1107, align 8
  %.10493 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i14385633, i64 0, i32 3
  %.10504 = bitcast i64* %.10493 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(32) %.10504, i8 0, i64 32, i1 false)
  %.6.i14345635 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1107, align 8
  %.1052011283 = bitcast { i64, i64, i8, i64 }* %.6.i14345635 to i64*
  store i64 4, i64* %.1052011283, align 8
  %.6.i14305636 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1107, align 8
  %.10533 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i14305636, i64 0, i32 3
  %const_mat10079 = add i64 %const, 1828889444
  store i64 %const_mat10079, i64* %.10533, align 8
  %.6.i14265637 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1107, align 8
  %.10547 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i14265637, i64 0, i32 3
  %.10548 = getelementptr i64, i64* %.10547, i64 1
  store i64 48993801750, i64* %.10548, align 8
  %.6.i14225638 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1107, align 8
  %.10561 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i14225638, i64 0, i32 3
  %.10562 = getelementptr i64, i64* %.10561, i64 2
  store i64 25736, i64* %.10562, align 8
  %.6.i14185639 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1107, align 8
  %.10575 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i14185639, i64 0, i32 3
  %.10576 = getelementptr i64, i64* %.10575, i64 3
  %const_mat = add i64 %const, 1491465883
  store i64 %const_mat, i64* %.10576, align 8
  %.6.i3.i1362 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1107, align 8, !noalias !191
  %.5342.i136311284 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1362 to i64*
  %.548.i1364 = load i64, i64* %.5342.i136311284, align 8, !noalias !191
  %.559.i1365 = icmp sgt i64 %.548.i1364, 0
  br i1 %.559.i1365, label %B14.endif.lr.ph.i1367, label %B1498.endif.endif.endif.endif

B14.endif.lr.ph.i1367:                            ; preds = %B1498.endif.endif.endif
  %min.iters.check.i1366 = icmp ult i64 %.548.i1364, 16
  br i1 %min.iters.check.i1366, label %B14.endif.preheader.i1370, label %vector.ph.i1372

B14.endif.preheader.i1370:                        ; preds = %middle.block.i1404, %B14.endif.lr.ph.i1367
  %acc.2.011.ph.i1368 = phi i64 [ 0, %B14.endif.lr.ph.i1367 ], [ %1121, %middle.block.i1404 ]
  %.17.010.ph.i1369 = phi i64 [ 0, %B14.endif.lr.ph.i1367 ], [ %n.vec.i1371, %middle.block.i1404 ]
  br label %B14.endif.i1415

vector.ph.i1372:                                  ; preds = %B14.endif.lr.ph.i1367
  %n.vec.i1371 = and i64 %.548.i1364, -16
  br label %vector.body.i1395

vector.body.i1395:                                ; preds = %vector.body.i1395, %vector.ph.i1372
  %index.i1373 = phi i64 [ 0, %vector.ph.i1372 ], [ %index.next.i1394, %vector.body.i1395 ]
  %vec.phi.i1374 = phi <4 x i64> [ zeroinitializer, %vector.ph.i1372 ], [ %1116, %vector.body.i1395 ]
  %vec.phi12.i1375 = phi <4 x i64> [ zeroinitializer, %vector.ph.i1372 ], [ %1117, %vector.body.i1395 ]
  %vec.phi13.i1376 = phi <4 x i64> [ zeroinitializer, %vector.ph.i1372 ], [ %1118, %vector.body.i1395 ]
  %vec.phi14.i1377 = phi <4 x i64> [ zeroinitializer, %vector.ph.i1372 ], [ %1119, %vector.body.i1395 ]
  %sunkaddr11285 = mul i64 %index.i1373, 8
  %1108 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1362 to i8*
  %sunkaddr11286 = getelementptr i8, i8* %1108, i64 %sunkaddr11285
  %sunkaddr11287 = getelementptr i8, i8* %sunkaddr11286, i64 24
  %1109 = bitcast i8* %sunkaddr11287 to <4 x i64>*
  %wide.load.i1381 = load <4 x i64>, <4 x i64>* %1109, align 8, !noalias !191
  %sunkaddr11288 = mul i64 %index.i1373, 8
  %1110 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1362 to i8*
  %sunkaddr11289 = getelementptr i8, i8* %1110, i64 %sunkaddr11288
  %sunkaddr11290 = getelementptr i8, i8* %sunkaddr11289, i64 56
  %1111 = bitcast i8* %sunkaddr11290 to <4 x i64>*
  %wide.load15.i1385 = load <4 x i64>, <4 x i64>* %1111, align 8, !noalias !191
  %sunkaddr11291 = mul i64 %index.i1373, 8
  %1112 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1362 to i8*
  %sunkaddr11292 = getelementptr i8, i8* %1112, i64 %sunkaddr11291
  %sunkaddr11293 = getelementptr i8, i8* %sunkaddr11292, i64 88
  %1113 = bitcast i8* %sunkaddr11293 to <4 x i64>*
  %wide.load16.i1389 = load <4 x i64>, <4 x i64>* %1113, align 8, !noalias !191
  %sunkaddr11294 = mul i64 %index.i1373, 8
  %1114 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1362 to i8*
  %sunkaddr11295 = getelementptr i8, i8* %1114, i64 %sunkaddr11294
  %sunkaddr11296 = getelementptr i8, i8* %sunkaddr11295, i64 120
  %1115 = bitcast i8* %sunkaddr11296 to <4 x i64>*
  %wide.load17.i1393 = load <4 x i64>, <4 x i64>* %1115, align 8, !noalias !191
  %1116 = add <4 x i64> %wide.load.i1381, %vec.phi.i1374
  %1117 = add <4 x i64> %wide.load15.i1385, %vec.phi12.i1375
  %1118 = add <4 x i64> %wide.load16.i1389, %vec.phi13.i1376
  %1119 = add <4 x i64> %wide.load17.i1393, %vec.phi14.i1377
  %index.next.i1394 = add i64 %index.i1373, 16
  %1120 = icmp eq i64 %n.vec.i1371, %index.next.i1394
  br i1 %1120, label %middle.block.i1404, label %vector.body.i1395, !llvm.loop !51

middle.block.i1404:                               ; preds = %vector.body.i1395
  %bin.rdx.i1396 = add <4 x i64> %1117, %1116
  %bin.rdx18.i1397 = add <4 x i64> %bin.rdx.i1396, %1118
  %bin.rdx19.i1398 = add <4 x i64> %bin.rdx18.i1397, %1119
  %rdx.shuf.i1399 = shufflevector <4 x i64> %bin.rdx19.i1398, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx39.i1400 = add <4 x i64> %rdx.shuf.i1399, %bin.rdx19.i1398
  %rdx.shuf40.i1401 = shufflevector <4 x i64> %bin.rdx39.i1400, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx41.i1402 = add <4 x i64> %rdx.shuf40.i1401, %bin.rdx39.i1400
  %1121 = extractelement <4 x i64> %bin.rdx41.i1402, i32 0
  %cmp.n.i1403 = icmp eq i64 %.548.i1364, %n.vec.i1371
  br i1 %cmp.n.i1403, label %B1498.endif.endif.endif.endif, label %B14.endif.preheader.i1370

B14.endif.i1415:                                  ; preds = %B14.endif.i1415, %B14.endif.preheader.i1370
  %acc.2.011.i1406 = phi i64 [ %.94.i1413, %B14.endif.i1415 ], [ %acc.2.011.ph.i1368, %B14.endif.preheader.i1370 ]
  %.17.010.i1407 = phi i64 [ %.68.i1412, %B14.endif.i1415 ], [ %.17.010.ph.i1369, %B14.endif.preheader.i1370 ]
  %sunkaddr11297 = mul i64 %.17.010.i1407, 8
  %1122 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1362 to i8*
  %sunkaddr11298 = getelementptr i8, i8* %1122, i64 %sunkaddr11297
  %sunkaddr11299 = getelementptr i8, i8* %sunkaddr11298, i64 24
  %1123 = bitcast i8* %sunkaddr11299 to i64*
  %.65.i1411 = load i64, i64* %1123, align 8, !noalias !191
  %.68.i1412 = add nuw nsw i64 %.17.010.i1407, 1
  %.94.i1413 = add nsw i64 %.65.i1411, %acc.2.011.i1406
  %exitcond.not.i1414 = icmp eq i64 %.548.i1364, %.68.i1412
  br i1 %exitcond.not.i1414, label %B1498.endif.endif.endif.endif, label %B14.endif.i1415, !llvm.loop !52

B1498.endif.endif.endif.endif:                    ; preds = %B14.endif.i1415, %middle.block.i1404, %B1498.endif.endif.endif
  %acc.2.0.lcssa.i1405 = phi i64 [ 0, %B1498.endif.endif.endif ], [ %1121, %middle.block.i1404 ], [ %.94.i1413, %B14.endif.i1415 ]
  tail call void @NRT_decref(i8* nonnull %.10455)
  %.10626 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 48, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.10627 = icmp eq i8* %.10626, null
  br i1 %.10627, label %B1498.endif.endif.endif.endif.endif.endif.if, label %B1498.endif.endif.endif.endif.endif.endif.endif, !prof !3

B1498.endif.endif.endif.endif.endif.endif.if:     ; preds = %B1498.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1498.endif.endif.endif.endif.endif.endif.endif:  ; preds = %B1498.endif.endif.endif.endif
  %.5.i1357 = getelementptr i8, i8* %.10626, i64 24
  %1124 = bitcast i8* %.5.i1357 to { i64, i64, i8, i64 }**
  %.6.i13585640 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1124, align 8
  %.10639 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i13585640, i64 0, i32 1
  store i64 3, i64* %.10639, align 8
  %.6.i13565641 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1124, align 8
  %.1064511300 = bitcast { i64, i64, i8, i64 }* %.6.i13565641 to i64*
  store i64 0, i64* %.1064511300, align 8
  %.6.i13545642 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1124, align 8
  %.10651 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i13545642, i64 0, i32 2
  store i8 0, i8* %.10651, align 1
  %.6.i13505643 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1124, align 8
  %.10664 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i13505643, i64 0, i32 3
  %.10675 = bitcast i64* %.10664 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(24) %.10675, i8 0, i64 24, i1 false)
  %.6.i13465645 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1124, align 8
  %.1069111301 = bitcast { i64, i64, i8, i64 }* %.6.i13465645 to i64*
  store i64 3, i64* %.1069111301, align 8
  %.6.i13425646 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1124, align 8
  %.10704 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i13425646, i64 0, i32 3
  store i64 2, i64* %.10704, align 8
  %.6.i13385647 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1124, align 8
  %.10718 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i13385647, i64 0, i32 3
  %.10719 = getelementptr i64, i64* %.10718, i64 1
  store i64 15, i64* %.10719, align 8
  %.6.i13345648 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1124, align 8
  %.10732 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i13345648, i64 0, i32 3
  %.10733 = getelementptr i64, i64* %.10732, i64 2
  store i64 4, i64* %.10733, align 8
  %.6.i3.i1278 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1124, align 8, !noalias !194
  %.5342.i127911302 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1278 to i64*
  %.548.i1280 = load i64, i64* %.5342.i127911302, align 8, !noalias !194
  %.559.i1281 = icmp sgt i64 %.548.i1280, 0
  br i1 %.559.i1281, label %B14.endif.lr.ph.i1283, label %B1498.endif.endif.endif.endif.endif.endif.endif.endif

B14.endif.lr.ph.i1283:                            ; preds = %B1498.endif.endif.endif.endif.endif.endif.endif
  %min.iters.check.i1282 = icmp ult i64 %.548.i1280, 16
  br i1 %min.iters.check.i1282, label %B14.endif.preheader.i1286, label %vector.ph.i1288

B14.endif.preheader.i1286:                        ; preds = %middle.block.i1320, %B14.endif.lr.ph.i1283
  %acc.2.011.ph.i1284 = phi i64 [ 0, %B14.endif.lr.ph.i1283 ], [ %1138, %middle.block.i1320 ]
  %.17.010.ph.i1285 = phi i64 [ 0, %B14.endif.lr.ph.i1283 ], [ %n.vec.i1287, %middle.block.i1320 ]
  br label %B14.endif.i1331

vector.ph.i1288:                                  ; preds = %B14.endif.lr.ph.i1283
  %n.vec.i1287 = and i64 %.548.i1280, -16
  br label %vector.body.i1311

vector.body.i1311:                                ; preds = %vector.body.i1311, %vector.ph.i1288
  %index.i1289 = phi i64 [ 0, %vector.ph.i1288 ], [ %index.next.i1310, %vector.body.i1311 ]
  %vec.phi.i1290 = phi <4 x i64> [ zeroinitializer, %vector.ph.i1288 ], [ %1133, %vector.body.i1311 ]
  %vec.phi12.i1291 = phi <4 x i64> [ zeroinitializer, %vector.ph.i1288 ], [ %1134, %vector.body.i1311 ]
  %vec.phi13.i1292 = phi <4 x i64> [ zeroinitializer, %vector.ph.i1288 ], [ %1135, %vector.body.i1311 ]
  %vec.phi14.i1293 = phi <4 x i64> [ zeroinitializer, %vector.ph.i1288 ], [ %1136, %vector.body.i1311 ]
  %sunkaddr11303 = mul i64 %index.i1289, 8
  %1125 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1278 to i8*
  %sunkaddr11304 = getelementptr i8, i8* %1125, i64 %sunkaddr11303
  %sunkaddr11305 = getelementptr i8, i8* %sunkaddr11304, i64 24
  %1126 = bitcast i8* %sunkaddr11305 to <4 x i64>*
  %wide.load.i1297 = load <4 x i64>, <4 x i64>* %1126, align 8, !noalias !194
  %sunkaddr11306 = mul i64 %index.i1289, 8
  %1127 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1278 to i8*
  %sunkaddr11307 = getelementptr i8, i8* %1127, i64 %sunkaddr11306
  %sunkaddr11308 = getelementptr i8, i8* %sunkaddr11307, i64 56
  %1128 = bitcast i8* %sunkaddr11308 to <4 x i64>*
  %wide.load15.i1301 = load <4 x i64>, <4 x i64>* %1128, align 8, !noalias !194
  %sunkaddr11309 = mul i64 %index.i1289, 8
  %1129 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1278 to i8*
  %sunkaddr11310 = getelementptr i8, i8* %1129, i64 %sunkaddr11309
  %sunkaddr11311 = getelementptr i8, i8* %sunkaddr11310, i64 88
  %1130 = bitcast i8* %sunkaddr11311 to <4 x i64>*
  %wide.load16.i1305 = load <4 x i64>, <4 x i64>* %1130, align 8, !noalias !194
  %sunkaddr11312 = mul i64 %index.i1289, 8
  %1131 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1278 to i8*
  %sunkaddr11313 = getelementptr i8, i8* %1131, i64 %sunkaddr11312
  %sunkaddr11314 = getelementptr i8, i8* %sunkaddr11313, i64 120
  %1132 = bitcast i8* %sunkaddr11314 to <4 x i64>*
  %wide.load17.i1309 = load <4 x i64>, <4 x i64>* %1132, align 8, !noalias !194
  %1133 = add <4 x i64> %wide.load.i1297, %vec.phi.i1290
  %1134 = add <4 x i64> %wide.load15.i1301, %vec.phi12.i1291
  %1135 = add <4 x i64> %wide.load16.i1305, %vec.phi13.i1292
  %1136 = add <4 x i64> %wide.load17.i1309, %vec.phi14.i1293
  %index.next.i1310 = add i64 %index.i1289, 16
  %1137 = icmp eq i64 %n.vec.i1287, %index.next.i1310
  br i1 %1137, label %middle.block.i1320, label %vector.body.i1311, !llvm.loop !51

middle.block.i1320:                               ; preds = %vector.body.i1311
  %bin.rdx.i1312 = add <4 x i64> %1134, %1133
  %bin.rdx18.i1313 = add <4 x i64> %bin.rdx.i1312, %1135
  %bin.rdx19.i1314 = add <4 x i64> %bin.rdx18.i1313, %1136
  %rdx.shuf.i1315 = shufflevector <4 x i64> %bin.rdx19.i1314, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx39.i1316 = add <4 x i64> %rdx.shuf.i1315, %bin.rdx19.i1314
  %rdx.shuf40.i1317 = shufflevector <4 x i64> %bin.rdx39.i1316, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx41.i1318 = add <4 x i64> %rdx.shuf40.i1317, %bin.rdx39.i1316
  %1138 = extractelement <4 x i64> %bin.rdx41.i1318, i32 0
  %cmp.n.i1319 = icmp eq i64 %.548.i1280, %n.vec.i1287
  br i1 %cmp.n.i1319, label %B1498.endif.endif.endif.endif.endif.endif.endif.endif, label %B14.endif.preheader.i1286

B14.endif.i1331:                                  ; preds = %B14.endif.i1331, %B14.endif.preheader.i1286
  %acc.2.011.i1322 = phi i64 [ %.94.i1329, %B14.endif.i1331 ], [ %acc.2.011.ph.i1284, %B14.endif.preheader.i1286 ]
  %.17.010.i1323 = phi i64 [ %.68.i1328, %B14.endif.i1331 ], [ %.17.010.ph.i1285, %B14.endif.preheader.i1286 ]
  %sunkaddr11315 = mul i64 %.17.010.i1323, 8
  %1139 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1278 to i8*
  %sunkaddr11316 = getelementptr i8, i8* %1139, i64 %sunkaddr11315
  %sunkaddr11317 = getelementptr i8, i8* %sunkaddr11316, i64 24
  %1140 = bitcast i8* %sunkaddr11317 to i64*
  %.65.i1327 = load i64, i64* %1140, align 8, !noalias !194
  %.68.i1328 = add nuw nsw i64 %.17.010.i1323, 1
  %.94.i1329 = add nsw i64 %.65.i1327, %acc.2.011.i1322
  %exitcond.not.i1330 = icmp eq i64 %.548.i1280, %.68.i1328
  br i1 %exitcond.not.i1330, label %B1498.endif.endif.endif.endif.endif.endif.endif.endif, label %B14.endif.i1331, !llvm.loop !52

B1498.endif.endif.endif.endif.endif.endif.endif.endif: ; preds = %B14.endif.i1331, %middle.block.i1320, %B1498.endif.endif.endif.endif.endif.endif.endif
  %acc.2.0.lcssa.i1321 = phi i64 [ 0, %B1498.endif.endif.endif.endif.endif.endif.endif ], [ %1138, %middle.block.i1320 ], [ %.94.i1329, %B14.endif.i1331 ]
  tail call void @NRT_decref(i8* nonnull %.10626)
  %.10780 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 48, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.10781 = icmp eq i8* %.10780, null
  br i1 %.10781, label %B1498.endif.endif.endif.e...endif.endif.if, label %B1498.endif.endif.endif.e...endif.endif.endif, !prof !3

B1498.endif.endif.endif.e...endif.endif.if:       ; preds = %B1498.endif.endif.endif.endif.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1498.endif.endif.endif.e...endif.endif.endif:    ; preds = %B1498.endif.endif.endif.endif.endif.endif.endif.endif
  %.5.i1273 = getelementptr i8, i8* %.10780, i64 24
  %1141 = bitcast i8* %.5.i1273 to { i64, i64, i8, i64 }**
  %.6.i12745649 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1141, align 8
  %.10793 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i12745649, i64 0, i32 1
  store i64 3, i64* %.10793, align 8
  %.6.i12725650 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1141, align 8
  %.1079911318 = bitcast { i64, i64, i8, i64 }* %.6.i12725650 to i64*
  store i64 0, i64* %.1079911318, align 8
  %.6.i12705651 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1141, align 8
  %.10805 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i12705651, i64 0, i32 2
  store i8 0, i8* %.10805, align 1
  %.6.i12665652 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1141, align 8
  %.10818 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i12665652, i64 0, i32 3
  %.10829 = bitcast i64* %.10818 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(24) %.10829, i8 0, i64 24, i1 false)
  %.6.i12625654 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1141, align 8
  %.1084511319 = bitcast { i64, i64, i8, i64 }* %.6.i12625654 to i64*
  store i64 3, i64* %.1084511319, align 8
  %.6.i12585655 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1141, align 8
  %.10858 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i12585655, i64 0, i32 3
  store i64 4, i64* %.10858, align 8
  %.6.i12545656 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1141, align 8
  %.10872 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i12545656, i64 0, i32 3
  %.10873 = getelementptr i64, i64* %.10872, i64 1
  store i64 15, i64* %.10873, align 8
  %.6.i12505657 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1141, align 8
  %.10886 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i12505657, i64 0, i32 3
  %.10887 = getelementptr i64, i64* %.10886, i64 2
  store i64 11, i64* %.10887, align 8
  %.6.i3.i1194 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1141, align 8, !noalias !197
  %.5342.i119511320 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1194 to i64*
  %.548.i1196 = load i64, i64* %.5342.i119511320, align 8, !noalias !197
  %.559.i1197 = icmp sgt i64 %.548.i1196, 0
  br i1 %.559.i1197, label %B14.endif.lr.ph.i1199, label %B1498.endif.endif.endif.e...endif.endif.endif.endif

B14.endif.lr.ph.i1199:                            ; preds = %B1498.endif.endif.endif.e...endif.endif.endif
  %min.iters.check.i1198 = icmp ult i64 %.548.i1196, 16
  br i1 %min.iters.check.i1198, label %B14.endif.preheader.i1202, label %vector.ph.i1204

B14.endif.preheader.i1202:                        ; preds = %middle.block.i1236, %B14.endif.lr.ph.i1199
  %acc.2.011.ph.i1200 = phi i64 [ 0, %B14.endif.lr.ph.i1199 ], [ %1155, %middle.block.i1236 ]
  %.17.010.ph.i1201 = phi i64 [ 0, %B14.endif.lr.ph.i1199 ], [ %n.vec.i1203, %middle.block.i1236 ]
  br label %B14.endif.i1247

vector.ph.i1204:                                  ; preds = %B14.endif.lr.ph.i1199
  %n.vec.i1203 = and i64 %.548.i1196, -16
  br label %vector.body.i1227

vector.body.i1227:                                ; preds = %vector.body.i1227, %vector.ph.i1204
  %index.i1205 = phi i64 [ 0, %vector.ph.i1204 ], [ %index.next.i1226, %vector.body.i1227 ]
  %vec.phi.i1206 = phi <4 x i64> [ zeroinitializer, %vector.ph.i1204 ], [ %1150, %vector.body.i1227 ]
  %vec.phi12.i1207 = phi <4 x i64> [ zeroinitializer, %vector.ph.i1204 ], [ %1151, %vector.body.i1227 ]
  %vec.phi13.i1208 = phi <4 x i64> [ zeroinitializer, %vector.ph.i1204 ], [ %1152, %vector.body.i1227 ]
  %vec.phi14.i1209 = phi <4 x i64> [ zeroinitializer, %vector.ph.i1204 ], [ %1153, %vector.body.i1227 ]
  %sunkaddr11321 = mul i64 %index.i1205, 8
  %1142 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1194 to i8*
  %sunkaddr11322 = getelementptr i8, i8* %1142, i64 %sunkaddr11321
  %sunkaddr11323 = getelementptr i8, i8* %sunkaddr11322, i64 24
  %1143 = bitcast i8* %sunkaddr11323 to <4 x i64>*
  %wide.load.i1213 = load <4 x i64>, <4 x i64>* %1143, align 8, !noalias !197
  %sunkaddr11324 = mul i64 %index.i1205, 8
  %1144 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1194 to i8*
  %sunkaddr11325 = getelementptr i8, i8* %1144, i64 %sunkaddr11324
  %sunkaddr11326 = getelementptr i8, i8* %sunkaddr11325, i64 56
  %1145 = bitcast i8* %sunkaddr11326 to <4 x i64>*
  %wide.load15.i1217 = load <4 x i64>, <4 x i64>* %1145, align 8, !noalias !197
  %sunkaddr11327 = mul i64 %index.i1205, 8
  %1146 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1194 to i8*
  %sunkaddr11328 = getelementptr i8, i8* %1146, i64 %sunkaddr11327
  %sunkaddr11329 = getelementptr i8, i8* %sunkaddr11328, i64 88
  %1147 = bitcast i8* %sunkaddr11329 to <4 x i64>*
  %wide.load16.i1221 = load <4 x i64>, <4 x i64>* %1147, align 8, !noalias !197
  %sunkaddr11330 = mul i64 %index.i1205, 8
  %1148 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1194 to i8*
  %sunkaddr11331 = getelementptr i8, i8* %1148, i64 %sunkaddr11330
  %sunkaddr11332 = getelementptr i8, i8* %sunkaddr11331, i64 120
  %1149 = bitcast i8* %sunkaddr11332 to <4 x i64>*
  %wide.load17.i1225 = load <4 x i64>, <4 x i64>* %1149, align 8, !noalias !197
  %1150 = add <4 x i64> %wide.load.i1213, %vec.phi.i1206
  %1151 = add <4 x i64> %wide.load15.i1217, %vec.phi12.i1207
  %1152 = add <4 x i64> %wide.load16.i1221, %vec.phi13.i1208
  %1153 = add <4 x i64> %wide.load17.i1225, %vec.phi14.i1209
  %index.next.i1226 = add i64 %index.i1205, 16
  %1154 = icmp eq i64 %n.vec.i1203, %index.next.i1226
  br i1 %1154, label %middle.block.i1236, label %vector.body.i1227, !llvm.loop !51

middle.block.i1236:                               ; preds = %vector.body.i1227
  %bin.rdx.i1228 = add <4 x i64> %1151, %1150
  %bin.rdx18.i1229 = add <4 x i64> %bin.rdx.i1228, %1152
  %bin.rdx19.i1230 = add <4 x i64> %bin.rdx18.i1229, %1153
  %rdx.shuf.i1231 = shufflevector <4 x i64> %bin.rdx19.i1230, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx39.i1232 = add <4 x i64> %rdx.shuf.i1231, %bin.rdx19.i1230
  %rdx.shuf40.i1233 = shufflevector <4 x i64> %bin.rdx39.i1232, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx41.i1234 = add <4 x i64> %rdx.shuf40.i1233, %bin.rdx39.i1232
  %1155 = extractelement <4 x i64> %bin.rdx41.i1234, i32 0
  %cmp.n.i1235 = icmp eq i64 %.548.i1196, %n.vec.i1203
  br i1 %cmp.n.i1235, label %B1498.endif.endif.endif.e...endif.endif.endif.endif, label %B14.endif.preheader.i1202

B14.endif.i1247:                                  ; preds = %B14.endif.i1247, %B14.endif.preheader.i1202
  %acc.2.011.i1238 = phi i64 [ %.94.i1245, %B14.endif.i1247 ], [ %acc.2.011.ph.i1200, %B14.endif.preheader.i1202 ]
  %.17.010.i1239 = phi i64 [ %.68.i1244, %B14.endif.i1247 ], [ %.17.010.ph.i1201, %B14.endif.preheader.i1202 ]
  %sunkaddr11333 = mul i64 %.17.010.i1239, 8
  %1156 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1194 to i8*
  %sunkaddr11334 = getelementptr i8, i8* %1156, i64 %sunkaddr11333
  %sunkaddr11335 = getelementptr i8, i8* %sunkaddr11334, i64 24
  %1157 = bitcast i8* %sunkaddr11335 to i64*
  %.65.i1243 = load i64, i64* %1157, align 8, !noalias !197
  %.68.i1244 = add nuw nsw i64 %.17.010.i1239, 1
  %.94.i1245 = add nsw i64 %.65.i1243, %acc.2.011.i1238
  %exitcond.not.i1246 = icmp eq i64 %.548.i1196, %.68.i1244
  br i1 %exitcond.not.i1246, label %B1498.endif.endif.endif.e...endif.endif.endif.endif, label %B14.endif.i1247, !llvm.loop !52

B1498.endif.endif.endif.e...endif.endif.endif.endif: ; preds = %B14.endif.i1247, %middle.block.i1236, %B1498.endif.endif.endif.e...endif.endif.endif
  %acc.2.0.lcssa.i1237 = phi i64 [ 0, %B1498.endif.endif.endif.e...endif.endif.endif ], [ %1155, %middle.block.i1236 ], [ %.94.i1245, %B14.endif.i1247 ]
  tail call void @NRT_decref(i8* nonnull %.10780)
  %.10934 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 48, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.10935 = icmp eq i8* %.10934, null
  br i1 %.10935, label %B1498.endif.endif.endif.e...endif.1.endif.if, label %B1498.endif.endif.endif.e...endif.1.endif.endif, !prof !3

B1498.endif.endif.endif.e...endif.1.endif.if:     ; preds = %B1498.endif.endif.endif.e...endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1498.endif.endif.endif.e...endif.1.endif.endif:  ; preds = %B1498.endif.endif.endif.e...endif.endif.endif.endif
  %.5.i1189 = getelementptr i8, i8* %.10934, i64 24
  %1158 = bitcast i8* %.5.i1189 to { i64, i64, i8, i64 }**
  %.6.i11905658 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1158, align 8
  %.10947 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11905658, i64 0, i32 1
  store i64 3, i64* %.10947, align 8
  %.6.i11885659 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1158, align 8
  %.1095311336 = bitcast { i64, i64, i8, i64 }* %.6.i11885659 to i64*
  store i64 0, i64* %.1095311336, align 8
  %.6.i11865660 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1158, align 8
  %.10959 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11865660, i64 0, i32 2
  store i8 0, i8* %.10959, align 1
  %.6.i11825661 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1158, align 8
  %.10972 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11825661, i64 0, i32 3
  %.10983 = bitcast i64* %.10972 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(24) %.10983, i8 0, i64 24, i1 false)
  %.6.i11785663 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1158, align 8
  %.1099911337 = bitcast { i64, i64, i8, i64 }* %.6.i11785663 to i64*
  store i64 3, i64* %.1099911337, align 8
  %.6.i11745664 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1158, align 8
  %.11012 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11745664, i64 0, i32 3
  store i64 7, i64* %.11012, align 8
  %.6.i11705665 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1158, align 8
  %.11026 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11705665, i64 0, i32 3
  %.11027 = getelementptr i64, i64* %.11026, i64 1
  store i64 15, i64* %.11027, align 8
  %.6.i11665666 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1158, align 8
  %.11040 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11665666, i64 0, i32 3
  %.11041 = getelementptr i64, i64* %.11040, i64 2
  store i64 9, i64* %.11041, align 8
  %.6.i3.i1110 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1158, align 8, !noalias !200
  %.5342.i111111338 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1110 to i64*
  %.548.i1112 = load i64, i64* %.5342.i111111338, align 8, !noalias !200
  %.559.i1113 = icmp sgt i64 %.548.i1112, 0
  br i1 %.559.i1113, label %B14.endif.lr.ph.i1115, label %B1498.endif.endif.endif.e...endif.1.endif.endif.endif

B14.endif.lr.ph.i1115:                            ; preds = %B1498.endif.endif.endif.e...endif.1.endif.endif
  %min.iters.check.i1114 = icmp ult i64 %.548.i1112, 16
  br i1 %min.iters.check.i1114, label %B14.endif.preheader.i1118, label %vector.ph.i1120

B14.endif.preheader.i1118:                        ; preds = %middle.block.i1152, %B14.endif.lr.ph.i1115
  %acc.2.011.ph.i1116 = phi i64 [ 0, %B14.endif.lr.ph.i1115 ], [ %1172, %middle.block.i1152 ]
  %.17.010.ph.i1117 = phi i64 [ 0, %B14.endif.lr.ph.i1115 ], [ %n.vec.i1119, %middle.block.i1152 ]
  br label %B14.endif.i1163

vector.ph.i1120:                                  ; preds = %B14.endif.lr.ph.i1115
  %n.vec.i1119 = and i64 %.548.i1112, -16
  br label %vector.body.i1143

vector.body.i1143:                                ; preds = %vector.body.i1143, %vector.ph.i1120
  %index.i1121 = phi i64 [ 0, %vector.ph.i1120 ], [ %index.next.i1142, %vector.body.i1143 ]
  %vec.phi.i1122 = phi <4 x i64> [ zeroinitializer, %vector.ph.i1120 ], [ %1167, %vector.body.i1143 ]
  %vec.phi12.i1123 = phi <4 x i64> [ zeroinitializer, %vector.ph.i1120 ], [ %1168, %vector.body.i1143 ]
  %vec.phi13.i1124 = phi <4 x i64> [ zeroinitializer, %vector.ph.i1120 ], [ %1169, %vector.body.i1143 ]
  %vec.phi14.i1125 = phi <4 x i64> [ zeroinitializer, %vector.ph.i1120 ], [ %1170, %vector.body.i1143 ]
  %sunkaddr11339 = mul i64 %index.i1121, 8
  %1159 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1110 to i8*
  %sunkaddr11340 = getelementptr i8, i8* %1159, i64 %sunkaddr11339
  %sunkaddr11341 = getelementptr i8, i8* %sunkaddr11340, i64 24
  %1160 = bitcast i8* %sunkaddr11341 to <4 x i64>*
  %wide.load.i1129 = load <4 x i64>, <4 x i64>* %1160, align 8, !noalias !200
  %sunkaddr11342 = mul i64 %index.i1121, 8
  %1161 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1110 to i8*
  %sunkaddr11343 = getelementptr i8, i8* %1161, i64 %sunkaddr11342
  %sunkaddr11344 = getelementptr i8, i8* %sunkaddr11343, i64 56
  %1162 = bitcast i8* %sunkaddr11344 to <4 x i64>*
  %wide.load15.i1133 = load <4 x i64>, <4 x i64>* %1162, align 8, !noalias !200
  %sunkaddr11345 = mul i64 %index.i1121, 8
  %1163 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1110 to i8*
  %sunkaddr11346 = getelementptr i8, i8* %1163, i64 %sunkaddr11345
  %sunkaddr11347 = getelementptr i8, i8* %sunkaddr11346, i64 88
  %1164 = bitcast i8* %sunkaddr11347 to <4 x i64>*
  %wide.load16.i1137 = load <4 x i64>, <4 x i64>* %1164, align 8, !noalias !200
  %sunkaddr11348 = mul i64 %index.i1121, 8
  %1165 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1110 to i8*
  %sunkaddr11349 = getelementptr i8, i8* %1165, i64 %sunkaddr11348
  %sunkaddr11350 = getelementptr i8, i8* %sunkaddr11349, i64 120
  %1166 = bitcast i8* %sunkaddr11350 to <4 x i64>*
  %wide.load17.i1141 = load <4 x i64>, <4 x i64>* %1166, align 8, !noalias !200
  %1167 = add <4 x i64> %wide.load.i1129, %vec.phi.i1122
  %1168 = add <4 x i64> %wide.load15.i1133, %vec.phi12.i1123
  %1169 = add <4 x i64> %wide.load16.i1137, %vec.phi13.i1124
  %1170 = add <4 x i64> %wide.load17.i1141, %vec.phi14.i1125
  %index.next.i1142 = add i64 %index.i1121, 16
  %1171 = icmp eq i64 %n.vec.i1119, %index.next.i1142
  br i1 %1171, label %middle.block.i1152, label %vector.body.i1143, !llvm.loop !51

middle.block.i1152:                               ; preds = %vector.body.i1143
  %bin.rdx.i1144 = add <4 x i64> %1168, %1167
  %bin.rdx18.i1145 = add <4 x i64> %bin.rdx.i1144, %1169
  %bin.rdx19.i1146 = add <4 x i64> %bin.rdx18.i1145, %1170
  %rdx.shuf.i1147 = shufflevector <4 x i64> %bin.rdx19.i1146, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx39.i1148 = add <4 x i64> %rdx.shuf.i1147, %bin.rdx19.i1146
  %rdx.shuf40.i1149 = shufflevector <4 x i64> %bin.rdx39.i1148, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx41.i1150 = add <4 x i64> %rdx.shuf40.i1149, %bin.rdx39.i1148
  %1172 = extractelement <4 x i64> %bin.rdx41.i1150, i32 0
  %cmp.n.i1151 = icmp eq i64 %.548.i1112, %n.vec.i1119
  br i1 %cmp.n.i1151, label %B1498.endif.endif.endif.e...endif.1.endif.endif.endif, label %B14.endif.preheader.i1118

B14.endif.i1163:                                  ; preds = %B14.endif.i1163, %B14.endif.preheader.i1118
  %acc.2.011.i1154 = phi i64 [ %.94.i1161, %B14.endif.i1163 ], [ %acc.2.011.ph.i1116, %B14.endif.preheader.i1118 ]
  %.17.010.i1155 = phi i64 [ %.68.i1160, %B14.endif.i1163 ], [ %.17.010.ph.i1117, %B14.endif.preheader.i1118 ]
  %sunkaddr11351 = mul i64 %.17.010.i1155, 8
  %1173 = bitcast { i64, i64, i8, i64 }* %.6.i3.i1110 to i8*
  %sunkaddr11352 = getelementptr i8, i8* %1173, i64 %sunkaddr11351
  %sunkaddr11353 = getelementptr i8, i8* %sunkaddr11352, i64 24
  %1174 = bitcast i8* %sunkaddr11353 to i64*
  %.65.i1159 = load i64, i64* %1174, align 8, !noalias !200
  %.68.i1160 = add nuw nsw i64 %.17.010.i1155, 1
  %.94.i1161 = add nsw i64 %.65.i1159, %acc.2.011.i1154
  %exitcond.not.i1162 = icmp eq i64 %.548.i1112, %.68.i1160
  br i1 %exitcond.not.i1162, label %B1498.endif.endif.endif.e...endif.1.endif.endif.endif, label %B14.endif.i1163, !llvm.loop !52

B1498.endif.endif.endif.e...endif.1.endif.endif.endif: ; preds = %B14.endif.i1163, %middle.block.i1152, %B1498.endif.endif.endif.e...endif.1.endif.endif
  %acc.2.0.lcssa.i1153 = phi i64 [ 0, %B1498.endif.endif.endif.e...endif.1.endif.endif ], [ %1172, %middle.block.i1152 ], [ %.94.i1161, %B14.endif.i1163 ]
  tail call void @NRT_decref(i8* nonnull %.10934)
  %.11088 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 48, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.11089 = icmp eq i8* %.11088, null
  br i1 %.11089, label %B1498.endif.endif.endif.e...endif.2.endif.if, label %B1498.endif.endif.endif.e...endif.2.endif.endif, !prof !3

B1498.endif.endif.endif.e...endif.2.endif.if:     ; preds = %B1498.endif.endif.endif.e...endif.1.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1498.endif.endif.endif.e...endif.2.endif.endif:  ; preds = %B1498.endif.endif.endif.e...endif.1.endif.endif.endif
  %.5.i1105 = getelementptr i8, i8* %.11088, i64 24
  %1175 = bitcast i8* %.5.i1105 to { i64, i64, i8, i64 }**
  %.6.i11065667 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1175, align 8
  %.11101 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11065667, i64 0, i32 1
  store i64 3, i64* %.11101, align 8
  %.6.i11045668 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1175, align 8
  %.1110711354 = bitcast { i64, i64, i8, i64 }* %.6.i11045668 to i64*
  store i64 0, i64* %.1110711354, align 8
  %.6.i11025669 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1175, align 8
  %.11113 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11025669, i64 0, i32 2
  store i8 0, i8* %.11113, align 1
  %.6.i10985670 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1175, align 8
  %.11126 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i10985670, i64 0, i32 3
  %.11137 = bitcast i64* %.11126 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(24) %.11137, i8 0, i64 24, i1 false)
  %.6.i10945672 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1175, align 8
  %.1115311355 = bitcast { i64, i64, i8, i64 }* %.6.i10945672 to i64*
  store i64 3, i64* %.1115311355, align 8
  %.6.i10905673 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1175, align 8
  %.11166 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i10905673, i64 0, i32 3
  store i64 %acc.2.0.lcssa.i1321, i64* %.11166, align 8
  %.6.i10865674 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1175, align 8
  %.11180 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i10865674, i64 0, i32 3
  %.11181 = getelementptr i64, i64* %.11180, i64 1
  store i64 %acc.2.0.lcssa.i1237, i64* %.11181, align 8
  %.6.i10825675 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1175, align 8
  %.11194 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i10825675, i64 0, i32 3
  %.11195 = getelementptr i64, i64* %.11194, i64 2
  store i64 %acc.2.0.lcssa.i1153, i64* %.11195, align 8
  %.6.i284856766783 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1175, align 8
  %.11244678411356 = bitcast { i64, i64, i8, i64 }* %.6.i284856766783 to i64*
  %.112456785 = load i64, i64* %.11244678411356, align 8
  %.112466786 = icmp sgt i64 %.112456785, 0
  br i1 %.112466786, label %B1513.lr.ph, label %B1525

B1513.lr.ph:                                      ; preds = %B1498.endif.endif.endif.e...endif.2.endif.endif
  %min.iters.check8188 = icmp ult i64 %.112456785, 16
  br i1 %min.iters.check8188, label %B1513.preheader, label %vector.ph8189

B1513.preheader:                                  ; preds = %middle.block8185, %B1513.lr.ph
  %temp.2.161.2.06788.ph = phi i64 [ 1, %B1513.lr.ph ], [ %1189, %middle.block8185 ]
  %.11210.06787.ph = phi i64 [ 0, %B1513.lr.ph ], [ %n.vec8191, %middle.block8185 ]
  br label %B1513

vector.ph8189:                                    ; preds = %B1513.lr.ph
  %n.vec8191 = and i64 %.112456785, -16
  br label %vector.body8187

vector.body8187:                                  ; preds = %vector.body8187, %vector.ph8189
  %index8192 = phi i64 [ 0, %vector.ph8189 ], [ %index.next8193, %vector.body8187 ]
  %vec.phi8196 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8189 ], [ %1184, %vector.body8187 ]
  %vec.phi8197 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8189 ], [ %1185, %vector.body8187 ]
  %vec.phi8198 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8189 ], [ %1186, %vector.body8187 ]
  %vec.phi8199 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8189 ], [ %1187, %vector.body8187 ]
  %sunkaddr11357 = mul i64 %index8192, 8
  %1176 = bitcast { i64, i64, i8, i64 }* %.6.i284856766783 to i8*
  %sunkaddr11358 = getelementptr i8, i8* %1176, i64 %sunkaddr11357
  %sunkaddr11359 = getelementptr i8, i8* %sunkaddr11358, i64 24
  %1177 = bitcast i8* %sunkaddr11359 to <4 x i64>*
  %wide.load8200 = load <4 x i64>, <4 x i64>* %1177, align 8
  %sunkaddr11360 = mul i64 %index8192, 8
  %1178 = bitcast { i64, i64, i8, i64 }* %.6.i284856766783 to i8*
  %sunkaddr11361 = getelementptr i8, i8* %1178, i64 %sunkaddr11360
  %sunkaddr11362 = getelementptr i8, i8* %sunkaddr11361, i64 56
  %1179 = bitcast i8* %sunkaddr11362 to <4 x i64>*
  %wide.load8201 = load <4 x i64>, <4 x i64>* %1179, align 8
  %sunkaddr11363 = mul i64 %index8192, 8
  %1180 = bitcast { i64, i64, i8, i64 }* %.6.i284856766783 to i8*
  %sunkaddr11364 = getelementptr i8, i8* %1180, i64 %sunkaddr11363
  %sunkaddr11365 = getelementptr i8, i8* %sunkaddr11364, i64 88
  %1181 = bitcast i8* %sunkaddr11365 to <4 x i64>*
  %wide.load8202 = load <4 x i64>, <4 x i64>* %1181, align 8
  %sunkaddr11366 = mul i64 %index8192, 8
  %1182 = bitcast { i64, i64, i8, i64 }* %.6.i284856766783 to i8*
  %sunkaddr11367 = getelementptr i8, i8* %1182, i64 %sunkaddr11366
  %sunkaddr11368 = getelementptr i8, i8* %sunkaddr11367, i64 120
  %1183 = bitcast i8* %sunkaddr11368 to <4 x i64>*
  %wide.load8203 = load <4 x i64>, <4 x i64>* %1183, align 8
  %1184 = mul <4 x i64> %wide.load8200, %vec.phi8196
  %1185 = mul <4 x i64> %wide.load8201, %vec.phi8197
  %1186 = mul <4 x i64> %wide.load8202, %vec.phi8198
  %1187 = mul <4 x i64> %wide.load8203, %vec.phi8199
  %index.next8193 = add i64 %index8192, 16
  %1188 = icmp eq i64 %n.vec8191, %index.next8193
  br i1 %1188, label %middle.block8185, label %vector.body8187, !llvm.loop !203

middle.block8185:                                 ; preds = %vector.body8187
  %bin.rdx8204 = mul <4 x i64> %1185, %1184
  %bin.rdx8205 = mul <4 x i64> %1186, %bin.rdx8204
  %bin.rdx8206 = mul <4 x i64> %1187, %bin.rdx8205
  %rdx.shuf10183 = shufflevector <4 x i64> %bin.rdx8206, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10184 = mul <4 x i64> %bin.rdx8206, %rdx.shuf10183
  %rdx.shuf10185 = shufflevector <4 x i64> %bin.rdx10184, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10186 = mul <4 x i64> %bin.rdx10184, %rdx.shuf10185
  %1189 = extractelement <4 x i64> %bin.rdx10186, i32 0
  %cmp.n8195 = icmp eq i64 %.112456785, %n.vec8191
  br i1 %cmp.n8195, label %B1525, label %B1513.preheader

B1552.endif.endif.if:                             ; preds = %B1525
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1552.endif.endif.endif:                          ; preds = %B1525
  %.5.i1077 = getelementptr i8, i8* %.11341, i64 24
  %1190 = bitcast i8* %.5.i1077 to { i64, i64, i8, i64 }**
  %.6.i10785677 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1190, align 8
  %.11354 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i10785677, i64 0, i32 1
  store i64 2, i64* %.11354, align 8
  %.6.i10765678 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1190, align 8
  %.1136011369 = bitcast { i64, i64, i8, i64 }* %.6.i10765678 to i64*
  store i64 0, i64* %.1136011369, align 8
  %.6.i10745679 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1190, align 8
  %.11366 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i10745679, i64 0, i32 2
  store i8 0, i8* %.11366, align 1
  %.6.i10705680 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1190, align 8
  %.11379 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i10705680, i64 0, i32 3
  %.11390 = bitcast i64* %.11379 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %.11390, i8 0, i64 16, i1 false)
  %.6.i10665682 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1190, align 8
  %.1140611370 = bitcast { i64, i64, i8, i64 }* %.6.i10665682 to i64*
  store i64 2, i64* %.1140611370, align 8
  %.6.i10625683 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1190, align 8
  %.11419 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i10625683, i64 0, i32 3
  store i64 0, i64* %.11419, align 8
  %.6.i10585684 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1190, align 8
  %.11433 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i10585684, i64 0, i32 3
  %.11434 = getelementptr i64, i64* %.11433, i64 1
  store i64 44586, i64* %.11434, align 8
  %.6.i293256856775 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1190, align 8
  %.11485677611371 = bitcast { i64, i64, i8, i64 }* %.6.i293256856775 to i64*
  %.114866777 = load i64, i64* %.11485677611371, align 8
  %.114876778 = icmp sgt i64 %.114866777, 0
  br i1 %.114876778, label %B1567.lr.ph, label %B1579

B1567.lr.ph:                                      ; preds = %B1552.endif.endif.endif
  %min.iters.check8211 = icmp ult i64 %.114866777, 16
  br i1 %min.iters.check8211, label %B1567.preheader, label %vector.ph8212

B1567.preheader:                                  ; preds = %middle.block8208, %B1567.lr.ph
  %temp.2.125.2.06780.ph = phi i64 [ 1, %B1567.lr.ph ], [ %1204, %middle.block8208 ]
  %.11451.06779.ph = phi i64 [ 0, %B1567.lr.ph ], [ %n.vec8214, %middle.block8208 ]
  br label %B1567

vector.ph8212:                                    ; preds = %B1567.lr.ph
  %n.vec8214 = and i64 %.114866777, -16
  br label %vector.body8210

vector.body8210:                                  ; preds = %vector.body8210, %vector.ph8212
  %index8215 = phi i64 [ 0, %vector.ph8212 ], [ %index.next8216, %vector.body8210 ]
  %vec.phi8219 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8212 ], [ %1199, %vector.body8210 ]
  %vec.phi8220 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8212 ], [ %1200, %vector.body8210 ]
  %vec.phi8221 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8212 ], [ %1201, %vector.body8210 ]
  %vec.phi8222 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8212 ], [ %1202, %vector.body8210 ]
  %sunkaddr11372 = mul i64 %index8215, 8
  %1191 = bitcast { i64, i64, i8, i64 }* %.6.i293256856775 to i8*
  %sunkaddr11373 = getelementptr i8, i8* %1191, i64 %sunkaddr11372
  %sunkaddr11374 = getelementptr i8, i8* %sunkaddr11373, i64 24
  %1192 = bitcast i8* %sunkaddr11374 to <4 x i64>*
  %wide.load8223 = load <4 x i64>, <4 x i64>* %1192, align 8
  %sunkaddr11375 = mul i64 %index8215, 8
  %1193 = bitcast { i64, i64, i8, i64 }* %.6.i293256856775 to i8*
  %sunkaddr11376 = getelementptr i8, i8* %1193, i64 %sunkaddr11375
  %sunkaddr11377 = getelementptr i8, i8* %sunkaddr11376, i64 56
  %1194 = bitcast i8* %sunkaddr11377 to <4 x i64>*
  %wide.load8224 = load <4 x i64>, <4 x i64>* %1194, align 8
  %sunkaddr11378 = mul i64 %index8215, 8
  %1195 = bitcast { i64, i64, i8, i64 }* %.6.i293256856775 to i8*
  %sunkaddr11379 = getelementptr i8, i8* %1195, i64 %sunkaddr11378
  %sunkaddr11380 = getelementptr i8, i8* %sunkaddr11379, i64 88
  %1196 = bitcast i8* %sunkaddr11380 to <4 x i64>*
  %wide.load8225 = load <4 x i64>, <4 x i64>* %1196, align 8
  %sunkaddr11381 = mul i64 %index8215, 8
  %1197 = bitcast { i64, i64, i8, i64 }* %.6.i293256856775 to i8*
  %sunkaddr11382 = getelementptr i8, i8* %1197, i64 %sunkaddr11381
  %sunkaddr11383 = getelementptr i8, i8* %sunkaddr11382, i64 120
  %1198 = bitcast i8* %sunkaddr11383 to <4 x i64>*
  %wide.load8226 = load <4 x i64>, <4 x i64>* %1198, align 8
  %1199 = mul <4 x i64> %wide.load8223, %vec.phi8219
  %1200 = mul <4 x i64> %wide.load8224, %vec.phi8220
  %1201 = mul <4 x i64> %wide.load8225, %vec.phi8221
  %1202 = mul <4 x i64> %wide.load8226, %vec.phi8222
  %index.next8216 = add i64 %index8215, 16
  %1203 = icmp eq i64 %n.vec8214, %index.next8216
  br i1 %1203, label %middle.block8208, label %vector.body8210, !llvm.loop !204

middle.block8208:                                 ; preds = %vector.body8210
  %bin.rdx8227 = mul <4 x i64> %1200, %1199
  %bin.rdx8228 = mul <4 x i64> %1201, %bin.rdx8227
  %bin.rdx8229 = mul <4 x i64> %1202, %bin.rdx8228
  %rdx.shuf10187 = shufflevector <4 x i64> %bin.rdx8229, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10188 = mul <4 x i64> %bin.rdx8229, %rdx.shuf10187
  %rdx.shuf10189 = shufflevector <4 x i64> %bin.rdx10188, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10190 = mul <4 x i64> %bin.rdx10188, %rdx.shuf10189
  %1204 = extractelement <4 x i64> %bin.rdx10190, i32 0
  %cmp.n8218 = icmp eq i64 %.114866777, %n.vec8214
  br i1 %cmp.n8218, label %B1579, label %B1567.preheader

B1579.endif.endif.if:                             ; preds = %B1579
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1579.endif.endif.endif:                          ; preds = %B1579
  %.5.i1053 = getelementptr i8, i8* %.11557, i64 24
  %1205 = bitcast i8* %.5.i1053 to { i64, i64, i8, i64 }**
  %.6.i10545686 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1205, align 8
  %.11570 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i10545686, i64 0, i32 1
  store i64 2, i64* %.11570, align 8
  %.6.i10525687 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1205, align 8
  %.1157611384 = bitcast { i64, i64, i8, i64 }* %.6.i10525687 to i64*
  store i64 0, i64* %.1157611384, align 8
  %.6.i10505688 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1205, align 8
  %.11582 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i10505688, i64 0, i32 2
  store i8 0, i8* %.11582, align 1
  %.6.i10465689 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1205, align 8
  %.11595 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i10465689, i64 0, i32 3
  %.11606 = bitcast i64* %.11595 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %.11606, i8 0, i64 16, i1 false)
  %.6.i10425691 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1205, align 8
  %.1162211385 = bitcast { i64, i64, i8, i64 }* %.6.i10425691 to i64*
  store i64 2, i64* %.1162211385, align 8
  %.6.i10385692 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1205, align 8
  %.11635 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i10385692, i64 0, i32 3
  store i64 14, i64* %.11635, align 8
  %.6.i10345693 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1205, align 8
  %.11649 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i10345693, i64 0, i32 3
  %.11650 = getelementptr i64, i64* %.11649, i64 1
  store i64 1, i64* %.11650, align 8
  %.6.i3.i978 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1205, align 8, !noalias !205
  %.5342.i97911386 = bitcast { i64, i64, i8, i64 }* %.6.i3.i978 to i64*
  %.548.i980 = load i64, i64* %.5342.i97911386, align 8, !noalias !205
  %.559.i981 = icmp sgt i64 %.548.i980, 0
  br i1 %.559.i981, label %B14.endif.lr.ph.i983, label %B1579.endif.endif.endif.endif

B14.endif.lr.ph.i983:                             ; preds = %B1579.endif.endif.endif
  %min.iters.check.i982 = icmp ult i64 %.548.i980, 16
  br i1 %min.iters.check.i982, label %B14.endif.preheader.i986, label %vector.ph.i988

B14.endif.preheader.i986:                         ; preds = %middle.block.i1020, %B14.endif.lr.ph.i983
  %acc.2.011.ph.i984 = phi i64 [ 0, %B14.endif.lr.ph.i983 ], [ %1219, %middle.block.i1020 ]
  %.17.010.ph.i985 = phi i64 [ 0, %B14.endif.lr.ph.i983 ], [ %n.vec.i987, %middle.block.i1020 ]
  br label %B14.endif.i1031

vector.ph.i988:                                   ; preds = %B14.endif.lr.ph.i983
  %n.vec.i987 = and i64 %.548.i980, -16
  br label %vector.body.i1011

vector.body.i1011:                                ; preds = %vector.body.i1011, %vector.ph.i988
  %index.i989 = phi i64 [ 0, %vector.ph.i988 ], [ %index.next.i1010, %vector.body.i1011 ]
  %vec.phi.i990 = phi <4 x i64> [ zeroinitializer, %vector.ph.i988 ], [ %1214, %vector.body.i1011 ]
  %vec.phi12.i991 = phi <4 x i64> [ zeroinitializer, %vector.ph.i988 ], [ %1215, %vector.body.i1011 ]
  %vec.phi13.i992 = phi <4 x i64> [ zeroinitializer, %vector.ph.i988 ], [ %1216, %vector.body.i1011 ]
  %vec.phi14.i993 = phi <4 x i64> [ zeroinitializer, %vector.ph.i988 ], [ %1217, %vector.body.i1011 ]
  %sunkaddr11387 = mul i64 %index.i989, 8
  %1206 = bitcast { i64, i64, i8, i64 }* %.6.i3.i978 to i8*
  %sunkaddr11388 = getelementptr i8, i8* %1206, i64 %sunkaddr11387
  %sunkaddr11389 = getelementptr i8, i8* %sunkaddr11388, i64 24
  %1207 = bitcast i8* %sunkaddr11389 to <4 x i64>*
  %wide.load.i997 = load <4 x i64>, <4 x i64>* %1207, align 8, !noalias !205
  %sunkaddr11390 = mul i64 %index.i989, 8
  %1208 = bitcast { i64, i64, i8, i64 }* %.6.i3.i978 to i8*
  %sunkaddr11391 = getelementptr i8, i8* %1208, i64 %sunkaddr11390
  %sunkaddr11392 = getelementptr i8, i8* %sunkaddr11391, i64 56
  %1209 = bitcast i8* %sunkaddr11392 to <4 x i64>*
  %wide.load15.i1001 = load <4 x i64>, <4 x i64>* %1209, align 8, !noalias !205
  %sunkaddr11393 = mul i64 %index.i989, 8
  %1210 = bitcast { i64, i64, i8, i64 }* %.6.i3.i978 to i8*
  %sunkaddr11394 = getelementptr i8, i8* %1210, i64 %sunkaddr11393
  %sunkaddr11395 = getelementptr i8, i8* %sunkaddr11394, i64 88
  %1211 = bitcast i8* %sunkaddr11395 to <4 x i64>*
  %wide.load16.i1005 = load <4 x i64>, <4 x i64>* %1211, align 8, !noalias !205
  %sunkaddr11396 = mul i64 %index.i989, 8
  %1212 = bitcast { i64, i64, i8, i64 }* %.6.i3.i978 to i8*
  %sunkaddr11397 = getelementptr i8, i8* %1212, i64 %sunkaddr11396
  %sunkaddr11398 = getelementptr i8, i8* %sunkaddr11397, i64 120
  %1213 = bitcast i8* %sunkaddr11398 to <4 x i64>*
  %wide.load17.i1009 = load <4 x i64>, <4 x i64>* %1213, align 8, !noalias !205
  %1214 = add <4 x i64> %wide.load.i997, %vec.phi.i990
  %1215 = add <4 x i64> %wide.load15.i1001, %vec.phi12.i991
  %1216 = add <4 x i64> %wide.load16.i1005, %vec.phi13.i992
  %1217 = add <4 x i64> %wide.load17.i1009, %vec.phi14.i993
  %index.next.i1010 = add i64 %index.i989, 16
  %1218 = icmp eq i64 %n.vec.i987, %index.next.i1010
  br i1 %1218, label %middle.block.i1020, label %vector.body.i1011, !llvm.loop !51

middle.block.i1020:                               ; preds = %vector.body.i1011
  %bin.rdx.i1012 = add <4 x i64> %1215, %1214
  %bin.rdx18.i1013 = add <4 x i64> %bin.rdx.i1012, %1216
  %bin.rdx19.i1014 = add <4 x i64> %bin.rdx18.i1013, %1217
  %rdx.shuf.i1015 = shufflevector <4 x i64> %bin.rdx19.i1014, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx39.i1016 = add <4 x i64> %rdx.shuf.i1015, %bin.rdx19.i1014
  %rdx.shuf40.i1017 = shufflevector <4 x i64> %bin.rdx39.i1016, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx41.i1018 = add <4 x i64> %rdx.shuf40.i1017, %bin.rdx39.i1016
  %1219 = extractelement <4 x i64> %bin.rdx41.i1018, i32 0
  %cmp.n.i1019 = icmp eq i64 %.548.i980, %n.vec.i987
  br i1 %cmp.n.i1019, label %B1579.endif.endif.endif.endif, label %B14.endif.preheader.i986

B14.endif.i1031:                                  ; preds = %B14.endif.i1031, %B14.endif.preheader.i986
  %acc.2.011.i1022 = phi i64 [ %.94.i1029, %B14.endif.i1031 ], [ %acc.2.011.ph.i984, %B14.endif.preheader.i986 ]
  %.17.010.i1023 = phi i64 [ %.68.i1028, %B14.endif.i1031 ], [ %.17.010.ph.i985, %B14.endif.preheader.i986 ]
  %sunkaddr11399 = mul i64 %.17.010.i1023, 8
  %1220 = bitcast { i64, i64, i8, i64 }* %.6.i3.i978 to i8*
  %sunkaddr11400 = getelementptr i8, i8* %1220, i64 %sunkaddr11399
  %sunkaddr11401 = getelementptr i8, i8* %sunkaddr11400, i64 24
  %1221 = bitcast i8* %sunkaddr11401 to i64*
  %.65.i1027 = load i64, i64* %1221, align 8, !noalias !205
  %.68.i1028 = add nuw nsw i64 %.17.010.i1023, 1
  %.94.i1029 = add nsw i64 %.65.i1027, %acc.2.011.i1022
  %exitcond.not.i1030 = icmp eq i64 %.548.i980, %.68.i1028
  br i1 %exitcond.not.i1030, label %B1579.endif.endif.endif.endif, label %B14.endif.i1031, !llvm.loop !52

B1579.endif.endif.endif.endif:                    ; preds = %B14.endif.i1031, %middle.block.i1020, %B1579.endif.endif.endif
  %acc.2.0.lcssa.i1021 = phi i64 [ 0, %B1579.endif.endif.endif ], [ %1219, %middle.block.i1020 ], [ %.94.i1029, %B14.endif.i1031 ]
  tail call void @NRT_decref(i8* nonnull %.11557)
  %.11697 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 40, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.11698 = icmp eq i8* %.11697, null
  br i1 %.11698, label %B1579.endif.endif.endif.endif.endif.endif.if, label %B1579.endif.endif.endif.endif.endif.endif.endif, !prof !3

B1579.endif.endif.endif.endif.endif.endif.if:     ; preds = %B1579.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1579.endif.endif.endif.endif.endif.endif.endif:  ; preds = %B1579.endif.endif.endif.endif
  %.5.i973 = getelementptr i8, i8* %.11697, i64 24
  %1222 = bitcast i8* %.5.i973 to { i64, i64, i8, i64 }**
  %.6.i9745694 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1222, align 8
  %.11710 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i9745694, i64 0, i32 1
  store i64 2, i64* %.11710, align 8
  %.6.i9725695 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1222, align 8
  %.1171611402 = bitcast { i64, i64, i8, i64 }* %.6.i9725695 to i64*
  store i64 0, i64* %.1171611402, align 8
  %.6.i9705696 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1222, align 8
  %.11722 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i9705696, i64 0, i32 2
  store i8 0, i8* %.11722, align 1
  %.6.i9665697 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1222, align 8
  %.11735 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i9665697, i64 0, i32 3
  %.11746 = bitcast i64* %.11735 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %.11746, i8 0, i64 16, i1 false)
  %.6.i9625699 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1222, align 8
  %.1176211403 = bitcast { i64, i64, i8, i64 }* %.6.i9625699 to i64*
  store i64 2, i64* %.1176211403, align 8
  %.6.i9585700 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1222, align 8
  %.11775 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i9585700, i64 0, i32 3
  store i64 3511, i64* %.11775, align 8
  %.6.i9545701 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1222, align 8
  %.11789 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i9545701, i64 0, i32 3
  %.11790 = getelementptr i64, i64* %.11789, i64 1
  store i64 10, i64* %.11790, align 8
  %.6.i11.i882 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1222, align 8, !noalias !208
  %.4061.i88311404 = bitcast { i64, i64, i8, i64 }* %.6.i11.i882 to i64*
  %.41.i884 = load i64, i64* %.4061.i88311404, align 8, !noalias !208
  %.42.i885 = icmp sgt i64 %.41.i884, 0
  br i1 %.42.i885, label %B0.endif.endif.endif.i903, label %B0.endif.endif.endif.if.if, !prof !45

B24.i896:                                         ; preds = %B24.i896.preheader, %B24.i896
  %return_val.2.025.i886 = phi i64 [ %return_val.3.1.i894, %B24.i896 ], [ %return_val.2.025.i886.ph, %B24.i896.preheader ]
  %.14.024.i887 = phi i64 [ %.129.i892, %B24.i896 ], [ %.14.024.i887.ph, %B24.i896.preheader ]
  %sunkaddr11405 = mul i64 %.14.024.i887, 8
  %1223 = bitcast { i64, i64, i8, i64 }* %.6.i11.i882 to i8*
  %sunkaddr11406 = getelementptr i8, i8* %1223, i64 %sunkaddr11405
  %sunkaddr11407 = getelementptr i8, i8* %sunkaddr11406, i64 24
  %1224 = bitcast i8* %sunkaddr11407 to i64*
  %.126.i891 = load i64, i64* %1224, align 8, !noalias !208
  %.129.i892 = add nuw nsw i64 %.14.024.i887, 1
  %.6.i7.not.i893 = icmp sgt i64 %.126.i891, %return_val.2.025.i886
  %return_val.3.1.i894 = select i1 %.6.i7.not.i893, i64 %.126.i891, i64 %return_val.2.025.i886
  %exitcond.not.i895 = icmp eq i64 %.41.i884, %.129.i892
  br i1 %exitcond.not.i895, label %B1579.endif.endif.endif.endif.endif.endif.endif.endif, label %B24.i896, !llvm.loop !58

B0.endif.endif.endif.i903:                        ; preds = %B1579.endif.endif.endif.endif.endif.endif.endif
  %.50.i900 = getelementptr { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11.i882, i64 0, i32 3
  %.52.i901 = load i64, i64* %.50.i900, align 8, !noalias !208
  %.11623.not.i902 = icmp eq i64 %.41.i884, 1
  br i1 %.11623.not.i902, label %B1579.endif.endif.endif.endif.endif.endif.endif.endif, label %B24.preheader.i905

B24.preheader.i905:                               ; preds = %B0.endif.endif.endif.i903
  %1225 = add nsw i64 %.41.i884, -1
  %min.iters.check.i904 = icmp ult i64 %1225, 16
  br i1 %min.iters.check.i904, label %B24.i896.preheader, label %vector.ph.i913

B24.i896.preheader:                               ; preds = %middle.block.i950, %B24.preheader.i905
  %return_val.2.025.i886.ph = phi i64 [ %1243, %middle.block.i950 ], [ %.52.i901, %B24.preheader.i905 ]
  %.14.024.i887.ph = phi i64 [ %ind.end.i910, %middle.block.i950 ], [ 1, %B24.preheader.i905 ]
  br label %B24.i896

vector.ph.i913:                                   ; preds = %B24.preheader.i905
  %n.vec.i909 = and i64 %1225, -16
  %minmax.ident.splatinsert.i911 = insertelement <4 x i64> undef, i64 %.52.i901, i32 0
  %minmax.ident.splat.i912 = shufflevector <4 x i64> %minmax.ident.splatinsert.i911, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %vector.body.i936

vector.body.i936:                                 ; preds = %vector.body.i936, %vector.ph.i913
  %index.i914 = phi i64 [ 0, %vector.ph.i913 ], [ %index.next.i935, %vector.body.i936 ]
  %vec.phi.i915 = phi <4 x i64> [ %minmax.ident.splat.i912, %vector.ph.i913 ], [ %1238, %vector.body.i936 ]
  %vec.phi26.i916 = phi <4 x i64> [ %minmax.ident.splat.i912, %vector.ph.i913 ], [ %1239, %vector.body.i936 ]
  %vec.phi27.i917 = phi <4 x i64> [ %minmax.ident.splat.i912, %vector.ph.i913 ], [ %1240, %vector.body.i936 ]
  %vec.phi28.i918 = phi <4 x i64> [ %minmax.ident.splat.i912, %vector.ph.i913 ], [ %1241, %vector.body.i936 ]
  %sunkaddr11408 = mul i64 %index.i914, 8
  %1226 = bitcast { i64, i64, i8, i64 }* %.6.i11.i882 to i8*
  %sunkaddr11409 = getelementptr i8, i8* %1226, i64 %sunkaddr11408
  %sunkaddr11410 = getelementptr i8, i8* %sunkaddr11409, i64 32
  %1227 = bitcast i8* %sunkaddr11410 to <4 x i64>*
  %wide.load.i922 = load <4 x i64>, <4 x i64>* %1227, align 8, !noalias !208
  %sunkaddr11411 = mul i64 %index.i914, 8
  %1228 = bitcast { i64, i64, i8, i64 }* %.6.i11.i882 to i8*
  %sunkaddr11412 = getelementptr i8, i8* %1228, i64 %sunkaddr11411
  %sunkaddr11413 = getelementptr i8, i8* %sunkaddr11412, i64 64
  %1229 = bitcast i8* %sunkaddr11413 to <4 x i64>*
  %wide.load29.i926 = load <4 x i64>, <4 x i64>* %1229, align 8, !noalias !208
  %sunkaddr11414 = mul i64 %index.i914, 8
  %1230 = bitcast { i64, i64, i8, i64 }* %.6.i11.i882 to i8*
  %sunkaddr11415 = getelementptr i8, i8* %1230, i64 %sunkaddr11414
  %sunkaddr11416 = getelementptr i8, i8* %sunkaddr11415, i64 96
  %1231 = bitcast i8* %sunkaddr11416 to <4 x i64>*
  %wide.load30.i930 = load <4 x i64>, <4 x i64>* %1231, align 8, !noalias !208
  %sunkaddr11417 = mul i64 %index.i914, 8
  %1232 = bitcast { i64, i64, i8, i64 }* %.6.i11.i882 to i8*
  %sunkaddr11418 = getelementptr i8, i8* %1232, i64 %sunkaddr11417
  %sunkaddr11419 = getelementptr i8, i8* %sunkaddr11418, i64 128
  %1233 = bitcast i8* %sunkaddr11419 to <4 x i64>*
  %wide.load31.i934 = load <4 x i64>, <4 x i64>* %1233, align 8, !noalias !208
  %1234 = icmp sgt <4 x i64> %wide.load.i922, %vec.phi.i915
  %1235 = icmp sgt <4 x i64> %wide.load29.i926, %vec.phi26.i916
  %1236 = icmp sgt <4 x i64> %wide.load30.i930, %vec.phi27.i917
  %1237 = icmp sgt <4 x i64> %wide.load31.i934, %vec.phi28.i918
  %1238 = select <4 x i1> %1234, <4 x i64> %wide.load.i922, <4 x i64> %vec.phi.i915
  %1239 = select <4 x i1> %1235, <4 x i64> %wide.load29.i926, <4 x i64> %vec.phi26.i916
  %1240 = select <4 x i1> %1236, <4 x i64> %wide.load30.i930, <4 x i64> %vec.phi27.i917
  %1241 = select <4 x i1> %1237, <4 x i64> %wide.load31.i934, <4 x i64> %vec.phi28.i918
  %index.next.i935 = add i64 %index.i914, 16
  %1242 = icmp eq i64 %n.vec.i909, %index.next.i935
  br i1 %1242, label %middle.block.i950, label %vector.body.i936, !llvm.loop !59

middle.block.i950:                                ; preds = %vector.body.i936
  %ind.end.i910 = or i64 %n.vec.i909, 1
  %rdx.minmax.cmp.i937 = icmp sgt <4 x i64> %1238, %1239
  %rdx.minmax.select.i938 = select <4 x i1> %rdx.minmax.cmp.i937, <4 x i64> %1238, <4 x i64> %1239
  %rdx.minmax.cmp32.i939 = icmp sgt <4 x i64> %rdx.minmax.select.i938, %1240
  %rdx.minmax.select33.i940 = select <4 x i1> %rdx.minmax.cmp32.i939, <4 x i64> %rdx.minmax.select.i938, <4 x i64> %1240
  %rdx.minmax.cmp34.i941 = icmp sgt <4 x i64> %rdx.minmax.select33.i940, %1241
  %rdx.minmax.select35.i942 = select <4 x i1> %rdx.minmax.cmp34.i941, <4 x i64> %rdx.minmax.select33.i940, <4 x i64> %1241
  %rdx.shuf.i943 = shufflevector <4 x i64> %rdx.minmax.select35.i942, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp56.i944 = icmp sgt <4 x i64> %rdx.minmax.select35.i942, %rdx.shuf.i943
  %rdx.minmax.select57.i945 = select <4 x i1> %rdx.minmax.cmp56.i944, <4 x i64> %rdx.minmax.select35.i942, <4 x i64> %rdx.shuf.i943
  %rdx.shuf58.i946 = shufflevector <4 x i64> %rdx.minmax.select57.i945, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp59.i947 = icmp sgt <4 x i64> %rdx.minmax.select57.i945, %rdx.shuf58.i946
  %rdx.minmax.select60.i948 = select <4 x i1> %rdx.minmax.cmp59.i947, <4 x i64> %rdx.minmax.select57.i945, <4 x i64> %rdx.shuf58.i946
  %1243 = extractelement <4 x i64> %rdx.minmax.select60.i948, i32 0
  %cmp.n.i949 = icmp eq i64 %1225, %n.vec.i909
  br i1 %cmp.n.i949, label %B1579.endif.endif.endif.endif.endif.endif.endif.endif, label %B24.i896.preheader

B1579.endif.endif.endif.endif.endif.endif.endif.endif: ; preds = %B24.i896, %middle.block.i950, %B0.endif.endif.endif.i903
  %.11793.0.ph = phi i64 [ %1243, %middle.block.i950 ], [ %.52.i901, %B0.endif.endif.endif.i903 ], [ %return_val.3.1.i894, %B24.i896 ]
  tail call void @NRT_decref(i8* nonnull %.11697)
  %.11837 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 64, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.11838 = icmp eq i8* %.11837, null
  br i1 %.11838, label %B1579.endif.endif.endif.e...endif.endif.if, label %B1579.endif.endif.endif.e...endif.endif.endif, !prof !3

B1579.endif.endif.endif.e...endif.endif.if:       ; preds = %B1579.endif.endif.endif.endif.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1579.endif.endif.endif.e...endif.endif.endif:    ; preds = %B1579.endif.endif.endif.endif.endif.endif.endif.endif
  %.5.i877 = getelementptr i8, i8* %.11837, i64 24
  %1244 = bitcast i8* %.5.i877 to { i64, i64, i8, i64 }**
  %.6.i8785702 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1244, align 8
  %.11850 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i8785702, i64 0, i32 1
  store i64 5, i64* %.11850, align 8
  %.6.i8765703 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1244, align 8
  %.1185611420 = bitcast { i64, i64, i8, i64 }* %.6.i8765703 to i64*
  store i64 0, i64* %.1185611420, align 8
  %.6.i8745704 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1244, align 8
  %.11862 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i8745704, i64 0, i32 2
  store i8 0, i8* %.11862, align 1
  %.6.i8705705 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1244, align 8
  %.11875 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i8705705, i64 0, i32 3
  %.11886 = bitcast i64* %.11875 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(40) %.11886, i8 0, i64 40, i1 false)
  %.6.i8665707 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1244, align 8
  %.1190211421 = bitcast { i64, i64, i8, i64 }* %.6.i8665707 to i64*
  store i64 5, i64* %.1190211421, align 8
  %.6.i8625708 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1244, align 8
  %.11915 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i8625708, i64 0, i32 3
  store i64 12718799, i64* %.11915, align 8
  %.6.i8585709 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1244, align 8
  %.11929 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i8585709, i64 0, i32 3
  %.11930 = getelementptr i64, i64* %.11929, i64 1
  store i64 171629, i64* %.11930, align 8
  %.6.i8545710 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1244, align 8
  %.11943 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i8545710, i64 0, i32 3
  %.11944 = getelementptr i64, i64* %.11943, i64 2
  store i64 9, i64* %.11944, align 8
  %.6.i8505711 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1244, align 8
  %.11957 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i8505711, i64 0, i32 3
  %.11958 = getelementptr i64, i64* %.11957, i64 3
  store i64 264022477, i64* %.11958, align 8
  %.6.i8465712 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1244, align 8
  %.11971 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i8465712, i64 0, i32 3
  %.11972 = getelementptr i64, i64* %.11971, i64 4
  store i64 98, i64* %.11972, align 8
  %.6.i11.i775 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1244, align 8, !noalias !212
  %.4061.i77611422 = bitcast { i64, i64, i8, i64 }* %.6.i11.i775 to i64*
  %.41.i777 = load i64, i64* %.4061.i77611422, align 8, !noalias !212
  %.42.i778 = icmp sgt i64 %.41.i777, 0
  br i1 %.42.i778, label %B0.endif.endif.endif.i796, label %B0.endif.endif.endif.if.if, !prof !45

B24.i789:                                         ; preds = %B24.i789.preheader, %B24.i789
  %return_val.2.025.i779 = phi i64 [ %return_val.3.1.i787, %B24.i789 ], [ %return_val.2.025.i779.ph, %B24.i789.preheader ]
  %.14.024.i780 = phi i64 [ %.129.i785, %B24.i789 ], [ %.14.024.i780.ph, %B24.i789.preheader ]
  %sunkaddr11423 = mul i64 %.14.024.i780, 8
  %1245 = bitcast { i64, i64, i8, i64 }* %.6.i11.i775 to i8*
  %sunkaddr11424 = getelementptr i8, i8* %1245, i64 %sunkaddr11423
  %sunkaddr11425 = getelementptr i8, i8* %sunkaddr11424, i64 24
  %1246 = bitcast i8* %sunkaddr11425 to i64*
  %.126.i784 = load i64, i64* %1246, align 8, !noalias !212
  %.129.i785 = add nuw nsw i64 %.14.024.i780, 1
  %.6.i7.not.i786 = icmp sgt i64 %.126.i784, %return_val.2.025.i779
  %return_val.3.1.i787 = select i1 %.6.i7.not.i786, i64 %.126.i784, i64 %return_val.2.025.i779
  %exitcond.not.i788 = icmp eq i64 %.41.i777, %.129.i785
  br i1 %exitcond.not.i788, label %B1579.endif.endif.endif.e...endif.endif.endif.endif, label %B24.i789, !llvm.loop !58

B0.endif.endif.endif.i796:                        ; preds = %B1579.endif.endif.endif.e...endif.endif.endif
  %.50.i793 = getelementptr { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11.i775, i64 0, i32 3
  %.52.i794 = load i64, i64* %.50.i793, align 8, !noalias !212
  %.11623.not.i795 = icmp eq i64 %.41.i777, 1
  br i1 %.11623.not.i795, label %B1579.endif.endif.endif.e...endif.endif.endif.endif, label %B24.preheader.i798

B24.preheader.i798:                               ; preds = %B0.endif.endif.endif.i796
  %1247 = add nsw i64 %.41.i777, -1
  %min.iters.check.i797 = icmp ult i64 %1247, 16
  br i1 %min.iters.check.i797, label %B24.i789.preheader, label %vector.ph.i806

B24.i789.preheader:                               ; preds = %middle.block.i843, %B24.preheader.i798
  %return_val.2.025.i779.ph = phi i64 [ %1265, %middle.block.i843 ], [ %.52.i794, %B24.preheader.i798 ]
  %.14.024.i780.ph = phi i64 [ %ind.end.i803, %middle.block.i843 ], [ 1, %B24.preheader.i798 ]
  br label %B24.i789

vector.ph.i806:                                   ; preds = %B24.preheader.i798
  %n.vec.i802 = and i64 %1247, -16
  %minmax.ident.splatinsert.i804 = insertelement <4 x i64> undef, i64 %.52.i794, i32 0
  %minmax.ident.splat.i805 = shufflevector <4 x i64> %minmax.ident.splatinsert.i804, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %vector.body.i829

vector.body.i829:                                 ; preds = %vector.body.i829, %vector.ph.i806
  %index.i807 = phi i64 [ 0, %vector.ph.i806 ], [ %index.next.i828, %vector.body.i829 ]
  %vec.phi.i808 = phi <4 x i64> [ %minmax.ident.splat.i805, %vector.ph.i806 ], [ %1260, %vector.body.i829 ]
  %vec.phi26.i809 = phi <4 x i64> [ %minmax.ident.splat.i805, %vector.ph.i806 ], [ %1261, %vector.body.i829 ]
  %vec.phi27.i810 = phi <4 x i64> [ %minmax.ident.splat.i805, %vector.ph.i806 ], [ %1262, %vector.body.i829 ]
  %vec.phi28.i811 = phi <4 x i64> [ %minmax.ident.splat.i805, %vector.ph.i806 ], [ %1263, %vector.body.i829 ]
  %sunkaddr11426 = mul i64 %index.i807, 8
  %1248 = bitcast { i64, i64, i8, i64 }* %.6.i11.i775 to i8*
  %sunkaddr11427 = getelementptr i8, i8* %1248, i64 %sunkaddr11426
  %sunkaddr11428 = getelementptr i8, i8* %sunkaddr11427, i64 32
  %1249 = bitcast i8* %sunkaddr11428 to <4 x i64>*
  %wide.load.i815 = load <4 x i64>, <4 x i64>* %1249, align 8, !noalias !212
  %sunkaddr11429 = mul i64 %index.i807, 8
  %1250 = bitcast { i64, i64, i8, i64 }* %.6.i11.i775 to i8*
  %sunkaddr11430 = getelementptr i8, i8* %1250, i64 %sunkaddr11429
  %sunkaddr11431 = getelementptr i8, i8* %sunkaddr11430, i64 64
  %1251 = bitcast i8* %sunkaddr11431 to <4 x i64>*
  %wide.load29.i819 = load <4 x i64>, <4 x i64>* %1251, align 8, !noalias !212
  %sunkaddr11432 = mul i64 %index.i807, 8
  %1252 = bitcast { i64, i64, i8, i64 }* %.6.i11.i775 to i8*
  %sunkaddr11433 = getelementptr i8, i8* %1252, i64 %sunkaddr11432
  %sunkaddr11434 = getelementptr i8, i8* %sunkaddr11433, i64 96
  %1253 = bitcast i8* %sunkaddr11434 to <4 x i64>*
  %wide.load30.i823 = load <4 x i64>, <4 x i64>* %1253, align 8, !noalias !212
  %sunkaddr11435 = mul i64 %index.i807, 8
  %1254 = bitcast { i64, i64, i8, i64 }* %.6.i11.i775 to i8*
  %sunkaddr11436 = getelementptr i8, i8* %1254, i64 %sunkaddr11435
  %sunkaddr11437 = getelementptr i8, i8* %sunkaddr11436, i64 128
  %1255 = bitcast i8* %sunkaddr11437 to <4 x i64>*
  %wide.load31.i827 = load <4 x i64>, <4 x i64>* %1255, align 8, !noalias !212
  %1256 = icmp sgt <4 x i64> %wide.load.i815, %vec.phi.i808
  %1257 = icmp sgt <4 x i64> %wide.load29.i819, %vec.phi26.i809
  %1258 = icmp sgt <4 x i64> %wide.load30.i823, %vec.phi27.i810
  %1259 = icmp sgt <4 x i64> %wide.load31.i827, %vec.phi28.i811
  %1260 = select <4 x i1> %1256, <4 x i64> %wide.load.i815, <4 x i64> %vec.phi.i808
  %1261 = select <4 x i1> %1257, <4 x i64> %wide.load29.i819, <4 x i64> %vec.phi26.i809
  %1262 = select <4 x i1> %1258, <4 x i64> %wide.load30.i823, <4 x i64> %vec.phi27.i810
  %1263 = select <4 x i1> %1259, <4 x i64> %wide.load31.i827, <4 x i64> %vec.phi28.i811
  %index.next.i828 = add i64 %index.i807, 16
  %1264 = icmp eq i64 %n.vec.i802, %index.next.i828
  br i1 %1264, label %middle.block.i843, label %vector.body.i829, !llvm.loop !59

middle.block.i843:                                ; preds = %vector.body.i829
  %ind.end.i803 = or i64 %n.vec.i802, 1
  %rdx.minmax.cmp.i830 = icmp sgt <4 x i64> %1260, %1261
  %rdx.minmax.select.i831 = select <4 x i1> %rdx.minmax.cmp.i830, <4 x i64> %1260, <4 x i64> %1261
  %rdx.minmax.cmp32.i832 = icmp sgt <4 x i64> %rdx.minmax.select.i831, %1262
  %rdx.minmax.select33.i833 = select <4 x i1> %rdx.minmax.cmp32.i832, <4 x i64> %rdx.minmax.select.i831, <4 x i64> %1262
  %rdx.minmax.cmp34.i834 = icmp sgt <4 x i64> %rdx.minmax.select33.i833, %1263
  %rdx.minmax.select35.i835 = select <4 x i1> %rdx.minmax.cmp34.i834, <4 x i64> %rdx.minmax.select33.i833, <4 x i64> %1263
  %rdx.shuf.i836 = shufflevector <4 x i64> %rdx.minmax.select35.i835, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp56.i837 = icmp sgt <4 x i64> %rdx.minmax.select35.i835, %rdx.shuf.i836
  %rdx.minmax.select57.i838 = select <4 x i1> %rdx.minmax.cmp56.i837, <4 x i64> %rdx.minmax.select35.i835, <4 x i64> %rdx.shuf.i836
  %rdx.shuf58.i839 = shufflevector <4 x i64> %rdx.minmax.select57.i838, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp59.i840 = icmp sgt <4 x i64> %rdx.minmax.select57.i838, %rdx.shuf58.i839
  %rdx.minmax.select60.i841 = select <4 x i1> %rdx.minmax.cmp59.i840, <4 x i64> %rdx.minmax.select57.i838, <4 x i64> %rdx.shuf58.i839
  %1265 = extractelement <4 x i64> %rdx.minmax.select60.i841, i32 0
  %cmp.n.i842 = icmp eq i64 %1247, %n.vec.i802
  br i1 %cmp.n.i842, label %B1579.endif.endif.endif.e...endif.endif.endif.endif, label %B24.i789.preheader

B1579.endif.endif.endif.e...endif.endif.endif.endif: ; preds = %B24.i789, %middle.block.i843, %B0.endif.endif.endif.i796
  %.11975.0.ph = phi i64 [ %1265, %middle.block.i843 ], [ %.52.i794, %B0.endif.endif.endif.i796 ], [ %return_val.3.1.i787, %B24.i789 ]
  tail call void @NRT_decref(i8* nonnull %.11837)
  %.12019 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 48, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.12020 = icmp eq i8* %.12019, null
  br i1 %.12020, label %B1579.endif.endif.endif.e...endif.1.endif.if, label %B1579.endif.endif.endif.e...endif.1.endif.endif, !prof !3

B1579.endif.endif.endif.e...endif.1.endif.if:     ; preds = %B1579.endif.endif.endif.e...endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1579.endif.endif.endif.e...endif.1.endif.endif:  ; preds = %B1579.endif.endif.endif.e...endif.endif.endif.endif
  %.5.i770 = getelementptr i8, i8* %.12019, i64 24
  %1266 = bitcast i8* %.5.i770 to { i64, i64, i8, i64 }**
  %.6.i7715713 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1266, align 8
  %.12032 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i7715713, i64 0, i32 1
  store i64 3, i64* %.12032, align 8
  %.6.i7695714 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1266, align 8
  %.1203811438 = bitcast { i64, i64, i8, i64 }* %.6.i7695714 to i64*
  store i64 0, i64* %.1203811438, align 8
  %.6.i7675715 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1266, align 8
  %.12044 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i7675715, i64 0, i32 2
  store i8 0, i8* %.12044, align 1
  %.6.i7635716 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1266, align 8
  %.12057 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i7635716, i64 0, i32 3
  %.12068 = bitcast i64* %.12057 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(24) %.12068, i8 0, i64 24, i1 false)
  %.6.i7595718 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1266, align 8
  %.1208411439 = bitcast { i64, i64, i8, i64 }* %.6.i7595718 to i64*
  store i64 3, i64* %.1208411439, align 8
  %.6.i7555719 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1266, align 8
  %.12097 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i7555719, i64 0, i32 3
  store i64 12, i64* %.12097, align 8
  %.6.i7515720 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1266, align 8
  %.12111 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i7515720, i64 0, i32 3
  %.12112 = getelementptr i64, i64* %.12111, i64 1
  store i64 10, i64* %.12112, align 8
  %.6.i7475721 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1266, align 8
  %.12125 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i7475721, i64 0, i32 3
  %.12126 = getelementptr i64, i64* %.12125, i64 2
  store i64 11, i64* %.12126, align 8
  %.6.i3.i691 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1266, align 8, !noalias !216
  %.5342.i69211440 = bitcast { i64, i64, i8, i64 }* %.6.i3.i691 to i64*
  %.548.i693 = load i64, i64* %.5342.i69211440, align 8, !noalias !216
  %.559.i694 = icmp sgt i64 %.548.i693, 0
  br i1 %.559.i694, label %B14.endif.lr.ph.i696, label %B1579.endif.endif.endif.e...endif.1.endif.endif.endif

B14.endif.lr.ph.i696:                             ; preds = %B1579.endif.endif.endif.e...endif.1.endif.endif
  %min.iters.check.i695 = icmp ult i64 %.548.i693, 16
  br i1 %min.iters.check.i695, label %B14.endif.preheader.i699, label %vector.ph.i701

B14.endif.preheader.i699:                         ; preds = %middle.block.i733, %B14.endif.lr.ph.i696
  %acc.2.011.ph.i697 = phi i64 [ 0, %B14.endif.lr.ph.i696 ], [ %1280, %middle.block.i733 ]
  %.17.010.ph.i698 = phi i64 [ 0, %B14.endif.lr.ph.i696 ], [ %n.vec.i700, %middle.block.i733 ]
  br label %B14.endif.i744

vector.ph.i701:                                   ; preds = %B14.endif.lr.ph.i696
  %n.vec.i700 = and i64 %.548.i693, -16
  br label %vector.body.i724

vector.body.i724:                                 ; preds = %vector.body.i724, %vector.ph.i701
  %index.i702 = phi i64 [ 0, %vector.ph.i701 ], [ %index.next.i723, %vector.body.i724 ]
  %vec.phi.i703 = phi <4 x i64> [ zeroinitializer, %vector.ph.i701 ], [ %1275, %vector.body.i724 ]
  %vec.phi12.i704 = phi <4 x i64> [ zeroinitializer, %vector.ph.i701 ], [ %1276, %vector.body.i724 ]
  %vec.phi13.i705 = phi <4 x i64> [ zeroinitializer, %vector.ph.i701 ], [ %1277, %vector.body.i724 ]
  %vec.phi14.i706 = phi <4 x i64> [ zeroinitializer, %vector.ph.i701 ], [ %1278, %vector.body.i724 ]
  %sunkaddr11441 = mul i64 %index.i702, 8
  %1267 = bitcast { i64, i64, i8, i64 }* %.6.i3.i691 to i8*
  %sunkaddr11442 = getelementptr i8, i8* %1267, i64 %sunkaddr11441
  %sunkaddr11443 = getelementptr i8, i8* %sunkaddr11442, i64 24
  %1268 = bitcast i8* %sunkaddr11443 to <4 x i64>*
  %wide.load.i710 = load <4 x i64>, <4 x i64>* %1268, align 8, !noalias !216
  %sunkaddr11444 = mul i64 %index.i702, 8
  %1269 = bitcast { i64, i64, i8, i64 }* %.6.i3.i691 to i8*
  %sunkaddr11445 = getelementptr i8, i8* %1269, i64 %sunkaddr11444
  %sunkaddr11446 = getelementptr i8, i8* %sunkaddr11445, i64 56
  %1270 = bitcast i8* %sunkaddr11446 to <4 x i64>*
  %wide.load15.i714 = load <4 x i64>, <4 x i64>* %1270, align 8, !noalias !216
  %sunkaddr11447 = mul i64 %index.i702, 8
  %1271 = bitcast { i64, i64, i8, i64 }* %.6.i3.i691 to i8*
  %sunkaddr11448 = getelementptr i8, i8* %1271, i64 %sunkaddr11447
  %sunkaddr11449 = getelementptr i8, i8* %sunkaddr11448, i64 88
  %1272 = bitcast i8* %sunkaddr11449 to <4 x i64>*
  %wide.load16.i718 = load <4 x i64>, <4 x i64>* %1272, align 8, !noalias !216
  %sunkaddr11450 = mul i64 %index.i702, 8
  %1273 = bitcast { i64, i64, i8, i64 }* %.6.i3.i691 to i8*
  %sunkaddr11451 = getelementptr i8, i8* %1273, i64 %sunkaddr11450
  %sunkaddr11452 = getelementptr i8, i8* %sunkaddr11451, i64 120
  %1274 = bitcast i8* %sunkaddr11452 to <4 x i64>*
  %wide.load17.i722 = load <4 x i64>, <4 x i64>* %1274, align 8, !noalias !216
  %1275 = add <4 x i64> %wide.load.i710, %vec.phi.i703
  %1276 = add <4 x i64> %wide.load15.i714, %vec.phi12.i704
  %1277 = add <4 x i64> %wide.load16.i718, %vec.phi13.i705
  %1278 = add <4 x i64> %wide.load17.i722, %vec.phi14.i706
  %index.next.i723 = add i64 %index.i702, 16
  %1279 = icmp eq i64 %n.vec.i700, %index.next.i723
  br i1 %1279, label %middle.block.i733, label %vector.body.i724, !llvm.loop !51

middle.block.i733:                                ; preds = %vector.body.i724
  %bin.rdx.i725 = add <4 x i64> %1276, %1275
  %bin.rdx18.i726 = add <4 x i64> %bin.rdx.i725, %1277
  %bin.rdx19.i727 = add <4 x i64> %bin.rdx18.i726, %1278
  %rdx.shuf.i728 = shufflevector <4 x i64> %bin.rdx19.i727, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx39.i729 = add <4 x i64> %rdx.shuf.i728, %bin.rdx19.i727
  %rdx.shuf40.i730 = shufflevector <4 x i64> %bin.rdx39.i729, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx41.i731 = add <4 x i64> %rdx.shuf40.i730, %bin.rdx39.i729
  %1280 = extractelement <4 x i64> %bin.rdx41.i731, i32 0
  %cmp.n.i732 = icmp eq i64 %.548.i693, %n.vec.i700
  br i1 %cmp.n.i732, label %B1579.endif.endif.endif.e...endif.1.endif.endif.endif, label %B14.endif.preheader.i699

B14.endif.i744:                                   ; preds = %B14.endif.i744, %B14.endif.preheader.i699
  %acc.2.011.i735 = phi i64 [ %.94.i742, %B14.endif.i744 ], [ %acc.2.011.ph.i697, %B14.endif.preheader.i699 ]
  %.17.010.i736 = phi i64 [ %.68.i741, %B14.endif.i744 ], [ %.17.010.ph.i698, %B14.endif.preheader.i699 ]
  %sunkaddr11453 = mul i64 %.17.010.i736, 8
  %1281 = bitcast { i64, i64, i8, i64 }* %.6.i3.i691 to i8*
  %sunkaddr11454 = getelementptr i8, i8* %1281, i64 %sunkaddr11453
  %sunkaddr11455 = getelementptr i8, i8* %sunkaddr11454, i64 24
  %1282 = bitcast i8* %sunkaddr11455 to i64*
  %.65.i740 = load i64, i64* %1282, align 8, !noalias !216
  %.68.i741 = add nuw nsw i64 %.17.010.i736, 1
  %.94.i742 = add nsw i64 %.65.i740, %acc.2.011.i735
  %exitcond.not.i743 = icmp eq i64 %.548.i693, %.68.i741
  br i1 %exitcond.not.i743, label %B1579.endif.endif.endif.e...endif.1.endif.endif.endif, label %B14.endif.i744, !llvm.loop !52

B1579.endif.endif.endif.e...endif.1.endif.endif.endif: ; preds = %B14.endif.i744, %middle.block.i733, %B1579.endif.endif.endif.e...endif.1.endif.endif
  %acc.2.0.lcssa.i734 = phi i64 [ 0, %B1579.endif.endif.endif.e...endif.1.endif.endif ], [ %1280, %middle.block.i733 ], [ %.94.i742, %B14.endif.i744 ]
  tail call void @NRT_decref(i8* nonnull %.12019)
  %.12173 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 48, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.12174 = icmp eq i8* %.12173, null
  br i1 %.12174, label %B1579.endif.endif.endif.e...endif.2.endif.if, label %B1579.endif.endif.endif.e...endif.2.endif.endif, !prof !3

B1579.endif.endif.endif.e...endif.2.endif.if:     ; preds = %B1579.endif.endif.endif.e...endif.1.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1579.endif.endif.endif.e...endif.2.endif.endif:  ; preds = %B1579.endif.endif.endif.e...endif.1.endif.endif.endif
  %.5.i686 = getelementptr i8, i8* %.12173, i64 24
  %1283 = bitcast i8* %.5.i686 to { i64, i64, i8, i64 }**
  %.6.i6875722 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1283, align 8
  %.12186 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i6875722, i64 0, i32 1
  store i64 3, i64* %.12186, align 8
  %.6.i6855723 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1283, align 8
  %.1219211456 = bitcast { i64, i64, i8, i64 }* %.6.i6855723 to i64*
  store i64 0, i64* %.1219211456, align 8
  %.6.i6835724 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1283, align 8
  %.12198 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i6835724, i64 0, i32 2
  store i8 0, i8* %.12198, align 1
  %.6.i6795725 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1283, align 8
  %.12211 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i6795725, i64 0, i32 3
  %.12222 = bitcast i64* %.12211 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(24) %.12222, i8 0, i64 24, i1 false)
  %.6.i6755727 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1283, align 8
  %.1223811457 = bitcast { i64, i64, i8, i64 }* %.6.i6755727 to i64*
  store i64 3, i64* %.1223811457, align 8
  %.6.i6715728 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1283, align 8
  %.12251 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i6715728, i64 0, i32 3
  store i64 11, i64* %.12251, align 8
  %.6.i6675729 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1283, align 8
  %.12265 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i6675729, i64 0, i32 3
  %.12266 = getelementptr i64, i64* %.12265, i64 1
  store i64 2, i64* %.12266, align 8
  %.6.i6635730 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1283, align 8
  %.12279 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i6635730, i64 0, i32 3
  %.12280 = getelementptr i64, i64* %.12279, i64 2
  store i64 9, i64* %.12280, align 8
  %.6.i3.i607 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1283, align 8, !noalias !219
  %.5342.i60811458 = bitcast { i64, i64, i8, i64 }* %.6.i3.i607 to i64*
  %.548.i609 = load i64, i64* %.5342.i60811458, align 8, !noalias !219
  %.559.i610 = icmp sgt i64 %.548.i609, 0
  br i1 %.559.i610, label %B14.endif.lr.ph.i612, label %B1579.endif.endif.endif.e...endif.2.endif.endif.endif

B14.endif.lr.ph.i612:                             ; preds = %B1579.endif.endif.endif.e...endif.2.endif.endif
  %min.iters.check.i611 = icmp ult i64 %.548.i609, 16
  br i1 %min.iters.check.i611, label %B14.endif.preheader.i615, label %vector.ph.i617

B14.endif.preheader.i615:                         ; preds = %middle.block.i649, %B14.endif.lr.ph.i612
  %acc.2.011.ph.i613 = phi i64 [ 0, %B14.endif.lr.ph.i612 ], [ %1297, %middle.block.i649 ]
  %.17.010.ph.i614 = phi i64 [ 0, %B14.endif.lr.ph.i612 ], [ %n.vec.i616, %middle.block.i649 ]
  br label %B14.endif.i660

vector.ph.i617:                                   ; preds = %B14.endif.lr.ph.i612
  %n.vec.i616 = and i64 %.548.i609, -16
  br label %vector.body.i640

vector.body.i640:                                 ; preds = %vector.body.i640, %vector.ph.i617
  %index.i618 = phi i64 [ 0, %vector.ph.i617 ], [ %index.next.i639, %vector.body.i640 ]
  %vec.phi.i619 = phi <4 x i64> [ zeroinitializer, %vector.ph.i617 ], [ %1292, %vector.body.i640 ]
  %vec.phi12.i620 = phi <4 x i64> [ zeroinitializer, %vector.ph.i617 ], [ %1293, %vector.body.i640 ]
  %vec.phi13.i621 = phi <4 x i64> [ zeroinitializer, %vector.ph.i617 ], [ %1294, %vector.body.i640 ]
  %vec.phi14.i622 = phi <4 x i64> [ zeroinitializer, %vector.ph.i617 ], [ %1295, %vector.body.i640 ]
  %sunkaddr11459 = mul i64 %index.i618, 8
  %1284 = bitcast { i64, i64, i8, i64 }* %.6.i3.i607 to i8*
  %sunkaddr11460 = getelementptr i8, i8* %1284, i64 %sunkaddr11459
  %sunkaddr11461 = getelementptr i8, i8* %sunkaddr11460, i64 24
  %1285 = bitcast i8* %sunkaddr11461 to <4 x i64>*
  %wide.load.i626 = load <4 x i64>, <4 x i64>* %1285, align 8, !noalias !219
  %sunkaddr11462 = mul i64 %index.i618, 8
  %1286 = bitcast { i64, i64, i8, i64 }* %.6.i3.i607 to i8*
  %sunkaddr11463 = getelementptr i8, i8* %1286, i64 %sunkaddr11462
  %sunkaddr11464 = getelementptr i8, i8* %sunkaddr11463, i64 56
  %1287 = bitcast i8* %sunkaddr11464 to <4 x i64>*
  %wide.load15.i630 = load <4 x i64>, <4 x i64>* %1287, align 8, !noalias !219
  %sunkaddr11465 = mul i64 %index.i618, 8
  %1288 = bitcast { i64, i64, i8, i64 }* %.6.i3.i607 to i8*
  %sunkaddr11466 = getelementptr i8, i8* %1288, i64 %sunkaddr11465
  %sunkaddr11467 = getelementptr i8, i8* %sunkaddr11466, i64 88
  %1289 = bitcast i8* %sunkaddr11467 to <4 x i64>*
  %wide.load16.i634 = load <4 x i64>, <4 x i64>* %1289, align 8, !noalias !219
  %sunkaddr11468 = mul i64 %index.i618, 8
  %1290 = bitcast { i64, i64, i8, i64 }* %.6.i3.i607 to i8*
  %sunkaddr11469 = getelementptr i8, i8* %1290, i64 %sunkaddr11468
  %sunkaddr11470 = getelementptr i8, i8* %sunkaddr11469, i64 120
  %1291 = bitcast i8* %sunkaddr11470 to <4 x i64>*
  %wide.load17.i638 = load <4 x i64>, <4 x i64>* %1291, align 8, !noalias !219
  %1292 = add <4 x i64> %wide.load.i626, %vec.phi.i619
  %1293 = add <4 x i64> %wide.load15.i630, %vec.phi12.i620
  %1294 = add <4 x i64> %wide.load16.i634, %vec.phi13.i621
  %1295 = add <4 x i64> %wide.load17.i638, %vec.phi14.i622
  %index.next.i639 = add i64 %index.i618, 16
  %1296 = icmp eq i64 %n.vec.i616, %index.next.i639
  br i1 %1296, label %middle.block.i649, label %vector.body.i640, !llvm.loop !51

middle.block.i649:                                ; preds = %vector.body.i640
  %bin.rdx.i641 = add <4 x i64> %1293, %1292
  %bin.rdx18.i642 = add <4 x i64> %bin.rdx.i641, %1294
  %bin.rdx19.i643 = add <4 x i64> %bin.rdx18.i642, %1295
  %rdx.shuf.i644 = shufflevector <4 x i64> %bin.rdx19.i643, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx39.i645 = add <4 x i64> %rdx.shuf.i644, %bin.rdx19.i643
  %rdx.shuf40.i646 = shufflevector <4 x i64> %bin.rdx39.i645, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx41.i647 = add <4 x i64> %rdx.shuf40.i646, %bin.rdx39.i645
  %1297 = extractelement <4 x i64> %bin.rdx41.i647, i32 0
  %cmp.n.i648 = icmp eq i64 %.548.i609, %n.vec.i616
  br i1 %cmp.n.i648, label %B1579.endif.endif.endif.e...endif.2.endif.endif.endif, label %B14.endif.preheader.i615

B14.endif.i660:                                   ; preds = %B14.endif.i660, %B14.endif.preheader.i615
  %acc.2.011.i651 = phi i64 [ %.94.i658, %B14.endif.i660 ], [ %acc.2.011.ph.i613, %B14.endif.preheader.i615 ]
  %.17.010.i652 = phi i64 [ %.68.i657, %B14.endif.i660 ], [ %.17.010.ph.i614, %B14.endif.preheader.i615 ]
  %sunkaddr11471 = mul i64 %.17.010.i652, 8
  %1298 = bitcast { i64, i64, i8, i64 }* %.6.i3.i607 to i8*
  %sunkaddr11472 = getelementptr i8, i8* %1298, i64 %sunkaddr11471
  %sunkaddr11473 = getelementptr i8, i8* %sunkaddr11472, i64 24
  %1299 = bitcast i8* %sunkaddr11473 to i64*
  %.65.i656 = load i64, i64* %1299, align 8, !noalias !219
  %.68.i657 = add nuw nsw i64 %.17.010.i652, 1
  %.94.i658 = add nsw i64 %.65.i656, %acc.2.011.i651
  %exitcond.not.i659 = icmp eq i64 %.548.i609, %.68.i657
  br i1 %exitcond.not.i659, label %B1579.endif.endif.endif.e...endif.2.endif.endif.endif, label %B14.endif.i660, !llvm.loop !52

B1579.endif.endif.endif.e...endif.2.endif.endif.endif: ; preds = %B14.endif.i660, %middle.block.i649, %B1579.endif.endif.endif.e...endif.2.endif.endif
  %acc.2.0.lcssa.i650 = phi i64 [ 0, %B1579.endif.endif.endif.e...endif.2.endif.endif ], [ %1297, %middle.block.i649 ], [ %.94.i658, %B14.endif.i660 ]
  tail call void @NRT_decref(i8* nonnull %.12173)
  %.12353 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 40, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.12354 = icmp eq i8* %.12353, null
  br i1 %.12354, label %B1606.endif.endif.if, label %B1606.endif.endif.endif, !prof !3

B1606.endif.endif.if:                             ; preds = %B1579.endif.endif.endif.e...endif.2.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1606.endif.endif.endif:                          ; preds = %B1579.endif.endif.endif.e...endif.2.endif.endif.endif
  %.12308 = icmp slt i64 %acc.2.0.lcssa.i734, %acc.2.0.lcssa.i650
  %"$phi830.43.2.0" = zext i1 %.12308 to i64
  %.5.i602 = getelementptr i8, i8* %.12353, i64 24
  %1300 = bitcast i8* %.5.i602 to { i64, i64, i8, i64 }**
  %.6.i6035731 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1300, align 8
  %.12366 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i6035731, i64 0, i32 1
  store i64 2, i64* %.12366, align 8
  %.6.i6015732 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1300, align 8
  %.1237211474 = bitcast { i64, i64, i8, i64 }* %.6.i6015732 to i64*
  store i64 0, i64* %.1237211474, align 8
  %.6.i5995733 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1300, align 8
  %.12378 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i5995733, i64 0, i32 2
  store i8 0, i8* %.12378, align 1
  %.6.i5955734 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1300, align 8
  %.12391 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i5955734, i64 0, i32 3
  %.12402 = bitcast i64* %.12391 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %.12402, i8 0, i64 16, i1 false)
  %.6.i5915736 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1300, align 8
  %.1241811475 = bitcast { i64, i64, i8, i64 }* %.6.i5915736 to i64*
  store i64 2, i64* %.1241811475, align 8
  %.6.i5875737 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1300, align 8
  %.12431 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i5875737, i64 0, i32 3
  store i64 535767221581, i64* %.12431, align 8
  %.6.i5835738 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1300, align 8
  %.12445 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i5835738, i64 0, i32 3
  %.12446 = getelementptr i64, i64* %.12445, i64 1
  store i64 %"$phi830.43.2.0", i64* %.12446, align 8
  %.6.i311657396767 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1300, align 8
  %.12499676811476 = bitcast { i64, i64, i8, i64 }* %.6.i311657396767 to i64*
  %.125006769 = load i64, i64* %.12499676811476, align 8
  %.125016770 = icmp sgt i64 %.125006769, 0
  br i1 %.125016770, label %B1621.lr.ph, label %B1633

B1621.lr.ph:                                      ; preds = %B1606.endif.endif.endif
  %min.iters.check8234 = icmp ult i64 %.125006769, 16
  br i1 %min.iters.check8234, label %B1621.preheader, label %vector.ph8235

B1621.preheader:                                  ; preds = %middle.block8231, %B1621.lr.ph
  %temp.2.107.2.06772.ph = phi i64 [ 1, %B1621.lr.ph ], [ %1314, %middle.block8231 ]
  %.12465.06771.ph = phi i64 [ 0, %B1621.lr.ph ], [ %n.vec8237, %middle.block8231 ]
  br label %B1621

vector.ph8235:                                    ; preds = %B1621.lr.ph
  %n.vec8237 = and i64 %.125006769, -16
  br label %vector.body8233

vector.body8233:                                  ; preds = %vector.body8233, %vector.ph8235
  %index8238 = phi i64 [ 0, %vector.ph8235 ], [ %index.next8239, %vector.body8233 ]
  %vec.phi8242 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8235 ], [ %1309, %vector.body8233 ]
  %vec.phi8243 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8235 ], [ %1310, %vector.body8233 ]
  %vec.phi8244 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8235 ], [ %1311, %vector.body8233 ]
  %vec.phi8245 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8235 ], [ %1312, %vector.body8233 ]
  %sunkaddr11477 = mul i64 %index8238, 8
  %1301 = bitcast { i64, i64, i8, i64 }* %.6.i311657396767 to i8*
  %sunkaddr11478 = getelementptr i8, i8* %1301, i64 %sunkaddr11477
  %sunkaddr11479 = getelementptr i8, i8* %sunkaddr11478, i64 24
  %1302 = bitcast i8* %sunkaddr11479 to <4 x i64>*
  %wide.load8246 = load <4 x i64>, <4 x i64>* %1302, align 8
  %sunkaddr11480 = mul i64 %index8238, 8
  %1303 = bitcast { i64, i64, i8, i64 }* %.6.i311657396767 to i8*
  %sunkaddr11481 = getelementptr i8, i8* %1303, i64 %sunkaddr11480
  %sunkaddr11482 = getelementptr i8, i8* %sunkaddr11481, i64 56
  %1304 = bitcast i8* %sunkaddr11482 to <4 x i64>*
  %wide.load8247 = load <4 x i64>, <4 x i64>* %1304, align 8
  %sunkaddr11483 = mul i64 %index8238, 8
  %1305 = bitcast { i64, i64, i8, i64 }* %.6.i311657396767 to i8*
  %sunkaddr11484 = getelementptr i8, i8* %1305, i64 %sunkaddr11483
  %sunkaddr11485 = getelementptr i8, i8* %sunkaddr11484, i64 88
  %1306 = bitcast i8* %sunkaddr11485 to <4 x i64>*
  %wide.load8248 = load <4 x i64>, <4 x i64>* %1306, align 8
  %sunkaddr11486 = mul i64 %index8238, 8
  %1307 = bitcast { i64, i64, i8, i64 }* %.6.i311657396767 to i8*
  %sunkaddr11487 = getelementptr i8, i8* %1307, i64 %sunkaddr11486
  %sunkaddr11488 = getelementptr i8, i8* %sunkaddr11487, i64 120
  %1308 = bitcast i8* %sunkaddr11488 to <4 x i64>*
  %wide.load8249 = load <4 x i64>, <4 x i64>* %1308, align 8
  %1309 = mul <4 x i64> %wide.load8246, %vec.phi8242
  %1310 = mul <4 x i64> %wide.load8247, %vec.phi8243
  %1311 = mul <4 x i64> %wide.load8248, %vec.phi8244
  %1312 = mul <4 x i64> %wide.load8249, %vec.phi8245
  %index.next8239 = add i64 %index8238, 16
  %1313 = icmp eq i64 %n.vec8237, %index.next8239
  br i1 %1313, label %middle.block8231, label %vector.body8233, !llvm.loop !222

middle.block8231:                                 ; preds = %vector.body8233
  %bin.rdx8250 = mul <4 x i64> %1310, %1309
  %bin.rdx8251 = mul <4 x i64> %1311, %bin.rdx8250
  %bin.rdx8252 = mul <4 x i64> %1312, %bin.rdx8251
  %rdx.shuf10191 = shufflevector <4 x i64> %bin.rdx8252, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10192 = mul <4 x i64> %bin.rdx8252, %rdx.shuf10191
  %rdx.shuf10193 = shufflevector <4 x i64> %bin.rdx10192, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10194 = mul <4 x i64> %bin.rdx10192, %rdx.shuf10193
  %1314 = extractelement <4 x i64> %bin.rdx10194, i32 0
  %cmp.n8241 = icmp eq i64 %.125006769, %n.vec8237
  br i1 %cmp.n8241, label %B1633, label %B1621.preheader

B1633.endif.endif.if:                             ; preds = %B1633
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1633.endif.endif.endif:                          ; preds = %B1633
  %.5.i578 = getelementptr i8, i8* %.12571, i64 24
  %1315 = bitcast i8* %.5.i578 to { i64, i64, i8, i64 }**
  %.6.i5795740 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1315, align 8
  %.12584 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i5795740, i64 0, i32 1
  store i64 5, i64* %.12584, align 8
  %.6.i5775741 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1315, align 8
  %.1259011489 = bitcast { i64, i64, i8, i64 }* %.6.i5775741 to i64*
  store i64 0, i64* %.1259011489, align 8
  %.6.i5755742 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1315, align 8
  %.12596 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i5755742, i64 0, i32 2
  store i8 0, i8* %.12596, align 1
  %.6.i5715743 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1315, align 8
  %.12609 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i5715743, i64 0, i32 3
  %.12620 = bitcast i64* %.12609 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(40) %.12620, i8 0, i64 40, i1 false)
  %.6.i5675745 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1315, align 8
  %.1263611490 = bitcast { i64, i64, i8, i64 }* %.6.i5675745 to i64*
  store i64 5, i64* %.1263611490, align 8
  %.6.i5635746 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1315, align 8
  %.12649 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i5635746, i64 0, i32 3
  store i64 391364, i64* %.12649, align 8
  %.6.i5595747 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1315, align 8
  %.12663 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i5595747, i64 0, i32 3
  %.12664 = getelementptr i64, i64* %.12663, i64 1
  store i64 3067700, i64* %.12664, align 8
  %.6.i5555748 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1315, align 8
  %.12677 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i5555748, i64 0, i32 3
  %.12678 = getelementptr i64, i64* %.12677, i64 2
  store i64 611, i64* %.12678, align 8
  %.6.i5515749 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1315, align 8
  %.12691 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i5515749, i64 0, i32 3
  %.12692 = getelementptr i64, i64* %.12691, i64 3
  store i64 %const, i64* %.12692, align 8
  %.6.i5475750 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1315, align 8
  %.12705 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i5475750, i64 0, i32 3
  %.12706 = getelementptr i64, i64* %.12705, i64 4
  store i64 141, i64* %.12706, align 8
  %.6.i11.i = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1315, align 8, !noalias !223
  %.4061.i11491 = bitcast { i64, i64, i8, i64 }* %.6.i11.i to i64*
  %.41.i = load i64, i64* %.4061.i11491, align 8, !noalias !223
  %.42.i = icmp sgt i64 %.41.i, 0
  br i1 %.42.i, label %B0.endif.endif.endif.i, label %B0.endif.endif.endif.if.if, !prof !45

B24.i:                                            ; preds = %B24.i.preheader, %B24.i
  %return_val.2.025.i = phi i64 [ %return_val.3.1.i, %B24.i ], [ %return_val.2.025.i.ph, %B24.i.preheader ]
  %.14.024.i = phi i64 [ %.129.i, %B24.i ], [ %.14.024.i.ph, %B24.i.preheader ]
  %sunkaddr11492 = mul i64 %.14.024.i, 8
  %1316 = bitcast { i64, i64, i8, i64 }* %.6.i11.i to i8*
  %sunkaddr11493 = getelementptr i8, i8* %1316, i64 %sunkaddr11492
  %sunkaddr11494 = getelementptr i8, i8* %sunkaddr11493, i64 24
  %1317 = bitcast i8* %sunkaddr11494 to i64*
  %.126.i = load i64, i64* %1317, align 8, !noalias !223
  %.129.i = add nuw nsw i64 %.14.024.i, 1
  %.6.i7.not.i = icmp slt i64 %.126.i, %return_val.2.025.i
  %return_val.3.1.i = select i1 %.6.i7.not.i, i64 %.126.i, i64 %return_val.2.025.i
  %exitcond.not.i533 = icmp eq i64 %.41.i, %.129.i
  br i1 %exitcond.not.i533, label %B1633.endif.endif.endif.endif, label %B24.i, !llvm.loop !46

B0.endif.endif.endif.i:                           ; preds = %B1633.endif.endif.endif
  %.50.i = getelementptr { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i11.i, i64 0, i32 3
  %.52.i = load i64, i64* %.50.i, align 8, !noalias !223
  %.11623.not.i = icmp eq i64 %.41.i, 1
  br i1 %.11623.not.i, label %B1633.endif.endif.endif.endif, label %B24.preheader.i

B24.preheader.i:                                  ; preds = %B0.endif.endif.endif.i
  %1318 = add nsw i64 %.41.i, -1
  %min.iters.check.i534 = icmp ult i64 %1318, 16
  br i1 %min.iters.check.i534, label %B24.i.preheader, label %vector.ph.i536

B24.i.preheader:                                  ; preds = %middle.block.i544, %B24.preheader.i
  %return_val.2.025.i.ph = phi i64 [ %1336, %middle.block.i544 ], [ %.52.i, %B24.preheader.i ]
  %.14.024.i.ph = phi i64 [ %ind.end.i, %middle.block.i544 ], [ 1, %B24.preheader.i ]
  br label %B24.i

vector.ph.i536:                                   ; preds = %B24.preheader.i
  %n.vec.i535 = and i64 %1318, -16
  %minmax.ident.splatinsert.i = insertelement <4 x i64> undef, i64 %.52.i, i32 0
  %minmax.ident.splat.i = shufflevector <4 x i64> %minmax.ident.splatinsert.i, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %vector.body.i541

vector.body.i541:                                 ; preds = %vector.body.i541, %vector.ph.i536
  %index.i537 = phi i64 [ 0, %vector.ph.i536 ], [ %index.next.i540, %vector.body.i541 ]
  %vec.phi.i538 = phi <4 x i64> [ %minmax.ident.splat.i, %vector.ph.i536 ], [ %1331, %vector.body.i541 ]
  %vec.phi26.i = phi <4 x i64> [ %minmax.ident.splat.i, %vector.ph.i536 ], [ %1332, %vector.body.i541 ]
  %vec.phi27.i = phi <4 x i64> [ %minmax.ident.splat.i, %vector.ph.i536 ], [ %1333, %vector.body.i541 ]
  %vec.phi28.i = phi <4 x i64> [ %minmax.ident.splat.i, %vector.ph.i536 ], [ %1334, %vector.body.i541 ]
  %sunkaddr11495 = mul i64 %index.i537, 8
  %1319 = bitcast { i64, i64, i8, i64 }* %.6.i11.i to i8*
  %sunkaddr11496 = getelementptr i8, i8* %1319, i64 %sunkaddr11495
  %sunkaddr11497 = getelementptr i8, i8* %sunkaddr11496, i64 32
  %1320 = bitcast i8* %sunkaddr11497 to <4 x i64>*
  %wide.load.i539 = load <4 x i64>, <4 x i64>* %1320, align 8, !noalias !223
  %sunkaddr11498 = mul i64 %index.i537, 8
  %1321 = bitcast { i64, i64, i8, i64 }* %.6.i11.i to i8*
  %sunkaddr11499 = getelementptr i8, i8* %1321, i64 %sunkaddr11498
  %sunkaddr11500 = getelementptr i8, i8* %sunkaddr11499, i64 64
  %1322 = bitcast i8* %sunkaddr11500 to <4 x i64>*
  %wide.load29.i = load <4 x i64>, <4 x i64>* %1322, align 8, !noalias !223
  %sunkaddr11501 = mul i64 %index.i537, 8
  %1323 = bitcast { i64, i64, i8, i64 }* %.6.i11.i to i8*
  %sunkaddr11502 = getelementptr i8, i8* %1323, i64 %sunkaddr11501
  %sunkaddr11503 = getelementptr i8, i8* %sunkaddr11502, i64 96
  %1324 = bitcast i8* %sunkaddr11503 to <4 x i64>*
  %wide.load30.i = load <4 x i64>, <4 x i64>* %1324, align 8, !noalias !223
  %sunkaddr11504 = mul i64 %index.i537, 8
  %1325 = bitcast { i64, i64, i8, i64 }* %.6.i11.i to i8*
  %sunkaddr11505 = getelementptr i8, i8* %1325, i64 %sunkaddr11504
  %sunkaddr11506 = getelementptr i8, i8* %sunkaddr11505, i64 128
  %1326 = bitcast i8* %sunkaddr11506 to <4 x i64>*
  %wide.load31.i = load <4 x i64>, <4 x i64>* %1326, align 8, !noalias !223
  %1327 = icmp slt <4 x i64> %wide.load.i539, %vec.phi.i538
  %1328 = icmp slt <4 x i64> %wide.load29.i, %vec.phi26.i
  %1329 = icmp slt <4 x i64> %wide.load30.i, %vec.phi27.i
  %1330 = icmp slt <4 x i64> %wide.load31.i, %vec.phi28.i
  %1331 = select <4 x i1> %1327, <4 x i64> %wide.load.i539, <4 x i64> %vec.phi.i538
  %1332 = select <4 x i1> %1328, <4 x i64> %wide.load29.i, <4 x i64> %vec.phi26.i
  %1333 = select <4 x i1> %1329, <4 x i64> %wide.load30.i, <4 x i64> %vec.phi27.i
  %1334 = select <4 x i1> %1330, <4 x i64> %wide.load31.i, <4 x i64> %vec.phi28.i
  %index.next.i540 = add i64 %index.i537, 16
  %1335 = icmp eq i64 %n.vec.i535, %index.next.i540
  br i1 %1335, label %middle.block.i544, label %vector.body.i541, !llvm.loop !47

middle.block.i544:                                ; preds = %vector.body.i541
  %ind.end.i = or i64 %n.vec.i535, 1
  %rdx.minmax.cmp.i = icmp slt <4 x i64> %1331, %1332
  %rdx.minmax.select.i = select <4 x i1> %rdx.minmax.cmp.i, <4 x i64> %1331, <4 x i64> %1332
  %rdx.minmax.cmp32.i = icmp slt <4 x i64> %rdx.minmax.select.i, %1333
  %rdx.minmax.select33.i = select <4 x i1> %rdx.minmax.cmp32.i, <4 x i64> %rdx.minmax.select.i, <4 x i64> %1333
  %rdx.minmax.cmp34.i = icmp slt <4 x i64> %rdx.minmax.select33.i, %1334
  %rdx.minmax.select35.i = select <4 x i1> %rdx.minmax.cmp34.i, <4 x i64> %rdx.minmax.select33.i, <4 x i64> %1334
  %rdx.shuf.i542 = shufflevector <4 x i64> %rdx.minmax.select35.i, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %rdx.minmax.cmp56.i = icmp slt <4 x i64> %rdx.minmax.select35.i, %rdx.shuf.i542
  %rdx.minmax.select57.i = select <4 x i1> %rdx.minmax.cmp56.i, <4 x i64> %rdx.minmax.select35.i, <4 x i64> %rdx.shuf.i542
  %rdx.shuf58.i = shufflevector <4 x i64> %rdx.minmax.select57.i, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %rdx.minmax.cmp59.i = icmp slt <4 x i64> %rdx.minmax.select57.i, %rdx.shuf58.i
  %rdx.minmax.select60.i = select <4 x i1> %rdx.minmax.cmp59.i, <4 x i64> %rdx.minmax.select57.i, <4 x i64> %rdx.shuf58.i
  %1336 = extractelement <4 x i64> %rdx.minmax.select60.i, i32 0
  %cmp.n.i543 = icmp eq i64 %1318, %n.vec.i535
  br i1 %cmp.n.i543, label %B1633.endif.endif.endif.endif, label %B24.i.preheader

B1633.endif.endif.endif.endif:                    ; preds = %B24.i, %middle.block.i544, %B0.endif.endif.endif.i
  %.12709.0.ph = phi i64 [ %1336, %middle.block.i544 ], [ %.52.i, %B0.endif.endif.endif.i ], [ %return_val.3.1.i, %B24.i ]
  tail call void @NRT_decref(i8* nonnull %.12571)
  %.12766 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 40, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.12767 = icmp eq i8* %.12766, null
  br i1 %.12767, label %B1660.endif.endif.if, label %B1660.endif.endif.endif, !prof !3

B1660.endif.endif.if:                             ; preds = %B1633.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1660.endif.endif.endif:                          ; preds = %B1633.endif.endif.endif.endif
  %.5.i527 = getelementptr i8, i8* %.12766, i64 24
  %1337 = bitcast i8* %.5.i527 to { i64, i64, i8, i64 }**
  %.6.i5285751 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1337, align 8
  %.12779 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i5285751, i64 0, i32 1
  store i64 2, i64* %.12779, align 8
  %.6.i5265752 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1337, align 8
  %.1278511507 = bitcast { i64, i64, i8, i64 }* %.6.i5265752 to i64*
  store i64 0, i64* %.1278511507, align 8
  %.6.i5245753 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1337, align 8
  %.12791 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i5245753, i64 0, i32 2
  store i8 0, i8* %.12791, align 1
  %.6.i5205754 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1337, align 8
  %.12804 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i5205754, i64 0, i32 3
  %.12815 = bitcast i64* %.12804 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %.12815, i8 0, i64 16, i1 false)
  %.6.i5165756 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1337, align 8
  %.1283111508 = bitcast { i64, i64, i8, i64 }* %.6.i5165756 to i64*
  store i64 2, i64* %.1283111508, align 8
  %.6.i5125757 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1337, align 8
  %.12844 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i5125757, i64 0, i32 3
  store i64 0, i64* %.12844, align 8
  %.6.i5085758 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1337, align 8
  %.12858 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i5085758, i64 0, i32 3
  %.12859 = getelementptr i64, i64* %.12858, i64 1
  store i64 3462, i64* %.12859, align 8
  %.6.i321657596759 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1337, align 8
  %.12910676011509 = bitcast { i64, i64, i8, i64 }* %.6.i321657596759 to i64*
  %.129116761 = load i64, i64* %.12910676011509, align 8
  %.129126762 = icmp sgt i64 %.129116761, 0
  br i1 %.129126762, label %B1675.lr.ph, label %B1687

B1675.lr.ph:                                      ; preds = %B1660.endif.endif.endif
  %min.iters.check8257 = icmp ult i64 %.129116761, 16
  br i1 %min.iters.check8257, label %B1675.preheader, label %vector.ph8258

B1675.preheader:                                  ; preds = %middle.block8254, %B1675.lr.ph
  %temp.2.71.2.06764.ph = phi i64 [ 1, %B1675.lr.ph ], [ %1351, %middle.block8254 ]
  %.12876.06763.ph = phi i64 [ 0, %B1675.lr.ph ], [ %n.vec8260, %middle.block8254 ]
  br label %B1675

vector.ph8258:                                    ; preds = %B1675.lr.ph
  %n.vec8260 = and i64 %.129116761, -16
  br label %vector.body8256

vector.body8256:                                  ; preds = %vector.body8256, %vector.ph8258
  %index8261 = phi i64 [ 0, %vector.ph8258 ], [ %index.next8262, %vector.body8256 ]
  %vec.phi8265 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8258 ], [ %1346, %vector.body8256 ]
  %vec.phi8266 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8258 ], [ %1347, %vector.body8256 ]
  %vec.phi8267 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8258 ], [ %1348, %vector.body8256 ]
  %vec.phi8268 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8258 ], [ %1349, %vector.body8256 ]
  %sunkaddr11510 = mul i64 %index8261, 8
  %1338 = bitcast { i64, i64, i8, i64 }* %.6.i321657596759 to i8*
  %sunkaddr11511 = getelementptr i8, i8* %1338, i64 %sunkaddr11510
  %sunkaddr11512 = getelementptr i8, i8* %sunkaddr11511, i64 24
  %1339 = bitcast i8* %sunkaddr11512 to <4 x i64>*
  %wide.load8269 = load <4 x i64>, <4 x i64>* %1339, align 8
  %sunkaddr11513 = mul i64 %index8261, 8
  %1340 = bitcast { i64, i64, i8, i64 }* %.6.i321657596759 to i8*
  %sunkaddr11514 = getelementptr i8, i8* %1340, i64 %sunkaddr11513
  %sunkaddr11515 = getelementptr i8, i8* %sunkaddr11514, i64 56
  %1341 = bitcast i8* %sunkaddr11515 to <4 x i64>*
  %wide.load8270 = load <4 x i64>, <4 x i64>* %1341, align 8
  %sunkaddr11516 = mul i64 %index8261, 8
  %1342 = bitcast { i64, i64, i8, i64 }* %.6.i321657596759 to i8*
  %sunkaddr11517 = getelementptr i8, i8* %1342, i64 %sunkaddr11516
  %sunkaddr11518 = getelementptr i8, i8* %sunkaddr11517, i64 88
  %1343 = bitcast i8* %sunkaddr11518 to <4 x i64>*
  %wide.load8271 = load <4 x i64>, <4 x i64>* %1343, align 8
  %sunkaddr11519 = mul i64 %index8261, 8
  %1344 = bitcast { i64, i64, i8, i64 }* %.6.i321657596759 to i8*
  %sunkaddr11520 = getelementptr i8, i8* %1344, i64 %sunkaddr11519
  %sunkaddr11521 = getelementptr i8, i8* %sunkaddr11520, i64 120
  %1345 = bitcast i8* %sunkaddr11521 to <4 x i64>*
  %wide.load8272 = load <4 x i64>, <4 x i64>* %1345, align 8
  %1346 = mul <4 x i64> %wide.load8269, %vec.phi8265
  %1347 = mul <4 x i64> %wide.load8270, %vec.phi8266
  %1348 = mul <4 x i64> %wide.load8271, %vec.phi8267
  %1349 = mul <4 x i64> %wide.load8272, %vec.phi8268
  %index.next8262 = add i64 %index8261, 16
  %1350 = icmp eq i64 %n.vec8260, %index.next8262
  br i1 %1350, label %middle.block8254, label %vector.body8256, !llvm.loop !227

middle.block8254:                                 ; preds = %vector.body8256
  %bin.rdx8273 = mul <4 x i64> %1347, %1346
  %bin.rdx8274 = mul <4 x i64> %1348, %bin.rdx8273
  %bin.rdx8275 = mul <4 x i64> %1349, %bin.rdx8274
  %rdx.shuf10195 = shufflevector <4 x i64> %bin.rdx8275, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10196 = mul <4 x i64> %bin.rdx8275, %rdx.shuf10195
  %rdx.shuf10197 = shufflevector <4 x i64> %bin.rdx10196, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10198 = mul <4 x i64> %bin.rdx10196, %rdx.shuf10197
  %1351 = extractelement <4 x i64> %bin.rdx10198, i32 0
  %cmp.n8264 = icmp eq i64 %.129116761, %n.vec8260
  br i1 %cmp.n8264, label %B1687, label %B1675.preheader

B1687.endif.endif.if:                             ; preds = %B1687
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1687.endif.endif.endif:                          ; preds = %B1687
  %.5.i503 = getelementptr i8, i8* %.12985, i64 24
  %1352 = bitcast i8* %.5.i503 to { i64, i64, i8, i64 }**
  %.6.i5045760 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1352, align 8
  %.12998 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i5045760, i64 0, i32 1
  store i64 3, i64* %.12998, align 8
  %.6.i5025761 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1352, align 8
  %.1300411522 = bitcast { i64, i64, i8, i64 }* %.6.i5025761 to i64*
  store i64 0, i64* %.1300411522, align 8
  %.6.i5005762 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1352, align 8
  %.13010 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i5005762, i64 0, i32 2
  store i8 0, i8* %.13010, align 1
  %.6.i4965763 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1352, align 8
  %.13023 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i4965763, i64 0, i32 3
  %.13034 = bitcast i64* %.13023 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(24) %.13034, i8 0, i64 24, i1 false)
  %.6.i4925765 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1352, align 8
  %.1305011523 = bitcast { i64, i64, i8, i64 }* %.6.i4925765 to i64*
  store i64 3, i64* %.1305011523, align 8
  %.6.i4885766 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1352, align 8
  %.13063 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i4885766, i64 0, i32 3
  store i64 139, i64* %.13063, align 8
  %.6.i4845767 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1352, align 8
  %.13077 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i4845767, i64 0, i32 3
  %.13078 = getelementptr i64, i64* %.13077, i64 1
  store i64 53, i64* %.13078, align 8
  %.6.i4805768 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1352, align 8
  %.13091 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i4805768, i64 0, i32 3
  %.13092 = getelementptr i64, i64* %.13091, i64 2
  store i64 151, i64* %.13092, align 8
  %.6.i340857696751 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1352, align 8
  %.13141675211524 = bitcast { i64, i64, i8, i64 }* %.6.i340857696751 to i64*
  %.131426753 = load i64, i64* %.13141675211524, align 8
  %.131436754 = icmp sgt i64 %.131426753, 0
  br i1 %.131436754, label %B1702.lr.ph, label %B1714

B1702.lr.ph:                                      ; preds = %B1687.endif.endif.endif
  %min.iters.check8280 = icmp ult i64 %.131426753, 16
  br i1 %min.iters.check8280, label %B1702.preheader, label %vector.ph8281

B1702.preheader:                                  ; preds = %middle.block8277, %B1702.lr.ph
  %temp.2.89.2.06756.ph = phi i64 [ 1, %B1702.lr.ph ], [ %1366, %middle.block8277 ]
  %.13107.06755.ph = phi i64 [ 0, %B1702.lr.ph ], [ %n.vec8283, %middle.block8277 ]
  br label %B1702

vector.ph8281:                                    ; preds = %B1702.lr.ph
  %n.vec8283 = and i64 %.131426753, -16
  br label %vector.body8279

vector.body8279:                                  ; preds = %vector.body8279, %vector.ph8281
  %index8284 = phi i64 [ 0, %vector.ph8281 ], [ %index.next8285, %vector.body8279 ]
  %vec.phi8288 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8281 ], [ %1361, %vector.body8279 ]
  %vec.phi8289 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8281 ], [ %1362, %vector.body8279 ]
  %vec.phi8290 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8281 ], [ %1363, %vector.body8279 ]
  %vec.phi8291 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8281 ], [ %1364, %vector.body8279 ]
  %sunkaddr11525 = mul i64 %index8284, 8
  %1353 = bitcast { i64, i64, i8, i64 }* %.6.i340857696751 to i8*
  %sunkaddr11526 = getelementptr i8, i8* %1353, i64 %sunkaddr11525
  %sunkaddr11527 = getelementptr i8, i8* %sunkaddr11526, i64 24
  %1354 = bitcast i8* %sunkaddr11527 to <4 x i64>*
  %wide.load8292 = load <4 x i64>, <4 x i64>* %1354, align 8
  %sunkaddr11528 = mul i64 %index8284, 8
  %1355 = bitcast { i64, i64, i8, i64 }* %.6.i340857696751 to i8*
  %sunkaddr11529 = getelementptr i8, i8* %1355, i64 %sunkaddr11528
  %sunkaddr11530 = getelementptr i8, i8* %sunkaddr11529, i64 56
  %1356 = bitcast i8* %sunkaddr11530 to <4 x i64>*
  %wide.load8293 = load <4 x i64>, <4 x i64>* %1356, align 8
  %sunkaddr11531 = mul i64 %index8284, 8
  %1357 = bitcast { i64, i64, i8, i64 }* %.6.i340857696751 to i8*
  %sunkaddr11532 = getelementptr i8, i8* %1357, i64 %sunkaddr11531
  %sunkaddr11533 = getelementptr i8, i8* %sunkaddr11532, i64 88
  %1358 = bitcast i8* %sunkaddr11533 to <4 x i64>*
  %wide.load8294 = load <4 x i64>, <4 x i64>* %1358, align 8
  %sunkaddr11534 = mul i64 %index8284, 8
  %1359 = bitcast { i64, i64, i8, i64 }* %.6.i340857696751 to i8*
  %sunkaddr11535 = getelementptr i8, i8* %1359, i64 %sunkaddr11534
  %sunkaddr11536 = getelementptr i8, i8* %sunkaddr11535, i64 120
  %1360 = bitcast i8* %sunkaddr11536 to <4 x i64>*
  %wide.load8295 = load <4 x i64>, <4 x i64>* %1360, align 8
  %1361 = mul <4 x i64> %wide.load8292, %vec.phi8288
  %1362 = mul <4 x i64> %wide.load8293, %vec.phi8289
  %1363 = mul <4 x i64> %wide.load8294, %vec.phi8290
  %1364 = mul <4 x i64> %wide.load8295, %vec.phi8291
  %index.next8285 = add i64 %index8284, 16
  %1365 = icmp eq i64 %n.vec8283, %index.next8285
  br i1 %1365, label %middle.block8277, label %vector.body8279, !llvm.loop !228

middle.block8277:                                 ; preds = %vector.body8279
  %bin.rdx8296 = mul <4 x i64> %1362, %1361
  %bin.rdx8297 = mul <4 x i64> %1363, %bin.rdx8296
  %bin.rdx8298 = mul <4 x i64> %1364, %bin.rdx8297
  %rdx.shuf10199 = shufflevector <4 x i64> %bin.rdx8298, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10200 = mul <4 x i64> %bin.rdx8298, %rdx.shuf10199
  %rdx.shuf10201 = shufflevector <4 x i64> %bin.rdx10200, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10202 = mul <4 x i64> %bin.rdx10200, %rdx.shuf10201
  %1366 = extractelement <4 x i64> %bin.rdx10202, i32 0
  %cmp.n8287 = icmp eq i64 %.131426753, %n.vec8283
  br i1 %cmp.n8287, label %B1714, label %B1702.preheader

B1714.endif.endif.if:                             ; preds = %B1714
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1714.endif.endif.endif:                          ; preds = %B1714
  %.5.i475 = getelementptr i8, i8* %.13213, i64 24
  %1367 = bitcast i8* %.5.i475 to { i64, i64, i8, i64 }**
  %.6.i4765770 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1367, align 8
  %.13226 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i4765770, i64 0, i32 1
  store i64 5, i64* %.13226, align 8
  %.6.i4745771 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1367, align 8
  %.1323211537 = bitcast { i64, i64, i8, i64 }* %.6.i4745771 to i64*
  store i64 0, i64* %.1323211537, align 8
  %.6.i4725772 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1367, align 8
  %.13238 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i4725772, i64 0, i32 2
  store i8 0, i8* %.13238, align 1
  %.6.i4685773 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1367, align 8
  %.13251 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i4685773, i64 0, i32 3
  %.13262 = bitcast i64* %.13251 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(40) %.13262, i8 0, i64 40, i1 false)
  %.6.i4645775 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1367, align 8
  %.1327811538 = bitcast { i64, i64, i8, i64 }* %.6.i4645775 to i64*
  store i64 5, i64* %.1327811538, align 8
  %.6.i4605776 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1367, align 8
  %.13291 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i4605776, i64 0, i32 3
  store i64 12998225, i64* %.13291, align 8
  %.6.i4565777 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1367, align 8
  %.13305 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i4565777, i64 0, i32 3
  %.13306 = getelementptr i64, i64* %.13305, i64 1
  store i64 689, i64* %.13306, align 8
  %.6.i4525778 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1367, align 8
  %.13319 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i4525778, i64 0, i32 3
  %.13320 = getelementptr i64, i64* %.13319, i64 2
  store i64 2007, i64* %.13320, align 8
  %.6.i4485779 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1367, align 8
  %.13333 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i4485779, i64 0, i32 3
  %.13334 = getelementptr i64, i64* %.13333, i64 3
  store i64 5, i64* %.13334, align 8
  %.6.i4445780 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1367, align 8
  %.13347 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i4445780, i64 0, i32 3
  %.13348 = getelementptr i64, i64* %.13347, i64 4
  store i64 826, i64* %.13348, align 8
  %.6.i3.i388 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1367, align 8, !noalias !229
  %.5342.i38911539 = bitcast { i64, i64, i8, i64 }* %.6.i3.i388 to i64*
  %.548.i390 = load i64, i64* %.5342.i38911539, align 8, !noalias !229
  %.559.i391 = icmp sgt i64 %.548.i390, 0
  br i1 %.559.i391, label %B14.endif.lr.ph.i393, label %B1714.endif.endif.endif.endif

B14.endif.lr.ph.i393:                             ; preds = %B1714.endif.endif.endif
  %min.iters.check.i392 = icmp ult i64 %.548.i390, 16
  br i1 %min.iters.check.i392, label %B14.endif.preheader.i396, label %vector.ph.i398

B14.endif.preheader.i396:                         ; preds = %middle.block.i430, %B14.endif.lr.ph.i393
  %acc.2.011.ph.i394 = phi i64 [ 0, %B14.endif.lr.ph.i393 ], [ %1381, %middle.block.i430 ]
  %.17.010.ph.i395 = phi i64 [ 0, %B14.endif.lr.ph.i393 ], [ %n.vec.i397, %middle.block.i430 ]
  br label %B14.endif.i441

vector.ph.i398:                                   ; preds = %B14.endif.lr.ph.i393
  %n.vec.i397 = and i64 %.548.i390, -16
  br label %vector.body.i421

vector.body.i421:                                 ; preds = %vector.body.i421, %vector.ph.i398
  %index.i399 = phi i64 [ 0, %vector.ph.i398 ], [ %index.next.i420, %vector.body.i421 ]
  %vec.phi.i400 = phi <4 x i64> [ zeroinitializer, %vector.ph.i398 ], [ %1376, %vector.body.i421 ]
  %vec.phi12.i401 = phi <4 x i64> [ zeroinitializer, %vector.ph.i398 ], [ %1377, %vector.body.i421 ]
  %vec.phi13.i402 = phi <4 x i64> [ zeroinitializer, %vector.ph.i398 ], [ %1378, %vector.body.i421 ]
  %vec.phi14.i403 = phi <4 x i64> [ zeroinitializer, %vector.ph.i398 ], [ %1379, %vector.body.i421 ]
  %sunkaddr11540 = mul i64 %index.i399, 8
  %1368 = bitcast { i64, i64, i8, i64 }* %.6.i3.i388 to i8*
  %sunkaddr11541 = getelementptr i8, i8* %1368, i64 %sunkaddr11540
  %sunkaddr11542 = getelementptr i8, i8* %sunkaddr11541, i64 24
  %1369 = bitcast i8* %sunkaddr11542 to <4 x i64>*
  %wide.load.i407 = load <4 x i64>, <4 x i64>* %1369, align 8, !noalias !229
  %sunkaddr11543 = mul i64 %index.i399, 8
  %1370 = bitcast { i64, i64, i8, i64 }* %.6.i3.i388 to i8*
  %sunkaddr11544 = getelementptr i8, i8* %1370, i64 %sunkaddr11543
  %sunkaddr11545 = getelementptr i8, i8* %sunkaddr11544, i64 56
  %1371 = bitcast i8* %sunkaddr11545 to <4 x i64>*
  %wide.load15.i411 = load <4 x i64>, <4 x i64>* %1371, align 8, !noalias !229
  %sunkaddr11546 = mul i64 %index.i399, 8
  %1372 = bitcast { i64, i64, i8, i64 }* %.6.i3.i388 to i8*
  %sunkaddr11547 = getelementptr i8, i8* %1372, i64 %sunkaddr11546
  %sunkaddr11548 = getelementptr i8, i8* %sunkaddr11547, i64 88
  %1373 = bitcast i8* %sunkaddr11548 to <4 x i64>*
  %wide.load16.i415 = load <4 x i64>, <4 x i64>* %1373, align 8, !noalias !229
  %sunkaddr11549 = mul i64 %index.i399, 8
  %1374 = bitcast { i64, i64, i8, i64 }* %.6.i3.i388 to i8*
  %sunkaddr11550 = getelementptr i8, i8* %1374, i64 %sunkaddr11549
  %sunkaddr11551 = getelementptr i8, i8* %sunkaddr11550, i64 120
  %1375 = bitcast i8* %sunkaddr11551 to <4 x i64>*
  %wide.load17.i419 = load <4 x i64>, <4 x i64>* %1375, align 8, !noalias !229
  %1376 = add <4 x i64> %wide.load.i407, %vec.phi.i400
  %1377 = add <4 x i64> %wide.load15.i411, %vec.phi12.i401
  %1378 = add <4 x i64> %wide.load16.i415, %vec.phi13.i402
  %1379 = add <4 x i64> %wide.load17.i419, %vec.phi14.i403
  %index.next.i420 = add i64 %index.i399, 16
  %1380 = icmp eq i64 %n.vec.i397, %index.next.i420
  br i1 %1380, label %middle.block.i430, label %vector.body.i421, !llvm.loop !51

middle.block.i430:                                ; preds = %vector.body.i421
  %bin.rdx.i422 = add <4 x i64> %1377, %1376
  %bin.rdx18.i423 = add <4 x i64> %bin.rdx.i422, %1378
  %bin.rdx19.i424 = add <4 x i64> %bin.rdx18.i423, %1379
  %rdx.shuf.i425 = shufflevector <4 x i64> %bin.rdx19.i424, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx39.i426 = add <4 x i64> %rdx.shuf.i425, %bin.rdx19.i424
  %rdx.shuf40.i427 = shufflevector <4 x i64> %bin.rdx39.i426, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx41.i428 = add <4 x i64> %rdx.shuf40.i427, %bin.rdx39.i426
  %1381 = extractelement <4 x i64> %bin.rdx41.i428, i32 0
  %cmp.n.i429 = icmp eq i64 %.548.i390, %n.vec.i397
  br i1 %cmp.n.i429, label %B1714.endif.endif.endif.endif, label %B14.endif.preheader.i396

B14.endif.i441:                                   ; preds = %B14.endif.i441, %B14.endif.preheader.i396
  %acc.2.011.i432 = phi i64 [ %.94.i439, %B14.endif.i441 ], [ %acc.2.011.ph.i394, %B14.endif.preheader.i396 ]
  %.17.010.i433 = phi i64 [ %.68.i438, %B14.endif.i441 ], [ %.17.010.ph.i395, %B14.endif.preheader.i396 ]
  %sunkaddr11552 = mul i64 %.17.010.i433, 8
  %1382 = bitcast { i64, i64, i8, i64 }* %.6.i3.i388 to i8*
  %sunkaddr11553 = getelementptr i8, i8* %1382, i64 %sunkaddr11552
  %sunkaddr11554 = getelementptr i8, i8* %sunkaddr11553, i64 24
  %1383 = bitcast i8* %sunkaddr11554 to i64*
  %.65.i437 = load i64, i64* %1383, align 8, !noalias !229
  %.68.i438 = add nuw nsw i64 %.17.010.i433, 1
  %.94.i439 = add nsw i64 %.65.i437, %acc.2.011.i432
  %exitcond.not.i440 = icmp eq i64 %.548.i390, %.68.i438
  br i1 %exitcond.not.i440, label %B1714.endif.endif.endif.endif, label %B14.endif.i441, !llvm.loop !52

B1714.endif.endif.endif.endif:                    ; preds = %B14.endif.i441, %middle.block.i430, %B1714.endif.endif.endif
  %acc.2.0.lcssa.i431 = phi i64 [ 0, %B1714.endif.endif.endif ], [ %1381, %middle.block.i430 ], [ %.94.i439, %B14.endif.i441 ]
  tail call void @NRT_decref(i8* nonnull %.13213)
  %.13424 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 40, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.13425 = icmp eq i8* %.13424, null
  br i1 %.13425, label %B1741.endif.endif.if, label %B1741.endif.endif.endif, !prof !3

B1741.endif.endif.if:                             ; preds = %B1714.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1741.endif.endif.endif:                          ; preds = %B1714.endif.endif.endif.endif
  %.5.i383 = getelementptr i8, i8* %.13424, i64 24
  %1384 = bitcast i8* %.5.i383 to { i64, i64, i8, i64 }**
  %.6.i3845781 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1384, align 8
  %.13437 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i3845781, i64 0, i32 1
  store i64 2, i64* %.13437, align 8
  %.6.i3825782 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1384, align 8
  %.1344311555 = bitcast { i64, i64, i8, i64 }* %.6.i3825782 to i64*
  store i64 0, i64* %.1344311555, align 8
  %.6.i3805783 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1384, align 8
  %.13449 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i3805783, i64 0, i32 2
  store i8 0, i8* %.13449, align 1
  %.6.i3765784 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1384, align 8
  %.13462 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i3765784, i64 0, i32 3
  %.13473 = bitcast i64* %.13462 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %.13473, i8 0, i64 16, i1 false)
  %.6.i3725786 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1384, align 8
  %.1348911556 = bitcast { i64, i64, i8, i64 }* %.6.i3725786 to i64*
  store i64 2, i64* %.1348911556, align 8
  %.6.i3685787 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1384, align 8
  %.13502 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i3685787, i64 0, i32 3
  store i64 193, i64* %.13502, align 8
  %.6.i3645788 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1384, align 8
  %.13516 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i3645788, i64 0, i32 3
  %.13517 = getelementptr i64, i64* %.13516, i64 1
  store i64 0, i64* %.13517, align 8
  %.6.i350057896743 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1384, align 8
  %.13570674411557 = bitcast { i64, i64, i8, i64 }* %.6.i350057896743 to i64*
  %.135716745 = load i64, i64* %.13570674411557, align 8
  %.135726746 = icmp sgt i64 %.135716745, 0
  br i1 %.135726746, label %B1756.lr.ph, label %B1768

B1756.lr.ph:                                      ; preds = %B1741.endif.endif.endif
  %min.iters.check8303 = icmp ult i64 %.135716745, 16
  br i1 %min.iters.check8303, label %B1756.preheader, label %vector.ph8304

B1756.preheader:                                  ; preds = %middle.block8300, %B1756.lr.ph
  %temp.2.53.2.06748.ph = phi i64 [ 1, %B1756.lr.ph ], [ %1398, %middle.block8300 ]
  %.13536.06747.ph = phi i64 [ 0, %B1756.lr.ph ], [ %n.vec8306, %middle.block8300 ]
  br label %B1756

vector.ph8304:                                    ; preds = %B1756.lr.ph
  %n.vec8306 = and i64 %.135716745, -16
  br label %vector.body8302

vector.body8302:                                  ; preds = %vector.body8302, %vector.ph8304
  %index8307 = phi i64 [ 0, %vector.ph8304 ], [ %index.next8308, %vector.body8302 ]
  %vec.phi8311 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8304 ], [ %1393, %vector.body8302 ]
  %vec.phi8312 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8304 ], [ %1394, %vector.body8302 ]
  %vec.phi8313 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8304 ], [ %1395, %vector.body8302 ]
  %vec.phi8314 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8304 ], [ %1396, %vector.body8302 ]
  %sunkaddr11558 = mul i64 %index8307, 8
  %1385 = bitcast { i64, i64, i8, i64 }* %.6.i350057896743 to i8*
  %sunkaddr11559 = getelementptr i8, i8* %1385, i64 %sunkaddr11558
  %sunkaddr11560 = getelementptr i8, i8* %sunkaddr11559, i64 24
  %1386 = bitcast i8* %sunkaddr11560 to <4 x i64>*
  %wide.load8315 = load <4 x i64>, <4 x i64>* %1386, align 8
  %sunkaddr11561 = mul i64 %index8307, 8
  %1387 = bitcast { i64, i64, i8, i64 }* %.6.i350057896743 to i8*
  %sunkaddr11562 = getelementptr i8, i8* %1387, i64 %sunkaddr11561
  %sunkaddr11563 = getelementptr i8, i8* %sunkaddr11562, i64 56
  %1388 = bitcast i8* %sunkaddr11563 to <4 x i64>*
  %wide.load8316 = load <4 x i64>, <4 x i64>* %1388, align 8
  %sunkaddr11564 = mul i64 %index8307, 8
  %1389 = bitcast { i64, i64, i8, i64 }* %.6.i350057896743 to i8*
  %sunkaddr11565 = getelementptr i8, i8* %1389, i64 %sunkaddr11564
  %sunkaddr11566 = getelementptr i8, i8* %sunkaddr11565, i64 88
  %1390 = bitcast i8* %sunkaddr11566 to <4 x i64>*
  %wide.load8317 = load <4 x i64>, <4 x i64>* %1390, align 8
  %sunkaddr11567 = mul i64 %index8307, 8
  %1391 = bitcast { i64, i64, i8, i64 }* %.6.i350057896743 to i8*
  %sunkaddr11568 = getelementptr i8, i8* %1391, i64 %sunkaddr11567
  %sunkaddr11569 = getelementptr i8, i8* %sunkaddr11568, i64 120
  %1392 = bitcast i8* %sunkaddr11569 to <4 x i64>*
  %wide.load8318 = load <4 x i64>, <4 x i64>* %1392, align 8
  %1393 = mul <4 x i64> %wide.load8315, %vec.phi8311
  %1394 = mul <4 x i64> %wide.load8316, %vec.phi8312
  %1395 = mul <4 x i64> %wide.load8317, %vec.phi8313
  %1396 = mul <4 x i64> %wide.load8318, %vec.phi8314
  %index.next8308 = add i64 %index8307, 16
  %1397 = icmp eq i64 %n.vec8306, %index.next8308
  br i1 %1397, label %middle.block8300, label %vector.body8302, !llvm.loop !232

middle.block8300:                                 ; preds = %vector.body8302
  %bin.rdx8319 = mul <4 x i64> %1394, %1393
  %bin.rdx8320 = mul <4 x i64> %1395, %bin.rdx8319
  %bin.rdx8321 = mul <4 x i64> %1396, %bin.rdx8320
  %rdx.shuf10203 = shufflevector <4 x i64> %bin.rdx8321, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10204 = mul <4 x i64> %bin.rdx8321, %rdx.shuf10203
  %rdx.shuf10205 = shufflevector <4 x i64> %bin.rdx10204, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10206 = mul <4 x i64> %bin.rdx10204, %rdx.shuf10205
  %1398 = extractelement <4 x i64> %bin.rdx10206, i32 0
  %cmp.n8310 = icmp eq i64 %.135716745, %n.vec8306
  br i1 %cmp.n8310, label %B1768, label %B1756.preheader

B1795.endif.endif.if:                             ; preds = %B1768
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1795.endif.endif.endif:                          ; preds = %B1768
  %.5.i359 = getelementptr i8, i8* %.13652, i64 24
  %1399 = bitcast i8* %.5.i359 to { i64, i64, i8, i64 }**
  %.6.i3605790 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1399, align 8
  %.13665 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i3605790, i64 0, i32 1
  store i64 2, i64* %.13665, align 8
  %.6.i3585791 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1399, align 8
  %.1367111570 = bitcast { i64, i64, i8, i64 }* %.6.i3585791 to i64*
  store i64 0, i64* %.1367111570, align 8
  %.6.i3565792 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1399, align 8
  %.13677 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i3565792, i64 0, i32 2
  store i8 0, i8* %.13677, align 1
  %.6.i3525793 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1399, align 8
  %.13690 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i3525793, i64 0, i32 3
  %.13701 = bitcast i64* %.13690 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %.13701, i8 0, i64 16, i1 false)
  %.6.i3485795 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1399, align 8
  %.1371711571 = bitcast { i64, i64, i8, i64 }* %.6.i3485795 to i64*
  store i64 2, i64* %.1371711571, align 8
  %.6.i3445796 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1399, align 8
  %.13730 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i3445796, i64 0, i32 3
  store i64 0, i64* %.13730, align 8
  %.6.i3405797 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1399, align 8
  %.13744 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i3405797, i64 0, i32 3
  %.13745 = getelementptr i64, i64* %.13744, i64 1
  store i64 37675211133, i64* %.13745, align 8
  %.6.i359257986735 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1399, align 8
  %.13796673611572 = bitcast { i64, i64, i8, i64 }* %.6.i359257986735 to i64*
  %.137976737 = load i64, i64* %.13796673611572, align 8
  %.137986738 = icmp sgt i64 %.137976737, 0
  br i1 %.137986738, label %B1810.lr.ph, label %B1822

B1810.lr.ph:                                      ; preds = %B1795.endif.endif.endif
  %min.iters.check8326 = icmp ult i64 %.137976737, 16
  br i1 %min.iters.check8326, label %B1810.preheader, label %vector.ph8327

B1810.preheader:                                  ; preds = %middle.block8323, %B1810.lr.ph
  %temp.2.35.2.06740.ph = phi i64 [ 1, %B1810.lr.ph ], [ %1413, %middle.block8323 ]
  %.13762.06739.ph = phi i64 [ 0, %B1810.lr.ph ], [ %n.vec8329, %middle.block8323 ]
  br label %B1810

vector.ph8327:                                    ; preds = %B1810.lr.ph
  %n.vec8329 = and i64 %.137976737, -16
  br label %vector.body8325

vector.body8325:                                  ; preds = %vector.body8325, %vector.ph8327
  %index8330 = phi i64 [ 0, %vector.ph8327 ], [ %index.next8331, %vector.body8325 ]
  %vec.phi8334 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8327 ], [ %1408, %vector.body8325 ]
  %vec.phi8335 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8327 ], [ %1409, %vector.body8325 ]
  %vec.phi8336 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8327 ], [ %1410, %vector.body8325 ]
  %vec.phi8337 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8327 ], [ %1411, %vector.body8325 ]
  %sunkaddr11573 = mul i64 %index8330, 8
  %1400 = bitcast { i64, i64, i8, i64 }* %.6.i359257986735 to i8*
  %sunkaddr11574 = getelementptr i8, i8* %1400, i64 %sunkaddr11573
  %sunkaddr11575 = getelementptr i8, i8* %sunkaddr11574, i64 24
  %1401 = bitcast i8* %sunkaddr11575 to <4 x i64>*
  %wide.load8338 = load <4 x i64>, <4 x i64>* %1401, align 8
  %sunkaddr11576 = mul i64 %index8330, 8
  %1402 = bitcast { i64, i64, i8, i64 }* %.6.i359257986735 to i8*
  %sunkaddr11577 = getelementptr i8, i8* %1402, i64 %sunkaddr11576
  %sunkaddr11578 = getelementptr i8, i8* %sunkaddr11577, i64 56
  %1403 = bitcast i8* %sunkaddr11578 to <4 x i64>*
  %wide.load8339 = load <4 x i64>, <4 x i64>* %1403, align 8
  %sunkaddr11579 = mul i64 %index8330, 8
  %1404 = bitcast { i64, i64, i8, i64 }* %.6.i359257986735 to i8*
  %sunkaddr11580 = getelementptr i8, i8* %1404, i64 %sunkaddr11579
  %sunkaddr11581 = getelementptr i8, i8* %sunkaddr11580, i64 88
  %1405 = bitcast i8* %sunkaddr11581 to <4 x i64>*
  %wide.load8340 = load <4 x i64>, <4 x i64>* %1405, align 8
  %sunkaddr11582 = mul i64 %index8330, 8
  %1406 = bitcast { i64, i64, i8, i64 }* %.6.i359257986735 to i8*
  %sunkaddr11583 = getelementptr i8, i8* %1406, i64 %sunkaddr11582
  %sunkaddr11584 = getelementptr i8, i8* %sunkaddr11583, i64 120
  %1407 = bitcast i8* %sunkaddr11584 to <4 x i64>*
  %wide.load8341 = load <4 x i64>, <4 x i64>* %1407, align 8
  %1408 = mul <4 x i64> %wide.load8338, %vec.phi8334
  %1409 = mul <4 x i64> %wide.load8339, %vec.phi8335
  %1410 = mul <4 x i64> %wide.load8340, %vec.phi8336
  %1411 = mul <4 x i64> %wide.load8341, %vec.phi8337
  %index.next8331 = add i64 %index8330, 16
  %1412 = icmp eq i64 %n.vec8329, %index.next8331
  br i1 %1412, label %middle.block8323, label %vector.body8325, !llvm.loop !233

middle.block8323:                                 ; preds = %vector.body8325
  %bin.rdx8342 = mul <4 x i64> %1409, %1408
  %bin.rdx8343 = mul <4 x i64> %1410, %bin.rdx8342
  %bin.rdx8344 = mul <4 x i64> %1411, %bin.rdx8343
  %rdx.shuf10207 = shufflevector <4 x i64> %bin.rdx8344, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10208 = mul <4 x i64> %bin.rdx8344, %rdx.shuf10207
  %rdx.shuf10209 = shufflevector <4 x i64> %bin.rdx10208, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10210 = mul <4 x i64> %bin.rdx10208, %rdx.shuf10209
  %1413 = extractelement <4 x i64> %bin.rdx10210, i32 0
  %cmp.n8333 = icmp eq i64 %.137976737, %n.vec8329
  br i1 %cmp.n8333, label %B1822, label %B1810.preheader

B1849.endif.endif.if:                             ; preds = %B1822
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1849.endif.endif.endif:                          ; preds = %B1822
  %.5.i335 = getelementptr i8, i8* %.13881, i64 24
  %1414 = bitcast i8* %.5.i335 to { i64, i64, i8, i64 }**
  %.6.i3365799 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1414, align 8
  %.13894 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i3365799, i64 0, i32 1
  store i64 2, i64* %.13894, align 8
  %.6.i3345800 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1414, align 8
  %.1390011585 = bitcast { i64, i64, i8, i64 }* %.6.i3345800 to i64*
  store i64 0, i64* %.1390011585, align 8
  %.6.i3325801 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1414, align 8
  %.13906 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i3325801, i64 0, i32 2
  store i8 0, i8* %.13906, align 1
  %.6.i3285802 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1414, align 8
  %.13919 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i3285802, i64 0, i32 3
  %.13930 = bitcast i64* %.13919 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %.13930, i8 0, i64 16, i1 false)
  %.6.i3245804 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1414, align 8
  %.1394611586 = bitcast { i64, i64, i8, i64 }* %.6.i3245804 to i64*
  store i64 2, i64* %.1394611586, align 8
  %.6.i3205805 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1414, align 8
  %.13959 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i3205805, i64 0, i32 3
  store i64 0, i64* %.13959, align 8
  %.6.i3165806 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1414, align 8
  %.13973 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i3165806, i64 0, i32 3
  %.13974 = getelementptr i64, i64* %.13973, i64 1
  store i64 67374456587, i64* %.13974, align 8
  %.6.i368458076728 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1414, align 8
  %.14025672911587 = bitcast { i64, i64, i8, i64 }* %.6.i368458076728 to i64*
  %.140266730 = load i64, i64* %.14025672911587, align 8
  %.140276731 = icmp sgt i64 %.140266730, 0
  br i1 %.140276731, label %B1864.lr.ph, label %B1876

B1864.lr.ph:                                      ; preds = %B1849.endif.endif.endif
  %min.iters.check8349 = icmp ult i64 %.140266730, 16
  br i1 %min.iters.check8349, label %B1864.preheader, label %vector.ph8350

B1864.preheader:                                  ; preds = %middle.block8346, %B1864.lr.ph
  %temp.2.17.2.06733.ph = phi i64 [ 1, %B1864.lr.ph ], [ %1428, %middle.block8346 ]
  %.13991.06732.ph = phi i64 [ 0, %B1864.lr.ph ], [ %n.vec8352, %middle.block8346 ]
  br label %B1864

vector.ph8350:                                    ; preds = %B1864.lr.ph
  %n.vec8352 = and i64 %.140266730, -16
  br label %vector.body8348

vector.body8348:                                  ; preds = %vector.body8348, %vector.ph8350
  %index8353 = phi i64 [ 0, %vector.ph8350 ], [ %index.next8354, %vector.body8348 ]
  %vec.phi8357 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8350 ], [ %1423, %vector.body8348 ]
  %vec.phi8358 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8350 ], [ %1424, %vector.body8348 ]
  %vec.phi8359 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8350 ], [ %1425, %vector.body8348 ]
  %vec.phi8360 = phi <4 x i64> [ <i64 1, i64 1, i64 1, i64 1>, %vector.ph8350 ], [ %1426, %vector.body8348 ]
  %sunkaddr11588 = mul i64 %index8353, 8
  %1415 = bitcast { i64, i64, i8, i64 }* %.6.i368458076728 to i8*
  %sunkaddr11589 = getelementptr i8, i8* %1415, i64 %sunkaddr11588
  %sunkaddr11590 = getelementptr i8, i8* %sunkaddr11589, i64 24
  %1416 = bitcast i8* %sunkaddr11590 to <4 x i64>*
  %wide.load8361 = load <4 x i64>, <4 x i64>* %1416, align 8
  %sunkaddr11591 = mul i64 %index8353, 8
  %1417 = bitcast { i64, i64, i8, i64 }* %.6.i368458076728 to i8*
  %sunkaddr11592 = getelementptr i8, i8* %1417, i64 %sunkaddr11591
  %sunkaddr11593 = getelementptr i8, i8* %sunkaddr11592, i64 56
  %1418 = bitcast i8* %sunkaddr11593 to <4 x i64>*
  %wide.load8362 = load <4 x i64>, <4 x i64>* %1418, align 8
  %sunkaddr11594 = mul i64 %index8353, 8
  %1419 = bitcast { i64, i64, i8, i64 }* %.6.i368458076728 to i8*
  %sunkaddr11595 = getelementptr i8, i8* %1419, i64 %sunkaddr11594
  %sunkaddr11596 = getelementptr i8, i8* %sunkaddr11595, i64 88
  %1420 = bitcast i8* %sunkaddr11596 to <4 x i64>*
  %wide.load8363 = load <4 x i64>, <4 x i64>* %1420, align 8
  %sunkaddr11597 = mul i64 %index8353, 8
  %1421 = bitcast { i64, i64, i8, i64 }* %.6.i368458076728 to i8*
  %sunkaddr11598 = getelementptr i8, i8* %1421, i64 %sunkaddr11597
  %sunkaddr11599 = getelementptr i8, i8* %sunkaddr11598, i64 120
  %1422 = bitcast i8* %sunkaddr11599 to <4 x i64>*
  %wide.load8364 = load <4 x i64>, <4 x i64>* %1422, align 8
  %1423 = mul <4 x i64> %wide.load8361, %vec.phi8357
  %1424 = mul <4 x i64> %wide.load8362, %vec.phi8358
  %1425 = mul <4 x i64> %wide.load8363, %vec.phi8359
  %1426 = mul <4 x i64> %wide.load8364, %vec.phi8360
  %index.next8354 = add i64 %index8353, 16
  %1427 = icmp eq i64 %n.vec8352, %index.next8354
  br i1 %1427, label %middle.block8346, label %vector.body8348, !llvm.loop !234

middle.block8346:                                 ; preds = %vector.body8348
  %bin.rdx8365 = mul <4 x i64> %1424, %1423
  %bin.rdx8366 = mul <4 x i64> %1425, %bin.rdx8365
  %bin.rdx8367 = mul <4 x i64> %1426, %bin.rdx8366
  %rdx.shuf10211 = shufflevector <4 x i64> %bin.rdx8367, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx10212 = mul <4 x i64> %bin.rdx8367, %rdx.shuf10211
  %rdx.shuf10213 = shufflevector <4 x i64> %bin.rdx10212, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx10214 = mul <4 x i64> %bin.rdx10212, %rdx.shuf10213
  %1428 = extractelement <4 x i64> %bin.rdx10214, i32 0
  %cmp.n8356 = icmp eq i64 %.140266730, %n.vec8352
  br i1 %cmp.n8356, label %B1876, label %B1864.preheader

B1876.endif.endif.if:                             ; preds = %B1876
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1876.endif.endif.endif:                          ; preds = %B1876
  %.5.i311 = getelementptr i8, i8* %.14097, i64 24
  %1429 = bitcast i8* %.5.i311 to { i64, i64, i8, i64 }**
  %.6.i3125808 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1429, align 8
  %.14110 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i3125808, i64 0, i32 1
  store i64 3, i64* %.14110, align 8
  %.6.i3105809 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1429, align 8
  %.1411611600 = bitcast { i64, i64, i8, i64 }* %.6.i3105809 to i64*
  store i64 0, i64* %.1411611600, align 8
  %.6.i3085810 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1429, align 8
  %.14122 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i3085810, i64 0, i32 2
  store i8 0, i8* %.14122, align 1
  %.6.i3045811 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1429, align 8
  %.14135 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i3045811, i64 0, i32 3
  %.14146 = bitcast i64* %.14135 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(24) %.14146, i8 0, i64 24, i1 false)
  %.6.i3005813 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1429, align 8
  %.1416211601 = bitcast { i64, i64, i8, i64 }* %.6.i3005813 to i64*
  store i64 3, i64* %.1416211601, align 8
  %.6.i2965814 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1429, align 8
  %.14175 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i2965814, i64 0, i32 3
  store i64 886515, i64* %.14175, align 8
  %.6.i2925815 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1429, align 8
  %.14189 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i2925815, i64 0, i32 3
  %.14190 = getelementptr i64, i64* %.14189, i64 1
  store i64 86, i64* %.14190, align 8
  %.6.i2885816 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1429, align 8
  %.14203 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i2885816, i64 0, i32 3
  %.14204 = getelementptr i64, i64* %.14203, i64 2
  store i64 254, i64* %.14204, align 8
  %.6.i3.i232 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1429, align 8, !noalias !235
  %.5342.i23311602 = bitcast { i64, i64, i8, i64 }* %.6.i3.i232 to i64*
  %.548.i234 = load i64, i64* %.5342.i23311602, align 8, !noalias !235
  %.559.i235 = icmp sgt i64 %.548.i234, 0
  br i1 %.559.i235, label %B14.endif.lr.ph.i237, label %B1876.endif.endif.endif.endif

B14.endif.lr.ph.i237:                             ; preds = %B1876.endif.endif.endif
  %min.iters.check.i236 = icmp ult i64 %.548.i234, 16
  br i1 %min.iters.check.i236, label %B14.endif.preheader.i240, label %vector.ph.i242

B14.endif.preheader.i240:                         ; preds = %middle.block.i274, %B14.endif.lr.ph.i237
  %acc.2.011.ph.i238 = phi i64 [ 0, %B14.endif.lr.ph.i237 ], [ %1443, %middle.block.i274 ]
  %.17.010.ph.i239 = phi i64 [ 0, %B14.endif.lr.ph.i237 ], [ %n.vec.i241, %middle.block.i274 ]
  br label %B14.endif.i285

vector.ph.i242:                                   ; preds = %B14.endif.lr.ph.i237
  %n.vec.i241 = and i64 %.548.i234, -16
  br label %vector.body.i265

vector.body.i265:                                 ; preds = %vector.body.i265, %vector.ph.i242
  %index.i243 = phi i64 [ 0, %vector.ph.i242 ], [ %index.next.i264, %vector.body.i265 ]
  %vec.phi.i244 = phi <4 x i64> [ zeroinitializer, %vector.ph.i242 ], [ %1438, %vector.body.i265 ]
  %vec.phi12.i245 = phi <4 x i64> [ zeroinitializer, %vector.ph.i242 ], [ %1439, %vector.body.i265 ]
  %vec.phi13.i246 = phi <4 x i64> [ zeroinitializer, %vector.ph.i242 ], [ %1440, %vector.body.i265 ]
  %vec.phi14.i247 = phi <4 x i64> [ zeroinitializer, %vector.ph.i242 ], [ %1441, %vector.body.i265 ]
  %sunkaddr11603 = mul i64 %index.i243, 8
  %1430 = bitcast { i64, i64, i8, i64 }* %.6.i3.i232 to i8*
  %sunkaddr11604 = getelementptr i8, i8* %1430, i64 %sunkaddr11603
  %sunkaddr11605 = getelementptr i8, i8* %sunkaddr11604, i64 24
  %1431 = bitcast i8* %sunkaddr11605 to <4 x i64>*
  %wide.load.i251 = load <4 x i64>, <4 x i64>* %1431, align 8, !noalias !235
  %sunkaddr11606 = mul i64 %index.i243, 8
  %1432 = bitcast { i64, i64, i8, i64 }* %.6.i3.i232 to i8*
  %sunkaddr11607 = getelementptr i8, i8* %1432, i64 %sunkaddr11606
  %sunkaddr11608 = getelementptr i8, i8* %sunkaddr11607, i64 56
  %1433 = bitcast i8* %sunkaddr11608 to <4 x i64>*
  %wide.load15.i255 = load <4 x i64>, <4 x i64>* %1433, align 8, !noalias !235
  %sunkaddr11609 = mul i64 %index.i243, 8
  %1434 = bitcast { i64, i64, i8, i64 }* %.6.i3.i232 to i8*
  %sunkaddr11610 = getelementptr i8, i8* %1434, i64 %sunkaddr11609
  %sunkaddr11611 = getelementptr i8, i8* %sunkaddr11610, i64 88
  %1435 = bitcast i8* %sunkaddr11611 to <4 x i64>*
  %wide.load16.i259 = load <4 x i64>, <4 x i64>* %1435, align 8, !noalias !235
  %sunkaddr11612 = mul i64 %index.i243, 8
  %1436 = bitcast { i64, i64, i8, i64 }* %.6.i3.i232 to i8*
  %sunkaddr11613 = getelementptr i8, i8* %1436, i64 %sunkaddr11612
  %sunkaddr11614 = getelementptr i8, i8* %sunkaddr11613, i64 120
  %1437 = bitcast i8* %sunkaddr11614 to <4 x i64>*
  %wide.load17.i263 = load <4 x i64>, <4 x i64>* %1437, align 8, !noalias !235
  %1438 = add <4 x i64> %wide.load.i251, %vec.phi.i244
  %1439 = add <4 x i64> %wide.load15.i255, %vec.phi12.i245
  %1440 = add <4 x i64> %wide.load16.i259, %vec.phi13.i246
  %1441 = add <4 x i64> %wide.load17.i263, %vec.phi14.i247
  %index.next.i264 = add i64 %index.i243, 16
  %1442 = icmp eq i64 %n.vec.i241, %index.next.i264
  br i1 %1442, label %middle.block.i274, label %vector.body.i265, !llvm.loop !51

middle.block.i274:                                ; preds = %vector.body.i265
  %bin.rdx.i266 = add <4 x i64> %1439, %1438
  %bin.rdx18.i267 = add <4 x i64> %bin.rdx.i266, %1440
  %bin.rdx19.i268 = add <4 x i64> %bin.rdx18.i267, %1441
  %rdx.shuf.i269 = shufflevector <4 x i64> %bin.rdx19.i268, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx39.i270 = add <4 x i64> %rdx.shuf.i269, %bin.rdx19.i268
  %rdx.shuf40.i271 = shufflevector <4 x i64> %bin.rdx39.i270, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx41.i272 = add <4 x i64> %rdx.shuf40.i271, %bin.rdx39.i270
  %1443 = extractelement <4 x i64> %bin.rdx41.i272, i32 0
  %cmp.n.i273 = icmp eq i64 %.548.i234, %n.vec.i241
  br i1 %cmp.n.i273, label %B1876.endif.endif.endif.endif, label %B14.endif.preheader.i240

B14.endif.i285:                                   ; preds = %B14.endif.i285, %B14.endif.preheader.i240
  %acc.2.011.i276 = phi i64 [ %.94.i283, %B14.endif.i285 ], [ %acc.2.011.ph.i238, %B14.endif.preheader.i240 ]
  %.17.010.i277 = phi i64 [ %.68.i282, %B14.endif.i285 ], [ %.17.010.ph.i239, %B14.endif.preheader.i240 ]
  %sunkaddr11615 = mul i64 %.17.010.i277, 8
  %1444 = bitcast { i64, i64, i8, i64 }* %.6.i3.i232 to i8*
  %sunkaddr11616 = getelementptr i8, i8* %1444, i64 %sunkaddr11615
  %sunkaddr11617 = getelementptr i8, i8* %sunkaddr11616, i64 24
  %1445 = bitcast i8* %sunkaddr11617 to i64*
  %.65.i281 = load i64, i64* %1445, align 8, !noalias !235
  %.68.i282 = add nuw nsw i64 %.17.010.i277, 1
  %.94.i283 = add nsw i64 %.65.i281, %acc.2.011.i276
  %exitcond.not.i284 = icmp eq i64 %.548.i234, %.68.i282
  br i1 %exitcond.not.i284, label %B1876.endif.endif.endif.endif, label %B14.endif.i285, !llvm.loop !52

B1876.endif.endif.endif.endif:                    ; preds = %B14.endif.i285, %middle.block.i274, %B1876.endif.endif.endif
  %acc.2.0.lcssa.i275 = phi i64 [ 0, %B1876.endif.endif.endif ], [ %1443, %middle.block.i274 ], [ %.94.i283, %B14.endif.i285 ]
  tail call void @NRT_decref(i8* nonnull %.14097)
  %.14301 = tail call i8* @NRT_MemInfo_new_varsize_dtor(i64 448, i8* bitcast (void (i8*)* @.dtor.list.int64 to i8*))
  %.14302 = icmp eq i8* %.14301, null
  br i1 %.14302, label %B1876.endif.endif.endif.endif.endif.endif.if, label %B1876.endif.endif.endif.endif.endif.endif.endif, !prof !3

B1876.endif.endif.endif.endif.endif.endif.if:     ; preds = %B1876.endif.endif.endif.endif
  store { i8*, i32, i8* }* @.const.picklebuf.139788660015744, { i8*, i32, i8* }** %excinfo, align 8
  ret i32 1, !ret_is_raise !40

B1876.endif.endif.endif.endif.endif.endif.endif:  ; preds = %B1876.endif.endif.endif.endif
  %.5.i227 = getelementptr i8, i8* %.14301, i64 24
  %1446 = bitcast i8* %.5.i227 to { i64, i64, i8, i64 }**
  %.6.i2285817 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14314 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i2285817, i64 0, i32 1
  store i64 53, i64* %.14314, align 8
  %.6.i2265818 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.1432011618 = bitcast { i64, i64, i8, i64 }* %.6.i2265818 to i64*
  store i64 0, i64* %.1432011618, align 8
  %.6.i2245819 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14326 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i2245819, i64 0, i32 2
  store i8 0, i8* %.14326, align 1
  %.6.i2205820 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14339 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i2205820, i64 0, i32 3
  %.14350 = bitcast i64* %.14339 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(424) %.14350, i8 0, i64 424, i1 false)
  %.6.i2165822 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.1436611619 = bitcast { i64, i64, i8, i64 }* %.6.i2165822 to i64*
  store i64 53, i64* %.1436611619, align 8
  %.6.i2125823 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14379 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i2125823, i64 0, i32 3
  store i64 %.2937.0.ph, i64* %.14379, align 8
  %.6.i2085824 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14393 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i2085824, i64 0, i32 3
  %.14394 = getelementptr i64, i64* %.14393, i64 1
  store i64 4, i64* %.14394, align 8
  %.6.i2045825 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14407 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i2045825, i64 0, i32 3
  %.14408 = getelementptr i64, i64* %.14407, i64 2
  store i64 %.3065.0.ph, i64* %.14408, align 8
  %.6.i2005826 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14421 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i2005826, i64 0, i32 3
  %.14422 = getelementptr i64, i64* %.14421, i64 3
  store i64 %temp.2.467.2.0.lcssa, i64* %.14422, align 8
  %.6.i1965827 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14435 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i1965827, i64 0, i32 3
  %.14436 = getelementptr i64, i64* %.14435, i64 4
  store i64 %acc.2.0.lcssa.i3261, i64* %.14436, align 8
  %.6.i1925828 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14449 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i1925828, i64 0, i32 3
  %.14450 = getelementptr i64, i64* %.14449, i64 5
  store i64 131, i64* %.14450, align 8
  %.6.i1885829 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14463 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i1885829, i64 0, i32 3
  %.14464 = getelementptr i64, i64* %.14463, i64 6
  store i64 %temp.2.449.2.0.lcssa, i64* %.14464, align 8
  %.6.i1845830 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14477 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i1845830, i64 0, i32 3
  %.14478 = getelementptr i64, i64* %.14477, i64 7
  store i64 %acc.2.0.lcssa.i3161, i64* %.14478, align 8
  %.6.i1805831 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14491 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i1805831, i64 0, i32 3
  %.14492 = getelementptr i64, i64* %.14491, i64 8
  store i64 %temp.2.395.2.0.lcssa, i64* %.14492, align 8
  %.6.i1765832 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14505 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i1765832, i64 0, i32 3
  %.14506 = getelementptr i64, i64* %.14505, i64 9
  store i64 %temp.2.413.2.0.lcssa, i64* %.14506, align 8
  %.6.i1725833 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14519 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i1725833, i64 0, i32 3
  %.14520 = getelementptr i64, i64* %.14519, i64 10
  store i64 15, i64* %.14520, align 8
  %.6.i1685834 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14533 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i1685834, i64 0, i32 3
  %.14534 = getelementptr i64, i64* %.14533, i64 11
  store i64 %temp.2.431.2.0.lcssa, i64* %.14534, align 8
  %.6.i1645835 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14547 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i1645835, i64 0, i32 3
  %.14548 = getelementptr i64, i64* %.14547, i64 12
  store i64 %temp.2.377.2.0.lcssa, i64* %.14548, align 8
  %.6.i1605836 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14561 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i1605836, i64 0, i32 3
  %.14562 = getelementptr i64, i64* %.14561, i64 13
  store i64 %temp.2.359.2.0.lcssa, i64* %.14562, align 8
  %.6.i1565837 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14575 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i1565837, i64 0, i32 3
  %.14576 = getelementptr i64, i64* %.14575, i64 14
  store i64 14698, i64* %.14576, align 8
  %.6.i1525838 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14589 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i1525838, i64 0, i32 3
  %.14590 = getelementptr i64, i64* %.14589, i64 15
  store i64 %.6169.0.ph, i64* %.14590, align 8
  %.6.i1485839 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14603 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i1485839, i64 0, i32 3
  %.14604 = getelementptr i64, i64* %.14603, i64 16
  store i64 %temp.2.341.2.0.lcssa, i64* %.14604, align 8
  %.6.i1445840 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14617 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i1445840, i64 0, i32 3
  %.14618 = getelementptr i64, i64* %.14617, i64 17
  store i64 %temp.2.305.2.0.lcssa, i64* %.14618, align 8
  %.6.i1405841 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14631 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i1405841, i64 0, i32 3
  %.14632 = getelementptr i64, i64* %.14631, i64 18
  store i64 %.7109.0.ph, i64* %.14632, align 8
  %.6.i1365842 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14645 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i1365842, i64 0, i32 3
  %.14646 = getelementptr i64, i64* %.14645, i64 19
  store i64 %temp.2.323.2.0.lcssa, i64* %.14646, align 8
  %.6.i1325843 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14659 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i1325843, i64 0, i32 3
  %.14660 = getelementptr i64, i64* %.14659, i64 20
  store i64 %temp.2.287.2.0.lcssa, i64* %.14660, align 8
  %.6.i1285844 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14673 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i1285844, i64 0, i32 3
  %.14674 = getelementptr i64, i64* %.14673, i64 21
  store i64 %temp.2.269.2.0.lcssa, i64* %.14674, align 8
  %.6.i1245845 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14687 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i1245845, i64 0, i32 3
  %.14688 = getelementptr i64, i64* %.14687, i64 22
  store i64 %.8247.0.ph, i64* %.14688, align 8
  %.6.i1205846 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14701 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i1205846, i64 0, i32 3
  %.14702 = getelementptr i64, i64* %.14701, i64 23
  store i64 %temp.2.251.2.0.lcssa, i64* %.14702, align 8
  %.6.i1165847 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14715 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i1165847, i64 0, i32 3
  %.14716 = getelementptr i64, i64* %.14715, i64 24
  store i64 %.8630.0.ph, i64* %.14716, align 8
  %.6.i1125848 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14729 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i1125848, i64 0, i32 3
  %.14730 = getelementptr i64, i64* %.14729, i64 25
  store i64 %temp.2.215.2.0.lcssa, i64* %.14730, align 8
  %.6.i1085849 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14743 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i1085849, i64 0, i32 3
  %.14744 = getelementptr i64, i64* %.14743, i64 26
  store i64 %temp.2.233.2.0.lcssa, i64* %.14744, align 8
  %.6.i1045850 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14757 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i1045850, i64 0, i32 3
  %.14758 = getelementptr i64, i64* %.14757, i64 27
  store i64 %temp.2.197.2.0.lcssa, i64* %.14758, align 8
  %.6.i1005851 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14771 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i1005851, i64 0, i32 3
  %.14772 = getelementptr i64, i64* %.14771, i64 28
  store i64 %.9787.0.ph, i64* %.14772, align 8
  %.6.i965852 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14785 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i965852, i64 0, i32 3
  %.14786 = getelementptr i64, i64* %.14785, i64 29
  store i64 %.9941.0.ph, i64* %.14786, align 8
  %.6.i925853 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14799 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i925853, i64 0, i32 3
  %.14800 = getelementptr i64, i64* %.14799, i64 30
  store i64 %temp.2.179.2.0.lcssa, i64* %.14800, align 8
  %.6.i885854 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14813 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i885854, i64 0, i32 3
  %.14814 = getelementptr i64, i64* %.14813, i64 31
  store i64 18956, i64* %.14814, align 8
  %.6.i845855 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14827 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i845855, i64 0, i32 3
  %.14828 = getelementptr i64, i64* %.14827, i64 32
  store i64 %temp.2.143.2.0.lcssa, i64* %.14828, align 8
  %.6.i805856 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14841 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i805856, i64 0, i32 3
  %.14842 = getelementptr i64, i64* %.14841, i64 33
  store i64 %acc.2.0.lcssa.i1405, i64* %.14842, align 8
  %.6.i765857 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14855 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i765857, i64 0, i32 3
  %.14856 = getelementptr i64, i64* %.14855, i64 34
  store i64 %temp.2.161.2.0.lcssa, i64* %.14856, align 8
  %.6.i725858 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14869 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i725858, i64 0, i32 3
  %.14870 = getelementptr i64, i64* %.14869, i64 35
  store i64 211, i64* %.14870, align 8
  %.6.i685859 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14883 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i685859, i64 0, i32 3
  %.14884 = getelementptr i64, i64* %.14883, i64 36
  store i64 %temp.2.125.2.0.lcssa, i64* %.14884, align 8
  %.6.i645860 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14897 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i645860, i64 0, i32 3
  %.14898 = getelementptr i64, i64* %.14897, i64 37
  store i64 %acc.2.0.lcssa.i1021, i64* %.14898, align 8
  %.6.i605861 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14911 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i605861, i64 0, i32 3
  %.14912 = getelementptr i64, i64* %.14911, i64 38
  store i64 %.11793.0.ph, i64* %.14912, align 8
  %.6.i565862 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14925 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i565862, i64 0, i32 3
  %.14926 = getelementptr i64, i64* %.14925, i64 39
  store i64 %.11975.0.ph, i64* %.14926, align 8
  %.6.i525863 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14939 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i525863, i64 0, i32 3
  %.14940 = getelementptr i64, i64* %.14939, i64 40
  store i64 %temp.2.107.2.0.lcssa, i64* %.14940, align 8
  %.6.i485864 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14953 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i485864, i64 0, i32 3
  %.14954 = getelementptr i64, i64* %.14953, i64 41
  store i64 %.12709.0.ph, i64* %.14954, align 8
  %.6.i445865 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14967 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i445865, i64 0, i32 3
  %.14968 = getelementptr i64, i64* %.14967, i64 42
  store i64 %temp.2.71.2.0.lcssa, i64* %.14968, align 8
  %.6.i405866 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14981 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i405866, i64 0, i32 3
  %.14982 = getelementptr i64, i64* %.14981, i64 43
  store i64 %temp.2.89.2.0.lcssa, i64* %.14982, align 8
  %.6.i365867 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.14995 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i365867, i64 0, i32 3
  %.14996 = getelementptr i64, i64* %.14995, i64 44
  store i64 7, i64* %.14996, align 8
  %.6.i325868 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.15009 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i325868, i64 0, i32 3
  %.15010 = getelementptr i64, i64* %.15009, i64 45
  store i64 %acc.2.0.lcssa.i431, i64* %.15010, align 8
  %.6.i285869 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.15023 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i285869, i64 0, i32 3
  %.15024 = getelementptr i64, i64* %.15023, i64 46
  store i64 547, i64* %.15024, align 8
  %.6.i245870 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.15037 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i245870, i64 0, i32 3
  %.15038 = getelementptr i64, i64* %.15037, i64 47
  store i64 %temp.2.53.2.0.lcssa, i64* %.15038, align 8
  %.6.i205871 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.15051 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i205871, i64 0, i32 3
  %.15052 = getelementptr i64, i64* %.15051, i64 48
  store i64 %temp.2.35.2.0.lcssa, i64* %.15052, align 8
  %.6.i165872 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.15065 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i165872, i64 0, i32 3
  %.15066 = getelementptr i64, i64* %.15065, i64 49
  store i64 11, i64* %.15066, align 8
  %.6.i125873 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.15079 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i125873, i64 0, i32 3
  %.15080 = getelementptr i64, i64* %.15079, i64 50
  store i64 %temp.2.17.2.0.lcssa, i64* %.15080, align 8
  %.6.i85874 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.15093 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i85874, i64 0, i32 3
  %.15094 = getelementptr i64, i64* %.15093, i64 51
  store i64 %acc.2.0.lcssa.i275, i64* %.15094, align 8
  %.6.i45875 = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8
  %.15107 = getelementptr inbounds { i64, i64, i8, i64 }, { i64, i64, i8, i64 }* %.6.i45875, i64 0, i32 3
  %.15108 = getelementptr i64, i64* %.15107, i64 52
  store i64 3, i64* %.15108, align 8
  %.6.i3.i = load { i64, i64, i8, i64 }*, { i64, i64, i8, i64 }** %1446, align 8, !noalias !238
  %.5342.i11620 = bitcast { i64, i64, i8, i64 }* %.6.i3.i to i64*
  %.548.i = load i64, i64* %.5342.i11620, align 8, !noalias !238
  %.559.i = icmp sgt i64 %.548.i, 0
  br i1 %.559.i, label %B14.endif.lr.ph.i, label %B1876.endif.endif.endif.endif.endif.endif.endif.endif

B14.endif.lr.ph.i:                                ; preds = %B1876.endif.endif.endif.endif.endif.endif.endif
  %min.iters.check.i = icmp ult i64 %.548.i, 16
  br i1 %min.iters.check.i, label %B14.endif.preheader.i, label %vector.ph.i

B14.endif.preheader.i:                            ; preds = %middle.block.i, %B14.endif.lr.ph.i
  %acc.2.011.ph.i = phi i64 [ 0, %B14.endif.lr.ph.i ], [ %1460, %middle.block.i ]
  %.17.010.ph.i = phi i64 [ 0, %B14.endif.lr.ph.i ], [ %n.vec.i, %middle.block.i ]
  br label %B14.endif.i

vector.ph.i:                                      ; preds = %B14.endif.lr.ph.i
  %n.vec.i = and i64 %.548.i, -16
  br label %vector.body.i

vector.body.i:                                    ; preds = %vector.body.i, %vector.ph.i
  %index.i = phi i64 [ 0, %vector.ph.i ], [ %index.next.i, %vector.body.i ]
  %vec.phi.i = phi <4 x i64> [ zeroinitializer, %vector.ph.i ], [ %1455, %vector.body.i ]
  %vec.phi12.i = phi <4 x i64> [ zeroinitializer, %vector.ph.i ], [ %1456, %vector.body.i ]
  %vec.phi13.i = phi <4 x i64> [ zeroinitializer, %vector.ph.i ], [ %1457, %vector.body.i ]
  %vec.phi14.i = phi <4 x i64> [ zeroinitializer, %vector.ph.i ], [ %1458, %vector.body.i ]
  %sunkaddr11621 = mul i64 %index.i, 8
  %1447 = bitcast { i64, i64, i8, i64 }* %.6.i3.i to i8*
  %sunkaddr11622 = getelementptr i8, i8* %1447, i64 %sunkaddr11621
  %sunkaddr11623 = getelementptr i8, i8* %sunkaddr11622, i64 24
  %1448 = bitcast i8* %sunkaddr11623 to <4 x i64>*
  %wide.load.i = load <4 x i64>, <4 x i64>* %1448, align 8, !noalias !238
  %sunkaddr11624 = mul i64 %index.i, 8
  %1449 = bitcast { i64, i64, i8, i64 }* %.6.i3.i to i8*
  %sunkaddr11625 = getelementptr i8, i8* %1449, i64 %sunkaddr11624
  %sunkaddr11626 = getelementptr i8, i8* %sunkaddr11625, i64 56
  %1450 = bitcast i8* %sunkaddr11626 to <4 x i64>*
  %wide.load15.i = load <4 x i64>, <4 x i64>* %1450, align 8, !noalias !238
  %sunkaddr11627 = mul i64 %index.i, 8
  %1451 = bitcast { i64, i64, i8, i64 }* %.6.i3.i to i8*
  %sunkaddr11628 = getelementptr i8, i8* %1451, i64 %sunkaddr11627
  %sunkaddr11629 = getelementptr i8, i8* %sunkaddr11628, i64 88
  %1452 = bitcast i8* %sunkaddr11629 to <4 x i64>*
  %wide.load16.i = load <4 x i64>, <4 x i64>* %1452, align 8, !noalias !238
  %sunkaddr11630 = mul i64 %index.i, 8
  %1453 = bitcast { i64, i64, i8, i64 }* %.6.i3.i to i8*
  %sunkaddr11631 = getelementptr i8, i8* %1453, i64 %sunkaddr11630
  %sunkaddr11632 = getelementptr i8, i8* %sunkaddr11631, i64 120
  %1454 = bitcast i8* %sunkaddr11632 to <4 x i64>*
  %wide.load17.i = load <4 x i64>, <4 x i64>* %1454, align 8, !noalias !238
  %1455 = add <4 x i64> %wide.load.i, %vec.phi.i
  %1456 = add <4 x i64> %wide.load15.i, %vec.phi12.i
  %1457 = add <4 x i64> %wide.load16.i, %vec.phi13.i
  %1458 = add <4 x i64> %wide.load17.i, %vec.phi14.i
  %index.next.i = add i64 %index.i, 16
  %1459 = icmp eq i64 %n.vec.i, %index.next.i
  br i1 %1459, label %middle.block.i, label %vector.body.i, !llvm.loop !51

middle.block.i:                                   ; preds = %vector.body.i
  %bin.rdx.i = add <4 x i64> %1456, %1455
  %bin.rdx18.i = add <4 x i64> %bin.rdx.i, %1457
  %bin.rdx19.i = add <4 x i64> %bin.rdx18.i, %1458
  %rdx.shuf.i = shufflevector <4 x i64> %bin.rdx19.i, <4 x i64> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx39.i = add <4 x i64> %rdx.shuf.i, %bin.rdx19.i
  %rdx.shuf40.i = shufflevector <4 x i64> %bin.rdx39.i, <4 x i64> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx41.i = add <4 x i64> %rdx.shuf40.i, %bin.rdx39.i
  %1460 = extractelement <4 x i64> %bin.rdx41.i, i32 0
  %cmp.n.i = icmp eq i64 %.548.i, %n.vec.i
  br i1 %cmp.n.i, label %B1876.endif.endif.endif.endif.endif.endif.endif.endif, label %B14.endif.preheader.i

B14.endif.i:                                      ; preds = %B14.endif.i, %B14.endif.preheader.i
  %acc.2.011.i = phi i64 [ %.94.i, %B14.endif.i ], [ %acc.2.011.ph.i, %B14.endif.preheader.i ]
  %.17.010.i = phi i64 [ %.68.i, %B14.endif.i ], [ %.17.010.ph.i, %B14.endif.preheader.i ]
  %sunkaddr11633 = mul i64 %.17.010.i, 8
  %1461 = bitcast { i64, i64, i8, i64 }* %.6.i3.i to i8*
  %sunkaddr11634 = getelementptr i8, i8* %1461, i64 %sunkaddr11633
  %sunkaddr11635 = getelementptr i8, i8* %sunkaddr11634, i64 24
  %1462 = bitcast i8* %sunkaddr11635 to i64*
  %.65.i = load i64, i64* %1462, align 8, !noalias !238
  %.68.i = add nuw nsw i64 %.17.010.i, 1
  %.94.i = add nsw i64 %.65.i, %acc.2.011.i
  %exitcond.not.i = icmp eq i64 %.548.i, %.68.i
  br i1 %exitcond.not.i, label %B1876.endif.endif.endif.endif.endif.endif.endif.endif, label %B14.endif.i, !llvm.loop !52

B1876.endif.endif.endif.endif.endif.endif.endif.endif: ; preds = %B14.endif.i, %middle.block.i, %B1876.endif.endif.endif.endif.endif.endif.endif
  %acc.2.0.lcssa.i = phi i64 [ 0, %B1876.endif.endif.endif.endif.endif.endif.endif ], [ %1460, %middle.block.i ], [ %.94.i, %B14.endif.i ]
  tail call void @NRT_decref(i8* nonnull %.14301)
  store i64 %acc.2.0.lcssa.i, i64* %retptr, align 8
  ret i32 0
}

define linkonce_odr void @.dtor.list.int64(i8* %.1) {
.3:
  ret void
}

declare i8* @NRT_MemInfo_new_varsize_dtor(i64, i8*) local_unnamed_addr

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #0

define i8* @"_ZN7cpython8__main__10calc_x$241E"(i8* nocapture readnone %py_closure, i8* %py_args, i8* nocapture readnone %py_kws) local_unnamed_addr {
entry:
  %.5 = tail call i32 (i8*, i8*, i64, i64, ...) @PyArg_UnpackTuple(i8* %py_args, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.const.calc_x, i64 0, i64 0), i64 0, i64 0)
  %.6 = icmp eq i32 %.5, 0
  %.20 = alloca i64, align 8
  store i64 0, i64* %.20, align 8
  %excinfo = alloca { i8*, i32, i8* }*, align 8
  store { i8*, i32, i8* }* null, { i8*, i32, i8* }** %excinfo, align 8
  br i1 %.6, label %entry.if, label %entry.endif, !prof !3

entry.if:                                         ; preds = %entry.endif.endif.endif.if, %entry.endif.endif.endif.if.if, %entry.endif.endif.endif.endif.endif.endif, %entry
  ret i8* null

entry.endif:                                      ; preds = %entry
  %.10 = load i8*, i8** @"_ZN08NumbaEnv8__main__10calc_x$241E", align 8
  %.15 = icmp eq i8* %.10, null
  br i1 %.15, label %entry.endif.if, label %entry.endif.endif, !prof !3

entry.endif.if:                                   ; preds = %entry.endif
  tail call void @PyErr_SetString(i8* nonnull @PyExc_RuntimeError, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @".const.missing Environment: _ZN08NumbaEnv8__main__10calc_x$241E", i64 0, i64 0))
  ret i8* null

entry.endif.endif:                                ; preds = %entry.endif
  %.19 = tail call i8* @PyEval_SaveThread()
  store i64 0, i64* %.20, align 8
  %.24 = call i32 @"_ZN8__main__10calc_x$241E"(i64* nonnull %.20, { i8*, i32, i8* }** nonnull %excinfo) #1
  %.25 = load { i8*, i32, i8* }*, { i8*, i32, i8* }** %excinfo, align 8
  %.34 = load i64, i64* %.20, align 8
  tail call void @PyEval_RestoreThread(i8* %.19)
  switch i32 %.24, label %entry.endif.endif.endif [
    i32 -2, label %entry.endif.endif.if.endif
    i32 0, label %entry.endif.endif.if.endif
  ]

entry.endif.endif.endif:                          ; preds = %entry.endif.endif
  %.32 = icmp sgt i32 %.24, 0
  br i1 %.32, label %entry.endif.endif.endif.if, label %entry.endif.endif.endif.endif.endif.endif

entry.endif.endif.if.endif:                       ; preds = %entry.endif.endif, %entry.endif.endif
  %.42 = tail call i8* @PyLong_FromLongLong(i64 %.34)
  ret i8* %.42

entry.endif.endif.endif.if:                       ; preds = %entry.endif.endif.endif
  tail call void @PyErr_Clear()
  %.49 = load { i8*, i32, i8* }, { i8*, i32, i8* }* %.25, align 8
  %.50 = extractvalue { i8*, i32, i8* } %.49, 0
  %.52 = extractvalue { i8*, i32, i8* } %.49, 1
  %.54 = extractvalue { i8*, i32, i8* } %.49, 2
  %.55 = tail call i8* @numba_unpickle(i8* %.50, i32 %.52, i8* %.54)
  %.56.not = icmp eq i8* %.55, null
  br i1 %.56.not, label %entry.if, label %entry.endif.endif.endif.if.if, !prof !3

entry.endif.endif.endif.if.if:                    ; preds = %entry.endif.endif.endif.if
  tail call void @numba_do_raise(i8* nonnull %.55)
  br label %entry.if

entry.endif.endif.endif.endif.endif.endif:        ; preds = %entry.endif.endif.endif
  tail call void @PyErr_SetString(i8* nonnull @PyExc_SystemError, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @".const.unknown error when calling native function", i64 0, i64 0))
  br label %entry.if
}

declare i32 @PyArg_UnpackTuple(i8*, i8*, i64, i64, ...) local_unnamed_addr

declare void @PyErr_SetString(i8*, i8*) local_unnamed_addr

declare i8* @PyEval_SaveThread() local_unnamed_addr

declare void @PyEval_RestoreThread(i8*) local_unnamed_addr

declare i8* @PyLong_FromLongLong(i64) local_unnamed_addr

declare void @PyErr_Clear() local_unnamed_addr

declare i8* @numba_unpickle(i8*, i32, i8*) local_unnamed_addr

declare void @numba_do_raise(i8*) local_unnamed_addr

define i64 @"cfunc._ZN8__main__10calc_x$241E"() local_unnamed_addr {
entry:
  %.2 = alloca i64, align 8
  store i64 0, i64* %.2, align 8
  %excinfo = alloca { i8*, i32, i8* }*, align 8
  store { i8*, i32, i8* }* null, { i8*, i32, i8* }** %excinfo, align 8
  %.6 = call i32 @"_ZN8__main__10calc_x$241E"(i64* nonnull %.2, { i8*, i32, i8* }** nonnull %excinfo) #1
  %.7 = load { i8*, i32, i8* }*, { i8*, i32, i8* }** %excinfo, align 8
  %.8.not = icmp eq i32 %.6, 0
  %.16 = load i64, i64* %.2, align 8
  %.18 = alloca i32, align 4
  store i32 0, i32* %.18, align 4
  br i1 %.8.not, label %entry.endif, label %entry.if, !prof !241

entry.if:                                         ; preds = %entry
  %.14 = icmp sgt i32 %.6, 0
  call void @numba_gil_ensure(i32* nonnull %.18)
  br i1 %.14, label %entry.if.if, label %entry.if.endif.endif.endif

entry.endif:                                      ; preds = %entry, %.21
  ret i64 %.16

.21:                                              ; preds = %entry.if.if, %entry.if.if.if, %entry.if.endif.endif.endif
  %.43 = call i8* @PyUnicode_FromString(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @".const.<numba.core.cpu.CPUContext object at 0x7f2315a5aa60>", i64 0, i64 0))
  call void @PyErr_WriteUnraisable(i8* %.43)
  call void @Py_DecRef(i8* %.43)
  call void @numba_gil_release(i32* nonnull %.18)
  br label %entry.endif

entry.if.if:                                      ; preds = %entry.if
  call void @PyErr_Clear()
  %.24 = load { i8*, i32, i8* }, { i8*, i32, i8* }* %.7, align 8
  %.25 = extractvalue { i8*, i32, i8* } %.24, 0
  %.27 = extractvalue { i8*, i32, i8* } %.24, 1
  %.29 = extractvalue { i8*, i32, i8* } %.24, 2
  %.30 = call i8* @numba_unpickle(i8* %.25, i32 %.27, i8* %.29)
  %.31.not = icmp eq i8* %.30, null
  br i1 %.31.not, label %.21, label %entry.if.if.if, !prof !3

entry.if.if.if:                                   ; preds = %entry.if.if
  call void @numba_do_raise(i8* nonnull %.30)
  br label %.21

entry.if.endif.endif.endif:                       ; preds = %entry.if
  call void @PyErr_SetString(i8* nonnull @PyExc_SystemError, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @".const.unknown error when calling native function.1", i64 0, i64 0))
  br label %.21
}

declare void @numba_gil_ensure(i32*) local_unnamed_addr

declare i8* @PyUnicode_FromString(i8*) local_unnamed_addr

declare void @PyErr_WriteUnraisable(i8*) local_unnamed_addr

declare void @Py_DecRef(i8*) local_unnamed_addr

declare void @numba_gil_release(i32*) local_unnamed_addr

; Function Attrs: noinline
define linkonce_odr void @NRT_decref(i8* %.1) local_unnamed_addr #1 {
.3:
  %.4 = icmp eq i8* %.1, null
  br i1 %.4, label %.3.if, label %.3.endif, !prof !3

.3.if:                                            ; preds = %.3.endif, %.3
  ret void

.3.endif:                                         ; preds = %.3
  fence release
  %.8 = bitcast i8* %.1 to i64*
  %.4.i = atomicrmw sub i64* %.8, i64 1 monotonic
  %.10 = icmp eq i64 %.4.i, 1
  br i1 %.10, label %.3.endif.if, label %.3.if, !prof !3

.3.endif.if:                                      ; preds = %.3.endif
  fence acquire
  tail call void @NRT_MemInfo_call_dtor(i8* nonnull %.1)
  ret void
}

declare void @NRT_MemInfo_call_dtor(i8*) local_unnamed_addr

; Function Attrs: nounwind readnone willreturn
declare i64 @llvm.experimental.vector.reduce.mul.v4i64(<4 x i64>) #2

; Function Attrs: nounwind
declare void @llvm.stackprotector(i8*, i8**) #3

attributes #0 = { argmemonly nounwind willreturn writeonly }
attributes #1 = { noinline }
attributes #2 = { nounwind readnone willreturn }
attributes #3 = { nounwind }

!numba_args_may_always_need_nrt = !{!0, !1, !2, !0, !0, !0, !2, !2, !2, !0, !0, !0, !0, !2, !0, !2, !1, !1, !1, !1, !0, !1, !1, !2, !1, !1, !0, !0, !1, !1, !0, !2, !1, !1, !1, !1, !1, !2, !2, !1, !1, !0, !1, !1, !1, !0, !1, !2}

!0 = distinct !{null}
!1 = distinct !{null}
!2 = distinct !{null}
!3 = !{!"branch_weights", i32 1, i32 99}
!4 = distinct !{!4, !5, !6}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = !{!"llvm.loop.isvectorized", i32 1}
!7 = distinct !{!7, !5, !6}
!8 = distinct !{!8, !5, !6}
!9 = distinct !{!9, !5, !6}
!10 = distinct !{!10, !5, !6}
!11 = distinct !{!11, !5, !6}
!12 = distinct !{!12, !5, !6}
!13 = distinct !{!13, !5, !6}
!14 = distinct !{!14, !5, !6}
!15 = distinct !{!15, !5, !6}
!16 = distinct !{!16, !5, !6}
!17 = distinct !{!17, !5, !6}
!18 = distinct !{!18, !5, !6}
!19 = distinct !{!19, !5, !6}
!20 = distinct !{!20, !5, !6}
!21 = distinct !{!21, !5, !6}
!22 = distinct !{!22, !5, !6}
!23 = distinct !{!23, !5, !6}
!24 = distinct !{!24, !5, !6}
!25 = distinct !{!25, !5, !6}
!26 = distinct !{!26, !5, !6}
!27 = distinct !{!27, !5, !6}
!28 = distinct !{!28, !5, !6}
!29 = distinct !{!29, !5, !6}
!30 = distinct !{!30, !5, !6}
!31 = distinct !{!31, !5, !6}
!32 = distinct !{!32, !5, !6}
!33 = distinct !{!33, !5, !6}
!34 = distinct !{!34, !5, !6}
!35 = distinct !{!35, !5, !6}
!36 = distinct !{!36, !5, !6}
!37 = distinct !{!37, !5, !6}
!38 = distinct !{!38, !5, !6}
!39 = distinct !{!39, !5, !6}
!40 = !{i1 true}
!41 = !{!42, !44}
!42 = distinct !{!42, !43, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e: %retptr"}
!43 = distinct !{!43, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e"}
!44 = distinct !{!44, !43, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e: %excinfo"}
!45 = !{!"branch_weights", i32 2126008812, i32 21474836}
!46 = distinct !{!46, !5, !6}
!47 = distinct !{!47, !6}
!48 = !{!49}
!49 = distinct !{!49, !50, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29: %retptr"}
!50 = distinct !{!50, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29"}
!51 = distinct !{!51, !6}
!52 = distinct !{!52, !5, !6}
!53 = distinct !{!53, !6}
!54 = !{!55, !57}
!55 = distinct !{!55, !56, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e: %retptr"}
!56 = distinct !{!56, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e"}
!57 = distinct !{!57, !56, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e: %excinfo"}
!58 = distinct !{!58, !5, !6}
!59 = distinct !{!59, !6}
!60 = distinct !{!60, !6}
!61 = !{!62, !64}
!62 = distinct !{!62, !63, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e: %retptr"}
!63 = distinct !{!63, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e"}
!64 = distinct !{!64, !63, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e: %excinfo"}
!65 = !{!66, !68}
!66 = distinct !{!66, !67, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e: %retptr"}
!67 = distinct !{!67, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e"}
!68 = distinct !{!68, !67, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e: %excinfo"}
!69 = distinct !{!69, !6}
!70 = distinct !{!70, !6}
!71 = !{!72, !74}
!72 = distinct !{!72, !73, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e: %retptr"}
!73 = distinct !{!73, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e"}
!74 = distinct !{!74, !73, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e: %excinfo"}
!75 = !{!76, !78}
!76 = distinct !{!76, !77, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e: %retptr"}
!77 = distinct !{!77, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e"}
!78 = distinct !{!78, !77, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e: %excinfo"}
!79 = !{!80, !82}
!80 = distinct !{!80, !81, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e: %retptr"}
!81 = distinct !{!81, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e"}
!82 = distinct !{!82, !81, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e: %excinfo"}
!83 = !{!84, !86}
!84 = distinct !{!84, !85, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e: %retptr"}
!85 = distinct !{!85, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e"}
!86 = distinct !{!86, !85, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e: %excinfo"}
!87 = distinct !{!87, !6}
!88 = !{!89, !91}
!89 = distinct !{!89, !90, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e: %retptr"}
!90 = distinct !{!90, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e"}
!91 = distinct !{!91, !90, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e: %excinfo"}
!92 = !{!93, !95}
!93 = distinct !{!93, !94, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e: %retptr"}
!94 = distinct !{!94, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e"}
!95 = distinct !{!95, !94, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e: %excinfo"}
!96 = !{!97, !99}
!97 = distinct !{!97, !98, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e: %retptr"}
!98 = distinct !{!98, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e"}
!99 = distinct !{!99, !98, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e: %excinfo"}
!100 = !{!101, !103}
!101 = distinct !{!101, !102, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e: %retptr"}
!102 = distinct !{!102, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e"}
!103 = distinct !{!103, !102, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e: %excinfo"}
!104 = !{!105, !107}
!105 = distinct !{!105, !106, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e: %retptr"}
!106 = distinct !{!106, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e"}
!107 = distinct !{!107, !106, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e: %excinfo"}
!108 = !{!109, !111}
!109 = distinct !{!109, !110, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e: %retptr"}
!110 = distinct !{!110, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e"}
!111 = distinct !{!111, !110, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e: %excinfo"}
!112 = !{!113, !115}
!113 = distinct !{!113, !114, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e: %retptr"}
!114 = distinct !{!114, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e"}
!115 = distinct !{!115, !114, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e: %excinfo"}
!116 = distinct !{!116, !6}
!117 = distinct !{!117, !6}
!118 = distinct !{!118, !6}
!119 = distinct !{!119, !6}
!120 = !{!121}
!121 = distinct !{!121, !122, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29: %retptr"}
!122 = distinct !{!122, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29"}
!123 = distinct !{!123, !6}
!124 = !{!125}
!125 = distinct !{!125, !126, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29: %retptr"}
!126 = distinct !{!126, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29"}
!127 = distinct !{!127, !6}
!128 = distinct !{!128, !6}
!129 = distinct !{!129, !6}
!130 = distinct !{!130, !6}
!131 = !{!132}
!132 = distinct !{!132, !133, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29: %retptr"}
!133 = distinct !{!133, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29"}
!134 = !{!135}
!135 = distinct !{!135, !136, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29: %retptr"}
!136 = distinct !{!136, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29"}
!137 = distinct !{!137, !6}
!138 = !{!139, !141}
!139 = distinct !{!139, !140, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e: %retptr"}
!140 = distinct !{!140, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e"}
!141 = distinct !{!141, !140, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e: %excinfo"}
!142 = distinct !{!142, !6}
!143 = !{!144}
!144 = distinct !{!144, !145, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29: %retptr"}
!145 = distinct !{!145, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29"}
!146 = !{!147}
!147 = distinct !{!147, !148, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29: %retptr"}
!148 = distinct !{!148, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29"}
!149 = distinct !{!149, !6}
!150 = !{!151, !153}
!151 = distinct !{!151, !152, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e: %retptr"}
!152 = distinct !{!152, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e"}
!153 = distinct !{!153, !152, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e: %excinfo"}
!154 = distinct !{!154, !6}
!155 = distinct !{!155, !6}
!156 = !{!157}
!157 = distinct !{!157, !158, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29: %retptr"}
!158 = distinct !{!158, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29"}
!159 = !{!160}
!160 = distinct !{!160, !161, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29: %retptr"}
!161 = distinct !{!161, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29"}
!162 = distinct !{!162, !6}
!163 = !{!164, !166}
!164 = distinct !{!164, !165, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e: %retptr"}
!165 = distinct !{!165, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e"}
!166 = distinct !{!166, !165, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e: %excinfo"}
!167 = distinct !{!167, !6}
!168 = !{!169, !171}
!169 = distinct !{!169, !170, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e: %retptr"}
!170 = distinct !{!170, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e"}
!171 = distinct !{!171, !170, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e: %excinfo"}
!172 = distinct !{!172, !6}
!173 = distinct !{!173, !6}
!174 = !{!175}
!175 = distinct !{!175, !176, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29: %retptr"}
!176 = distinct !{!176, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29"}
!177 = !{!178}
!178 = distinct !{!178, !179, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29: %retptr"}
!179 = distinct !{!179, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29"}
!180 = distinct !{!180, !6}
!181 = !{!182, !184}
!182 = distinct !{!182, !183, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e: %retptr"}
!183 = distinct !{!183, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e"}
!184 = distinct !{!184, !183, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e: %excinfo"}
!185 = !{!186, !188}
!186 = distinct !{!186, !187, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e: %retptr"}
!187 = distinct !{!187, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e"}
!188 = distinct !{!188, !187, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e: %excinfo"}
!189 = distinct !{!189, !6}
!190 = distinct !{!190, !6}
!191 = !{!192}
!192 = distinct !{!192, !193, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29: %retptr"}
!193 = distinct !{!193, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29"}
!194 = !{!195}
!195 = distinct !{!195, !196, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29: %retptr"}
!196 = distinct !{!196, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29"}
!197 = !{!198}
!198 = distinct !{!198, !199, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29: %retptr"}
!199 = distinct !{!199, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29"}
!200 = !{!201}
!201 = distinct !{!201, !202, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29: %retptr"}
!202 = distinct !{!202, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29"}
!203 = distinct !{!203, !6}
!204 = distinct !{!204, !6}
!205 = !{!206}
!206 = distinct !{!206, !207, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29: %retptr"}
!207 = distinct !{!207, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29"}
!208 = !{!209, !211}
!209 = distinct !{!209, !210, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e: %retptr"}
!210 = distinct !{!210, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e"}
!211 = distinct !{!211, !210, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e: %excinfo"}
!212 = !{!213, !215}
!213 = distinct !{!213, !214, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e: %retptr"}
!214 = distinct !{!214, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e"}
!215 = distinct !{!215, !214, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2439E30list$28int64$29$3civ$3dNone$3e: %excinfo"}
!216 = !{!217}
!217 = distinct !{!217, !218, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29: %retptr"}
!218 = distinct !{!218, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29"}
!219 = !{!220}
!220 = distinct !{!220, !221, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29: %retptr"}
!221 = distinct !{!221, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29"}
!222 = distinct !{!222, !6}
!223 = !{!224, !226}
!224 = distinct !{!224, !225, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e: %retptr"}
!225 = distinct !{!225, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e"}
!226 = distinct !{!226, !225, !"_ZN5numba7cpython8builtins12min_max_impl12$3clocals$3e9impl$2436E30list$28int64$29$3civ$3dNone$3e: %excinfo"}
!227 = distinct !{!227, !6}
!228 = distinct !{!228, !6}
!229 = !{!230}
!230 = distinct !{!230, !231, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29: %retptr"}
!231 = distinct !{!231, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29"}
!232 = distinct !{!232, !6}
!233 = distinct !{!233, !6}
!234 = distinct !{!234, !6}
!235 = !{!236}
!236 = distinct !{!236, !237, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29: %retptr"}
!237 = distinct !{!237, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29"}
!238 = !{!239}
!239 = distinct !{!239, !240, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29: %retptr"}
!240 = distinct !{!240, !"_ZN5numba7cpython8builtins6ol_sum12$3clocals$3e9impl$2438E30list$28int64$29$3civ$3dNone$3e24omitted$28default$3d0$29"}
!241 = !{!"branch_weights", i32 99, i32 1}

================================================================================
